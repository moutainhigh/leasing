<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="zcfl.assets">

	<select id="list" parameterType="Map" resultType="Map">
		SELECT * FROM (
			SELECT T.*,ROWNUM ROWNO FROM (
				SELECT ZAA.ASSETS_ID,
				       ZP.PLAN_TITLE,
				       to_char(ZP.PLAN_STARTDATE, 'yyyy-mm-dd') PLAN_STARTDATE,
				       ZAA.CONTRACT_CODE,
				       ZAA.CLIENT_NAME,
				       ZAA.PAY_CODE,
				       ZAA.ASSETS_TYPE,
				       ZAA.ASSETS_LEVEL,
				       ZAA.STATUS
				  FROM (SELECT ZCFL.PLAN_ID,
				               ZCFL.ASSETS_ID,
				               ZCFL.CONTRACT_CODE,
				               ZCFL.CLIENT_NAME,
				               ZCFL.PAY_CODE,
				               ZCFL.ASSETS_TYPE,
				               ZCFL.ASSETS_LEVEL,
				               ZCFL.STATUS
				          FROM ZCFL_ASSETS ZCFL,
				               (SELECT ZA.PAY_CODE, MAX(ZA.ASSETS_DATE) ASSETS_DATE
				                  FROM ZCFL_ASSETS ZA
				                 GROUP BY ZA.PAY_CODE) CC
				         WHERE ZCFL.PAY_CODE = CC.PAY_CODE
				           AND ZCFL.ASSETS_DATE = CC.ASSETS_DATE) ZAA,
				       ZCFL_PLAN ZP
				 WHERE ZAA.PLAN_ID = ZP.PLAN_ID	
			       <if test="CONTRACT_CODE != null and CONTRACT_CODE != ''">AND ZAA.CONTRACT_CODE LIKE '%${CONTRACT_CODE}%'</if>
			       <if test="PAY_CODE != null and PAY_CODE != ''">AND ZAA.PAY_CODE LIKE '%${PAY_CODE}%'</if>
			       <if test="CLIENT_NAME != null and CLIENT_NAME != ''">AND ZAA.CLIENT_NAME LIKE '%${CLIENT_NAME}%'</if>
			       <if test="PLAN_STARTDATE != null and PLAN_STARTDATE != ''">AND TO_CHAR(ZP.PLAN_STARTDATE,'YYYY-MM-DD') = #{PLAN_STARTDATE}</if>
					)T
			WHERE ROWNUM &lt;= #{PAGE_END}
		)WHERE ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="listCount" parameterType="Map" resultType="int">
		SELECT COUNT(1)
		  FROM (SELECT ZCFL.PLAN_ID,
				               ZCFL.ASSETS_ID,
				               ZCFL.CONTRACT_CODE,
				               ZCFL.CLIENT_NAME,
				               ZCFL.PAY_CODE,
				               ZCFL.ASSETS_TYPE,
				               ZCFL.ASSETS_LEVEL,
				               ZCFL.STATUS
				          FROM ZCFL_ASSETS ZCFL,
				               (SELECT ZA.PAY_CODE, MAX(ZA.ASSETS_DATE) ASSETS_DATE
				                  FROM ZCFL_ASSETS ZA
				                 GROUP BY ZA.PAY_CODE) CC
				         WHERE ZCFL.PAY_CODE = CC.PAY_CODE
				           AND ZCFL.ASSETS_DATE = CC.ASSETS_DATE) ZAA,
				       ZCFL_PLAN ZP
				 WHERE ZAA.PLAN_ID = ZP.PLAN_ID	
	       <if test="CONTRACT_CODE != null and CONTRACT_CODE != ''">AND ZAA.CONTRACT_CODE LIKE '%${CONTRACT_CODE}%'</if>
	       <if test="PAY_CODE != null and PAY_CODE != ''">AND ZAA.PAY_CODE LIKE '%${PAY_CODE}%'</if>
	       <if test="CLIENT_NAME != null and CLIENT_NAME != ''">AND ZAA.CLIENT_NAME LIKE '%${CLIENT_NAME}%'</if>
	       <if test="PLAN_STARTDATE != null and PLAN_STARTDATE != ''">AND ZP.PLAN_STARTDATE LIKE '%${PLAN_STARTDATE}%'</if>
	</select>
	
	<select id="assetsCount" parameterType="Map" resultType="int">
		SELECT COUNT(1)
			  FROM T_SYS_DATA_DICTIONARY T1,
			       (SELECT CASE
			                 WHEN TT.LEVEL_NUM > 12 THEN
			                  12
			                 WHEN TT.LEVEL_NUM &lt; 1 THEN
			                  1
			                 ELSE
			                  TT.LEVEL_NUM
			               END LEVEL_NUM,
			               TT.LEVEL_NUM OLD_LEVEL_NUM,
			               TT.ZAIL_PAY_CODE,
			               TT.ZAIL_LEVEL,
			               TT.ASSETS_TYPE,
			               TT.ASSETS_LEVEL,
			               TT.ZAIL_DATE,
			               TT.CLASSIFICATION_TYPE,
			               TT.ZAIL_DAYS
			          FROM (SELECT CASE
			                         WHEN ZA.CLASSIFICATION_TYPE = 2 THEN
			                          CASE
			                            WHEN ZA.ASSETS_TYPE = '上调' THEN
			                             (T.LEVEL_NUM - ZA.ASSETS_LEVEL)
			                            WHEN ZA.ASSETS_TYPE = '下调' THEN
			                             T.LEVEL_NUM + ZA.ASSETS_LEVEL
			                            ELSE
			                             T.LEVEL_NUM
			                          END
			                         WHEN ZA.CLASSIFICATION_TYPE = 1 THEN
			                          CASE
			                            WHEN (SELECT TSDD.LEVEL_NUM
			                                    FROM T_SYS_DATA_DICTIONARY TSDD
			                                   WHERE TSDD.TYPE = '资产分类类型'
			                                     AND TSDD.CODE = ZA.ASSETS_END_LEVEL) >
			                                 T.LEVEL_NUM THEN
			                             (SELECT TSDD.LEVEL_NUM
			                                FROM T_SYS_DATA_DICTIONARY TSDD
			                               WHERE TSDD.TYPE = '资产分类类型'
			                                 AND TSDD.CODE = ZA.ASSETS_END_LEVEL)
			                            ELSE
			                             T.LEVEL_NUM
			                          END
			                         ELSE
			                          T.LEVEL_NUM
			                       END LEVEL_NUM,
			                       T.LEVEL_NUM OLD_LEVEL_NUM,
			                       ZAIL.ZAIL_PAY_CODE,
			                       ZAIL.ZAIL_LEVEL,
			                       ZA.ASSETS_TYPE,
			                       ZA.ASSETS_LEVEL,
			                       ZAIL.ZAIL_DATE,
			                       ZA.CLASSIFICATION_TYPE,
			                       ZAIL.ZAIL_DAYS
			                  FROM T_SYS_DATA_DICTIONARY     T,
			                       ZCFL_ASSETS_INITIAL_LEVEL ZAIL,
			                       ZCFL_ASSETS               ZA
			                 WHERE T.TYPE = '资产分类类型'
			                   AND ZA.PAY_CODE(+) = ZAIL.ZAIL_PAY_CODE
			                   AND T.CODE(+) = ZAIL.ZAIL_LEVEL
			                   AND TRUNC(ZAIL.ZAIL_DATE) = TRUNC(SYSDATE)) TT) T2,
			       FIL_RENT_PLAN_HEAD_BAS_MAX__V TBPM,--支付表
			       FIL_PROJECT_HEAD PJ,--项目表
			       FIL_CUST_CLIENT CLI,
			       (SELECT ZR.RESULT_STATUS STATUS,
			               ZR.RESULT_PAY_CODE,
			               ZR.JBPM_ID,
			               ZR.TTP_ID,
			               ZR.RESULT_TASK_ID,
			               ZR.RESULT_ID
			          FROM ZCFL_RESULT ZR,
			               (SELECT T.RESULT_PAY_CODE, MAX(T.RESULT_ID) RESULT_ID
			                  FROM ZCFL_RESULT T
			                 GROUP BY T.RESULT_PAY_CODE) ZR1
			         WHERE ZR.RESULT_ID(+) = ZR1.RESULT_ID) ZRESULT
			 WHERE T1.TYPE = '资产分类类型'
			   AND T1.LEVEL_NUM = T2.LEVEL_NUM
			   AND T2.ZAIL_PAY_CODE = TBPM.PAYLIST_CODE--
			   AND TBPM.PROJECT_ID = PJ.ID--
			   AND PJ.CLIENT_ID=CLI.ID
			   AND T2.ZAIL_PAY_CODE = ZRESULT.RESULT_PAY_CODE(+)
					            <if test="RENTER_NAME != null and RENTER_NAME != ''">AND CLI.NAME LIKE '%${RENTER_NAME}%'</if>
						        <if test="ZAIL_PAY_CODE != null and ZAIL_PAY_CODE != ''">AND T2.ZAIL_PAY_CODE LIKE '%${ZAIL_PAY_CODE}%'</if>
						        <if test="ZAIL_LEVEL != null and ZAIL_LEVEL != ''">AND T2.ZAIL_LEVEL LIKE '%${ZAIL_LEVEL}%'</if>
						        <if test="CODE != null and CODE != ''">AND T1.CODE LIKE '%${CODE}%'</if>
						        <if test="ID_CARD_TYPE != null and ID_CARD_TYPE != ''">AND PJ.PLATFORM_TYPE=#{ID_CARD_TYPE} </if>
						        <if test="STATUS != null and STATUS != ''">AND ZRESULT.STATUS=#{STATUS} </if>
						        <if test="CLASSIFICATION_TYPE != null and CLASSIFICATION_TYPE != ''">
						        	<if test="CLASSIFICATION_TYPE == 1 or CLASSIFICATION_TYPE == 2">
						        		AND T2.CLASSIFICATION_TYPE=#{CLASSIFICATION_TYPE} 
						        	</if>
						        	<if test="CLASSIFICATION_TYPE == 3">
						        		AND (T2.CLASSIFICATION_TYPE = 3 OR T2.CLASSIFICATION_TYPE is null )
						        	</if>
					        	</if>
	</select>
	
	
	<select id="assetsList" parameterType="Map" resultType="Map">
		SELECT * FROM (
			SELECT T.*,ROWNUM ROWNO FROM (
						SELECT CLI.NAME RENTER_NAME,--
       T2.ZAIL_PAY_CODE,
       T2.ZAIL_LEVEL,
       (SELECT B.FLAG FROM T_SYS_DATA_DICTIONARY B WHERE B.TYPE='资产分类类型' AND B.CODE=T2.ZAIL_LEVEL) ZAIL_LEVEL1,
       T2.ASSETS_TYPE,
       T2.ASSETS_LEVEL,
       T1.CODE,
       (SELECT B.FLAG FROM T_SYS_DATA_DICTIONARY B WHERE B.TYPE='资产分类类型' AND B.CODE=T1.CODE) CODE1,
       T2.LEVEL_NUM,
       PJ.PLATFORM_TYPE PLATFORM,--
       (SELECT B.FLAG FROM T_SYS_SITE_DICTIONARY B WHERE B.TYPE='业务类型' AND B.CODE=PJ.PLATFORM_TYPE) PLATFORM1,
       T2.ZAIL_DATE,
       T2.CLASSIFICATION_TYPE,
       ZRESULT.STATUS,
       ZRESULT.JBPM_ID,
       ZRESULT.TTP_ID,
       ZRESULT.RESULT_TASK_ID,
       ZRESULT.RESULT_ID,
       T2.ZAIL_DAYS
  FROM T_SYS_DATA_DICTIONARY T1,
       (SELECT CASE
                 WHEN TT.LEVEL_NUM > 12 THEN
                  12
                 WHEN TT.LEVEL_NUM &lt; 1 THEN
                  1
                 ELSE
                  TT.LEVEL_NUM
               END LEVEL_NUM,
               TT.LEVEL_NUM OLD_LEVEL_NUM,
               TT.ZAIL_PAY_CODE,
               TT.ZAIL_LEVEL,
               TT.ASSETS_TYPE,
               TT.ASSETS_LEVEL,
               TT.ZAIL_DATE,
               TT.CLASSIFICATION_TYPE,
               TT.ZAIL_DAYS
          FROM (SELECT CASE
                         WHEN ZA.CLASSIFICATION_TYPE = 2 THEN
                          CASE
                            WHEN ZA.ASSETS_TYPE = '上调' THEN
                             (T.LEVEL_NUM - ZA.ASSETS_LEVEL)
                            WHEN ZA.ASSETS_TYPE = '下调' THEN
                             T.LEVEL_NUM + ZA.ASSETS_LEVEL
                            ELSE
                             T.LEVEL_NUM
                          END
                         WHEN ZA.CLASSIFICATION_TYPE = 1 THEN
                          CASE
                            WHEN (SELECT TSDD.LEVEL_NUM
                                    FROM T_SYS_DATA_DICTIONARY TSDD
                                   WHERE TSDD.TYPE = '资产分类类型'
                                     AND TSDD.CODE = ZA.ASSETS_END_LEVEL) >
                                 T.LEVEL_NUM THEN
                             (SELECT TSDD.LEVEL_NUM
                                FROM T_SYS_DATA_DICTIONARY TSDD
                               WHERE TSDD.TYPE = '资产分类类型'
                                 AND TSDD.CODE = ZA.ASSETS_END_LEVEL)
                            ELSE
                             T.LEVEL_NUM
                          END
                         ELSE
                          T.LEVEL_NUM
                       END LEVEL_NUM,
                       T.LEVEL_NUM OLD_LEVEL_NUM,
                       ZAIL.ZAIL_PAY_CODE,
                       ZAIL.ZAIL_LEVEL,
                       ZA.ASSETS_TYPE,
                       ZA.ASSETS_LEVEL,
                       ZAIL.ZAIL_DATE,
                       ZA.CLASSIFICATION_TYPE,
                       ZAIL.ZAIL_DAYS
                  FROM T_SYS_DATA_DICTIONARY     T,
                       ZCFL_ASSETS_INITIAL_LEVEL ZAIL,
                       ZCFL_ASSETS               ZA
                 WHERE T.TYPE = '资产分类类型'
                   AND ZA.PAY_CODE(+) = ZAIL.ZAIL_PAY_CODE
                   AND T.CODE(+) = ZAIL.ZAIL_LEVEL
                   AND TRUNC(ZAIL.ZAIL_DATE) = TRUNC(SYSDATE)) TT) T2,
       FIL_RENT_PLAN_HEAD_BAS_MAX__V TBPM,--支付表
       FIL_PROJECT_HEAD PJ,--项目表
       FIL_CUST_CLIENT CLI,
       (SELECT ZR.RESULT_STATUS STATUS,
               ZR.RESULT_PAY_CODE,
               ZR.JBPM_ID,
               ZR.TTP_ID,
               ZR.RESULT_TASK_ID,
               ZR.RESULT_ID
          FROM ZCFL_RESULT ZR,
               (SELECT T.RESULT_PAY_CODE, MAX(T.RESULT_ID) RESULT_ID
                  FROM ZCFL_RESULT T
                 GROUP BY T.RESULT_PAY_CODE) ZR1
         WHERE ZR.RESULT_ID(+) = ZR1.RESULT_ID) ZRESULT
 WHERE T1.TYPE = '资产分类类型'
   AND T1.LEVEL_NUM = T2.LEVEL_NUM
   AND T2.ZAIL_PAY_CODE = TBPM.PAYLIST_CODE--
   AND TBPM.PROJECT_ID = PJ.ID--
   AND PJ.CLIENT_ID=CLI.ID
   AND T2.ZAIL_PAY_CODE = ZRESULT.RESULT_PAY_CODE(+)
		            <if test="RENTER_NAME != null and RENTER_NAME != ''">AND CLI.NAME LIKE '%${RENTER_NAME}%'</if>
			        <if test="ZAIL_PAY_CODE != null and ZAIL_PAY_CODE != ''">AND T2.ZAIL_PAY_CODE LIKE '%${ZAIL_PAY_CODE}%'</if>
			        <if test="ZAIL_LEVEL != null and ZAIL_LEVEL != ''">AND T2.ZAIL_LEVEL LIKE '%${ZAIL_LEVEL}%'</if>
			        <if test="CODE != null and CODE != ''">AND T1.CODE LIKE '%${CODE}%'</if>
			        <if test="ID_CARD_TYPE != null and ID_CARD_TYPE != ''">AND PJ.PLATFORM_TYPE=#{ID_CARD_TYPE} </if>
			        <if test="STATUS != null and STATUS != ''">AND ZRESULT.STATUS=#{STATUS} </if>
			        <if test="CLASSIFICATION_TYPE != null and CLASSIFICATION_TYPE != ''">
			        	<if test="CLASSIFICATION_TYPE == 1 or CLASSIFICATION_TYPE == 2">
			        		AND T2.CLASSIFICATION_TYPE=#{CLASSIFICATION_TYPE} 
			        	</if>
			        	<if test="CLASSIFICATION_TYPE == 3">
			        		AND (T2.CLASSIFICATION_TYPE = 3 OR T2.CLASSIFICATION_TYPE is null )
			        	</if>
		        	</if>
					)T
			WHERE ROWNUM &lt;= #{PAGE_END}
		)WHERE ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="payReportList" parameterType="Map" resultType="Map">
						SELECT FC.RENTER_NAME,
                               T2.ZAIL_PAY_CODE,
                               T2.ZAIL_LEVEL,
                               T2.ASSETS_TYPE,
                               T2.ASSETS_LEVEL,
                               T1.CODE,
                               T2.LEVEL_NUM,
                               PJ.PLATFORM,
                               T2.ZAIL_DATE,
                               T2.CLASSIFICATION_TYPE,
                               ZRESULT.STATUS,
                               ZRESULT.JBPM_ID,
                               ZRESULT.TTP_ID,
                               ZRESULT.RESULT_TASK_ID,
                               ZRESULT.RESULT_ID,
                               T2.ZAIL_DAYS
                          FROM T_SYS_DATA_DICTIONARY T1,
                               (SELECT CASE
                                         WHEN TT.LEVEL_NUM > 12 THEN
                                          12
                                         WHEN TT.LEVEL_NUM &lt; 1 THEN
                                          1
                                         ELSE
                                          TT.LEVEL_NUM
                                       END LEVEL_NUM,
                                       TT.LEVEL_NUM OLD_LEVEL_NUM,
                                       TT.ZAIL_PAY_CODE,
                                       TT.ZAIL_LEVEL,
                                       TT.ASSETS_TYPE,
                                       TT.ASSETS_LEVEL,
                                       TT.ZAIL_DATE,
                                       TT.CLASSIFICATION_TYPE,
                                       TT.ZAIL_DAYS
                                  FROM (SELECT CASE
                                                 WHEN ZA.CLASSIFICATION_TYPE = 2 THEN
                                                  CASE
                                                    WHEN ZA.ASSETS_TYPE = '上调' THEN
                                                     (T.LEVEL_NUM - ZA.ASSETS_LEVEL)
                                                    WHEN ZA.ASSETS_TYPE = '下调' THEN
                                                     T.LEVEL_NUM + ZA.ASSETS_LEVEL
                                                    ELSE
                                                     T.LEVEL_NUM
                                                  END
                                                 WHEN ZA.CLASSIFICATION_TYPE = 1 THEN
                                                  CASE
                                                    WHEN (SELECT TSDD.LEVEL_NUM
                                                            FROM T_SYS_DATA_DICTIONARY TSDD
                                                           WHERE TSDD.TYPE = '资产分类类型'
                                                             AND TSDD.CODE = ZA.ASSETS_END_LEVEL) >
                                                         T.LEVEL_NUM THEN
                                                     (SELECT TSDD.LEVEL_NUM
                                                        FROM T_SYS_DATA_DICTIONARY TSDD
                                                       WHERE TSDD.TYPE = '资产分类类型'
                                                         AND TSDD.CODE = ZA.ASSETS_END_LEVEL)
                                                    ELSE
                                                     T.LEVEL_NUM
                                                  END
                                                 ELSE
                                                  T.LEVEL_NUM
                                               END LEVEL_NUM,
                                               T.LEVEL_NUM OLD_LEVEL_NUM,
                                               ZAIL.ZAIL_PAY_CODE,
                                               ZAIL.ZAIL_LEVEL,
                                               ZA.ASSETS_TYPE,
                                               ZA.ASSETS_LEVEL,
                                               ZAIL.ZAIL_DATE,
                                               ZA.CLASSIFICATION_TYPE,
                                               ZAIL.ZAIL_DAYS
                                          FROM T_SYS_DATA_DICTIONARY     T,
                                               ZCFL_ASSETS_INITIAL_LEVEL ZAIL,
                                               ZCFL_ASSETS               ZA
                                         WHERE T.TYPE = '资产分类类型'
                                           AND ZA.PAY_CODE(+) = ZAIL.ZAIL_PAY_CODE
                                           AND T.CODE(+) = ZAIL.ZAIL_LEVEL
                                           AND TRUNC(ZAIL.ZAIL_DATE) = TRUNC(SYSDATE)) TT) T2,
                               T_BASE_PAYPLAN_MAX_V TBPM,
                               FIL_CONTRACT FC,
                               T_PROJECT_HEAD PJ,
                               (SELECT ZR.RESULT_STATUS STATUS, ZR.RESULT_PAY_CODE, ZR.JBPM_ID, ZR.TTP_ID, ZR.RESULT_TASK_ID, ZR.RESULT_ID
                                  FROM ZCFL_RESULT ZR,
                                       (SELECT T.RESULT_PAY_CODE, MAX(T.RESULT_ID) RESULT_ID
                                          FROM ZCFL_RESULT T
                                         GROUP BY T.RESULT_PAY_CODE) ZR1
                                 WHERE ZR.RESULT_ID(+) = ZR1.RESULT_ID) ZRESULT
                         WHERE T1.TYPE = '资产分类类型'
                           AND T1.LEVEL_NUM = T2.LEVEL_NUM
                           AND T2.ZAIL_PAY_CODE = TBPM.PAYLIST_CODE
                           AND TBPM.CONTRACT_ID = FC.ID
                           AND FC.PROJECT_ID = PJ.ID
                           AND T2.ZAIL_PAY_CODE = ZRESULT.RESULT_PAY_CODE(+)
		            <if test="RENTER_NAME != null and RENTER_NAME != ''">AND FC.RENTER_NAME LIKE '%${RENTER_NAME}%'</if>
			        <if test="ZAIL_PAY_CODE != null and ZAIL_PAY_CODE != ''">AND T2.ZAIL_PAY_CODE LIKE '%${ZAIL_PAY_CODE}%'</if>
			        <if test="ZAIL_LEVEL != null and ZAIL_LEVEL != ''">AND T2.ZAIL_LEVEL LIKE '%${ZAIL_LEVEL}%'</if>
			        <if test="CODE != null and CODE != ''">AND T1.CODE LIKE '%${CODE}%'</if>
			        <if test="ID_CARD_TYPE != null and ID_CARD_TYPE != ''">AND PJ.PLATFORM=#{ID_CARD_TYPE} </if>
			        <if test="STATUS != null and STATUS != ''">AND ZRESULT.STATUS=#{STATUS} </if>
			        <if test="CLASSIFICATION_TYPE != null and CLASSIFICATION_TYPE != ''">
			        	<if test="CLASSIFICATION_TYPE == 1 or CLASSIFICATION_TYPE == 2">
			        		AND T2.CLASSIFICATION_TYPE=#{CLASSIFICATION_TYPE} 
			        	</if>
			        	<if test="CLASSIFICATION_TYPE == 3">
			        		AND (T2.CLASSIFICATION_TYPE = 3 OR T2.CLASSIFICATION_TYPE is null )
			        	</if>
		        	</if>
	</select>
	
	<select id="getTypeTp" resultType="map">
		SELECT DISTINCT ZTP.ID, ZTP.NAME
		  FROM ZCFL_TYPE_TP ZTP, ZCFL_TYPE_CLASSIFY ZTC
		 WHERE ZTP.ID = ZTC.TTP_ID
	</select>
	
	<update id="update" parameterType="map">
		UPDATE ZCFL_RESULT set RESULT_ID = #{RESULT_ID}
		<if test="TTP_ID != null">,TTP_ID = #{TTP_ID}</if>
		<if test="RESULT_CHANGE_TYPE != null">,RESULT_CHANGE_TYPE = #{RESULT_CHANGE_TYPE}</if>
		<if test="RESULT_CHANGE_LEVEL != null">,RESULT_CHANGE_LEVEL = #{RESULT_CHANGE_LEVEL}</if>
		<if test="RESULT_NOTE != null">,RESULT_NOTE = #{RESULT_NOTE}</if>
		<if test="RESULT_STATUS != null">,RESULT_STATUS = #{RESULT_STATUS}</if>
		,RESULT_DATE = SYSDATE
		 WHERE RESULT_ID = #{RESULT_ID}
	</update>
	
	<select id="getCtpId" parameterType="map" resultType="String">
	SELECT ZTC.CTP_ID
	  FROM ZCFL_TYPE_CLASSIFY ZTC,
	       (SELECT TTP_ID, MIN(ZTC.SERIATION) SERIATION
	          FROM ZCFL_TYPE_CLASSIFY ZTC
	         WHERE ZTC.TTP_ID = #{TTP_ID}
	         GROUP BY ZTC.TTP_ID) T
	 WHERE ZTC.TTP_ID = T.TTP_ID
	       AND ZTC.SERIATION = T.SERIATION
	</select>
	
	<select id="selectDetails" parameterType="map" resultType="Map">
		SELECT
			  ASSETS_ID, 
			  PLAN_ID, 
			  EQUIPMENT_ID, 
			  PAY_CODE, 
			  CLIENT_CODE, 
			  CLIENT_NAME, 
			  CONTRACT_CODE, 
			  TTP_ID, 
			  ASSETS_RESULT, 
			  STATUS, 
			  JBPM_ID
		FROM ZCFL_ASSETS
		WHERE ASSETS_ID=#{ASSETS_ID}
	</select>
	
	<select id="selectEquipment" parameterType="map" resultType="Map">
		
		SELECT 
				ID, 
				THING_NAME, 
				BRAND, 
				MODEL_SPEC, 
				UNIT_PRICE, 
				TOTAL, 
				MEMO, 
				CONTRACT_ID, 
				BUY_ID, 
				PAY_ID, 
				LICENSE_ADDRESS, 
				THING_CODE, 
				STAYBUY_PRICE, 
				TYPE, 
				BUSINESS_HEAD_ID, 
				AMOUNT, 
				ENGINE_NO, 
				CREDIT_HEAD_ID, 
				TAX, 
				CESSE, 
				UNIT, 
				TRANSPORTATION, 
				INVOICE_AMOUNT, 
				INVOICE_APPLICATION_ID, 
				EQUIPMENT_INVOICE_ID, 
				LEASE_CODE, 
				VEHICLE_INVOICES_ID, 
				LETTER_OF_ADVICE_ID, 
				INSURE_CONSENT_ID, 
				CEID, 
				ENGINE_CODE, 
				CAR_TECOGNITION_FRAME_CODE, 
				BUSINESS_DIVISION, 
				SECONDHAND_EQUIPMENT, 
				STATUS, 
				BUY_STATUS, 
				BILL_STATUS, 
				INSURANCE_STATUS, 
				GOOD_CONTRACT_ID, 
				INSURANCE_LIST_ID, 
				GPS_NUMBER, 
				GPS_PWD, 
				FIL_INSURE_SPECIAL_INVOICE_ID, 
				INVOICE_PRICE, 
				REGISTRATION_CODE, 
				ENGINE_CODE_BAK, 
				LICENSE_NO, 
				INSURE_STATUS, 
				CERTIFICATE_HNT_ID, 
				CERTIFICATE_NON_ID, 
				CERTIFICATE_ENGINE_ID, 
				CERTIFICATE_ID, 
				INVALID_FLAG, 
				INVOICE_FLAG, 
				INSURANCE_FLAG, 
				CERTIFICATE, 
				PLATFORM, 
				SHIP_ID, 
				MORTGAGE_TIME, 
				REGISTRATION_TIME, 
				SUPPLIERS_NAME, 
				SUPPLIERS_ID, 
				COMPANY_NAME, 
				COMPANY_ID, 
				PURCHASE_COST, 
				MANUFACTURER, 
				TECHNICAL_PARAM, 
				HANDOVER_ID, 
				IFHANDOVER, 
				SEND_STATE, 
				IFCANSEND, 
				PROMISECASH_SUM, 
				PROMISECASH_HAVE, 
				PROMISECASH_DEFF, 
				SENDNOTICE_ID, 
				MORTGAGE_STATUS, 
				EQUIPMENT_ADDRESS, 
				PARENT_MAIN, 
				PARENT_ID, 
				EQUIPMENT_CONNECTION, 
				GPS_STATE, 
				INSURANCE_PRELIST_ID, 
				PRODUCT_TYPEID, 
				BB_STATUS
		FROM FIL_EQUIPMENT
		WHERE ID=#{EQUIPMENT_ID}
	</select>
	
	<select id="selectLevelGroup" parameterType="map" resultType="Map">
		   select count(*) COUNT,ASSET_LEVEL from (
             select 
             (case when t.ASSET_LEVEL is null then #{tags}
             when t.ASSET_LEVEL='' then #{tags}
             else t.ASSET_LEVEL end) ASSET_LEVEL
              from FIL_EQUIPMENT t 
              left join T_BASE_PAYPLAN_MAX_V tbp on t.pay_id=tbp.id
              where t.INVALID_FLAG=1 and tbp.start_date is not null
             ) group by ASSET_LEVEL
	</select>
	
	<select id="getLevelList" parameterType="map" resultType="Map">
	SELECT * FROM (
			SELECT T.*,ROWNUM ROWNO FROM (
		  select (case when t.ASSET_LEVEL is null then #{tags}
             when t.ASSET_LEVEL='' then #{tags}
             else t.ASSET_LEVEL end) ASSET_LEVEL,tbp.paylist_code,t.THING_NAME,t.MODEL_SPEC,fc.CERTIFICATE_NO
              from FIL_EQUIPMENT t
              left join T_BASE_PAYPLAN_MAX_V tbp on t.pay_id=tbp.id
              left join FIL_CERTIFICATE fc on fc.ID=t.CERTIFICATE_ID
              where t.INVALID_FLAG=1 and tbp.start_date is not null
              order by ASSET_LEVEL
           )T
			WHERE ROWNUM &lt;= #{PAGE_END}
		)WHERE ROWNO >= #{PAGE_BEGIN}
	</select>
	
		<select id="getLevelListCount" parameterType="map" resultType="int">
	
			SELECT count(*) FROM (
		  select (case when t.ASSET_LEVEL is null then #{tags}
             when t.ASSET_LEVEL='' then #{tags}
             else t.ASSET_LEVEL end) ASSET_LEVEL,tbp.paylist_code,t.THING_NAME,t.MODEL_SPEC,fc.CERTIFICATE_NO
              from FIL_EQUIPMENT t
              left join T_BASE_PAYPLAN_MAX_V tbp on t.pay_id=tbp.id
              left join FIL_CERTIFICATE fc on fc.ID=t.CERTIFICATE_ID
              where t.INVALID_FLAG=1 and tbp.start_date is not null
              order by ASSET_LEVEL
           )T
			
	</select>
	
	<select id="selectInsureGroup" parameterType="map" resultType="Map">
	  SELECT count(FE.ID) COUNTS,#{tags2} flag
			  FROM T_INSU_INSULIST2EMPT    EMPT,
			       FIL_EQUIPMENT           FE,
			       FIL_CONTRACT            RENT,
			       T_EQUIPMENT_INFORMATION TI,
             T_BASE_PAYPLAN_MAX_V tbp,
             FIL_CERTIFICATE fc
			 WHERE EMPT.EQMT_ID = FE.ID(+)
			   AND FE.CONTRACT_ID = RENT.ID(+)
			   AND FE.ID = TI.id(+)
			   AND EMPT.STATUS = 0
			   AND EMPT.TYPE = 2
         and tbp.id=FE.pay_id 
         and FE.CERTIFICATE_ID=fc.ID(+)
         AND EMPT.INSU_ID in (
               SELECT T1.INCU_ID
			  FROM T_INSU_INSURANCELIST T1
			  LEFT JOIN T_SYS_INSURE T2 ON T1.INCP_ID = T2.INCP_ID
			  LEFT JOIN (SELECT I1.INCU_ID, MAX(C.RENTER_NAME) CUST_NAME
                     FROM T_INSU_INSURANCELIST i1,FIL_EQUIPMENT e,T_INSU_INSULIST2EMPT i2,FIL_CONTRACT c
					WHERE I1.INCU_ID(+)=I2.INSU_ID AND E.ID(+)=I2.EQMT_ID AND C.ID=E.CONTRACT_ID
                    AND I1.STATUS != 1
			              GROUP BY I1.INCU_ID) TT ON TT.INCU_ID = T1.INCU_ID
			  LEFT JOIN T_INSU_SURRENDER T5 ON T1.INCU_ID=T5.INCU_ID
			  left join (select tii.insu_id,wmsys.wm_concat(distinct tbp.PAYLIST_CODE) paylist_code from T_INSU_INSULIST2EMPT tii,fil_equipment fe ,t_base_payplan_max_v tbp where  tii.eqmt_id=fe.id and fe.pay_id=tbp.id group by tii.insu_id)ttt on ttt.insu_id=t1.incu_id              
			 WHERE T1.STATUS =0
         )
union all
SELECT   count(T.ID) COUNTS,#{tags1} flag
		  FROM FIL_EQUIPMENT T, FIL_CONTRACT RENT, T_EQUIPMENT_INFORMATION TI
		 WHERE T.INVALID_FLAG = 1 AND T.CONTRACT_ID = RENT.ID   AND T.ID = TI.ID  AND (T.INSURANCE_STATUS != '1' OR T.INSURANCE_STATUS IS NULL)
		   AND T.pay_id in (
SELECT PAY.ID PAY_ID FROM (SELECT DISTINCT FES.PAY_CODE
											                  FROM FIL_EQUIPMENT_SENDNOTICE FES, FIL_EQUIMENT_RECEIPT FER
											                 WHERE FES.ID = FER.SENDNOTICE_ID(+)
											                   AND FES.STATUS != 2
											                   AND FER.STATUS = 0
											                   AND FER.SEND_DATE IS NOT NULL) SEND,
											               T_BASE_PAYPLAN_MAX_V PAY
											         WHERE SEND.PAY_CODE = PAY.PAYLIST_CODE(+)
											           AND PAY.ID IN (SELECT DISTINCT T.PAY_ID
											                            FROM FIL_EQUIPMENT T
											                           WHERE T.INVALID_FLAG = 1
											                             AND (T.INSURANCE_STATUS != '1' OR
											                                 T.INSURANCE_STATUS IS NULL)
											                             AND T.CONTRACT_ID IS NOT NULL)
                                                   )
	</select>
	
	<select id="getInsureList"  parameterType="map" resultType="Map">
	SELECT * FROM (
			SELECT T.*,ROWNUM ROWNO FROM (
			SELECT tbp.paylist_code,FE.THING_NAME,FE.MODEL_SPEC,fc.CERTIFICATE_NO,#{tags2} flag
			  FROM T_INSU_INSULIST2EMPT    EMPT,
			       FIL_EQUIPMENT           FE,
			       FIL_CONTRACT            RENT,
			       T_EQUIPMENT_INFORMATION TI,
             T_BASE_PAYPLAN_MAX_V tbp,
             FIL_CERTIFICATE fc
			 WHERE EMPT.EQMT_ID = FE.ID(+)
			   AND FE.CONTRACT_ID = RENT.ID(+)
			   AND FE.ID = TI.id(+)
			   AND EMPT.STATUS = 0
			   AND EMPT.TYPE = 2
         and tbp.id=FE.pay_id 
         and FE.CERTIFICATE_ID=fc.ID(+)
         AND EMPT.INSU_ID in (
               SELECT T1.INCU_ID
			  FROM T_INSU_INSURANCELIST T1
			  LEFT JOIN T_SYS_INSURE T2 ON T1.INCP_ID = T2.INCP_ID
			  LEFT JOIN (SELECT I1.INCU_ID, MAX(C.RENTER_NAME) CUST_NAME
                     FROM T_INSU_INSURANCELIST i1,FIL_EQUIPMENT e,T_INSU_INSULIST2EMPT i2,FIL_CONTRACT c
					WHERE I1.INCU_ID(+)=I2.INSU_ID AND E.ID(+)=I2.EQMT_ID AND C.ID=E.CONTRACT_ID
                    AND I1.STATUS != 1
			              GROUP BY I1.INCU_ID) TT ON TT.INCU_ID = T1.INCU_ID
			  LEFT JOIN T_INSU_SURRENDER T5 ON T1.INCU_ID=T5.INCU_ID
			  left join (select tii.insu_id,wmsys.wm_concat(distinct tbp.PAYLIST_CODE) paylist_code from T_INSU_INSULIST2EMPT tii,fil_equipment fe ,t_base_payplan_max_v tbp where  tii.eqmt_id=fe.id and fe.pay_id=tbp.id group by tii.insu_id)ttt on ttt.insu_id=t1.incu_id              
			 WHERE T1.STATUS =0
         )
union all
SELECT tbp.paylist_code,
		       T.THING_NAME thing_name,
		       T.MODEL_SPEC,
           fc.CERTIFICATE_NO,#{tags1} flag
		  FROM FIL_EQUIPMENT T, FIL_CONTRACT RENT, T_EQUIPMENT_INFORMATION TI,T_BASE_PAYPLAN_MAX_V tbp,FIL_CERTIFICATE fc
		 WHERE T.INVALID_FLAG = 1
		   AND T.CONTRACT_ID = RENT.ID
		   AND T.ID = TI.ID
		   AND (T.INSURANCE_STATUS != '1' OR T.INSURANCE_STATUS IS NULL)
		   AND T.pay_id in (
SELECT PAY.ID PAY_ID FROM (SELECT DISTINCT FES.PAY_CODE
											                  FROM FIL_EQUIPMENT_SENDNOTICE FES, FIL_EQUIMENT_RECEIPT FER
											                 WHERE FES.ID = FER.SENDNOTICE_ID(+)
											                   AND FES.STATUS != 2
											                   AND FER.STATUS = 0
											                   AND FER.SEND_DATE IS NOT NULL) SEND,
											               T_BASE_PAYPLAN_MAX_V PAY
											         WHERE SEND.PAY_CODE = PAY.PAYLIST_CODE(+)
											           AND PAY.ID IN (SELECT DISTINCT T.PAY_ID
											                            FROM FIL_EQUIPMENT T
											                           WHERE T.INVALID_FLAG = 1
											                             AND (T.INSURANCE_STATUS != '1' OR
											                                 T.INSURANCE_STATUS IS NULL)
											                             AND T.CONTRACT_ID IS NOT NULL)
                                                   )
      and tbp.id=T.pay_id and T.CERTIFICATE_ID=fc.ID(+)

		)T
			WHERE ROWNUM &lt;= #{PAGE_END}
		)WHERE ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="getInsureListCount"  parameterType="map" resultType="int">
	SELECT count(*) FROM (
       SELECT tbp.paylist_code,
			       FE.THING_NAME,
			       FE.MODEL_SPEC,
			       fc.CERTIFICATE_NO,#{tags2} flag
			  FROM T_INSU_INSULIST2EMPT    EMPT,
			       FIL_EQUIPMENT           FE,
			       FIL_CONTRACT            RENT,
			       T_EQUIPMENT_INFORMATION TI,
             T_BASE_PAYPLAN_MAX_V tbp,
             FIL_CERTIFICATE fc
			 WHERE EMPT.EQMT_ID = FE.ID(+)
			   AND FE.CONTRACT_ID = RENT.ID(+)
			   AND FE.ID = TI.id(+)
			   AND EMPT.STATUS = 0
			   AND EMPT.TYPE = 2
         and tbp.id=FE.pay_id 
         and FE.CERTIFICATE_ID=fc.ID(+)
         AND EMPT.INSU_ID in (
               SELECT T1.INCU_ID
			  FROM T_INSU_INSURANCELIST T1
			  LEFT JOIN T_SYS_INSURE T2 ON T1.INCP_ID = T2.INCP_ID
			  LEFT JOIN (SELECT I1.INCU_ID, MAX(C.RENTER_NAME) CUST_NAME
                     FROM T_INSU_INSURANCELIST i1,FIL_EQUIPMENT e,T_INSU_INSULIST2EMPT i2,FIL_CONTRACT c
					WHERE I1.INCU_ID(+)=I2.INSU_ID AND E.ID(+)=I2.EQMT_ID AND C.ID=E.CONTRACT_ID
                    AND I1.STATUS != 1
			              GROUP BY I1.INCU_ID) TT ON TT.INCU_ID = T1.INCU_ID
			  LEFT JOIN T_INSU_SURRENDER T5 ON T1.INCU_ID=T5.INCU_ID
			  left join (select tii.insu_id,wmsys.wm_concat(distinct tbp.PAYLIST_CODE) paylist_code from T_INSU_INSULIST2EMPT tii,fil_equipment fe ,t_base_payplan_max_v tbp where  tii.eqmt_id=fe.id and fe.pay_id=tbp.id group by tii.insu_id)ttt on ttt.insu_id=t1.incu_id              
			 WHERE T1.STATUS =0
         )	
union all
SELECT tbp.paylist_code,
		       T.THING_NAME thing_name,
		       T.MODEL_SPEC,
           fc.CERTIFICATE_NO,#{tags1} flag
		  FROM FIL_EQUIPMENT T, FIL_CONTRACT RENT, T_EQUIPMENT_INFORMATION TI,T_BASE_PAYPLAN_MAX_V tbp,FIL_CERTIFICATE fc
		 WHERE T.INVALID_FLAG = 1
		   AND T.CONTRACT_ID = RENT.ID
		   AND T.ID = TI.ID
		   AND (T.INSURANCE_STATUS != '1' OR T.INSURANCE_STATUS IS NULL)
		   AND T.pay_id in (
SELECT PAY.ID PAY_ID FROM (SELECT DISTINCT FES.PAY_CODE
											                  FROM FIL_EQUIPMENT_SENDNOTICE FES, FIL_EQUIMENT_RECEIPT FER
											                 WHERE FES.ID = FER.SENDNOTICE_ID(+)
											                   AND FES.STATUS != 2
											                   AND FER.STATUS = 0
											                   AND FER.SEND_DATE IS NOT NULL) SEND,
											               T_BASE_PAYPLAN_MAX_V PAY
											         WHERE SEND.PAY_CODE = PAY.PAYLIST_CODE(+)
											           AND PAY.ID IN (SELECT DISTINCT T.PAY_ID
											                            FROM FIL_EQUIPMENT T
											                           WHERE T.INVALID_FLAG = 1
											                             AND (T.INSURANCE_STATUS != '1' OR
											                                 T.INSURANCE_STATUS IS NULL)
											                             AND T.CONTRACT_ID IS NOT NULL)
                                                   )
      and tbp.id=T.pay_id and T.CERTIFICATE_ID=fc.ID(+)
		)T
			
	</select>
	
	<select id="selectInsurePrice" parameterType="map" resultType="Map">
		  select to_char(sum(t.INSU_PRICE),'999,999,999,999,999,999.00') PRICE
  from t_insu_insurancelist t
 where t.status = 0 
	</select>
	
	<select id="selectTask" parameterType="String" resultType="Map">
		     SELECT ID, 
					RESULT_ID, 
					ZCT_ASSETS_TYPE, 
					STATUS, 
					CTP_ID, 
					MEMO, 
					ZCT_ASSETS_LEVEL, 
					ZCT_PAY_CODE
			  FROM ZCFL_CLASSIFY_TASK
			 WHERE ID = #{RESULT_TASK_ID}
	</select>
	
	<insert id="addAssetsSuccess" parameterType="java.util.Map">
		INSERT INTO ZCFL_ASSETS (
		   ASSETS_ID
	       <if test="RESULT_PAY_CODE != null and RESULT_PAY_CODE != ''">,PAY_CODE</if>
	       <if test="RESULT_CHANGE_TYPE != null and RESULT_CHANGE_TYPE != ''">,ASSETS_TYPE</if>
	       <if test="RESULT_CHANGE_LEVEL != null and RESULT_CHANGE_LEVEL != ''">,ASSETS_LEVEL</if>
	       <if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,ASSETS_END_LEVEL</if>
	       <if test="RESULT_CLASSIFICATION_TYPE != null and RESULT_CLASSIFICATION_TYPE != ''">,CLASSIFICATION_TYPE</if>
	       ,ASSETS_DATE
		)
		VALUES(
  			SEQ_ZCFL_ASSETS.NEXTVAL
  			<if test="RESULT_PAY_CODE != null and RESULT_PAY_CODE != ''">,#{RESULT_PAY_CODE}</if>
  			<if test="RESULT_CHANGE_TYPE != null and RESULT_CHANGE_TYPE != ''">,#{RESULT_CHANGE_TYPE}</if>
  			<if test="RESULT_CHANGE_LEVEL != null and RESULT_CHANGE_LEVEL != ''">,#{RESULT_CHANGE_LEVEL}</if>
  			<if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,#{RESULT_END_LEVEL}</if>
  			<if test="RESULT_CLASSIFICATION_TYPE != null and RESULT_CLASSIFICATION_TYPE != ''">,#{RESULT_CLASSIFICATION_TYPE}</if>
  			,SYSDATE
		)
	</insert>
	
	<select id="selectZcflAssetsSuccess" parameterType="Map" resultType="Map">
		    SELECT PAY_CODE
			  FROM ZCFL_ASSETS
			 WHERE PAY_CODE = #{RESULT_PAY_CODE}
	</select>
	
	<select id="selectDirectAdditional" parameterType="Map" resultType="Map">
			SELECT FC.RENTER_NAME,
			       T2.ZAIL_PAY_CODE,
			       T1.CODE,
			       T2.LEVEL_NUM,
			       ZRESULT.RESULT_ID
			  FROM T_SYS_DATA_DICTIONARY T1,
			       (SELECT CASE
			                 WHEN TT.LEVEL_NUM > 12 THEN
			                  12
			                 WHEN TT.LEVEL_NUM &lt; 1 THEN
			                  1
			                 ELSE
			                  TT.LEVEL_NUM
			               END LEVEL_NUM,
			               TT.LEVEL_NUM OLD_LEVEL_NUM,
			               TT.ZAIL_PAY_CODE,
			               TT.ZAIL_LEVEL,
			               TT.ASSETS_TYPE,
			               TT.ASSETS_LEVEL,
			               TT.ZAIL_DATE,
			               TT.CLASSIFICATION_TYPE
			          FROM (SELECT CASE
			                         WHEN ZA.CLASSIFICATION_TYPE = 2 THEN
			                          CASE
			                            WHEN ZA.ASSETS_TYPE = '上调' THEN
			                             (T.LEVEL_NUM - ZA.ASSETS_LEVEL)
			                            WHEN ZA.ASSETS_TYPE = '下调' THEN
			                             T.LEVEL_NUM + ZA.ASSETS_LEVEL
			                            ELSE
			                             T.LEVEL_NUM
			                          END
			                         WHEN ZA.CLASSIFICATION_TYPE = 1 THEN
			                          CASE
			                            WHEN (SELECT TSDD.LEVEL_NUM
			                                    FROM T_SYS_DATA_DICTIONARY TSDD
			                                   WHERE TSDD.TYPE = '资产分类类型'
			                                     AND TSDD.CODE = ZA.ASSETS_END_LEVEL) >
			                                 T.LEVEL_NUM THEN
			                             (SELECT TSDD.LEVEL_NUM
			                                FROM T_SYS_DATA_DICTIONARY TSDD
			                               WHERE TSDD.TYPE = '资产分类类型'
			                                 AND TSDD.CODE = ZA.ASSETS_END_LEVEL)
			                            ELSE
			                             T.LEVEL_NUM
			                          END
			                         ELSE
			                          T.LEVEL_NUM
			                       END LEVEL_NUM,
			                       T.LEVEL_NUM OLD_LEVEL_NUM,
			                       ZAIL.ZAIL_PAY_CODE,
			                       ZAIL.ZAIL_LEVEL,
			                       ZA.ASSETS_TYPE,
			                       ZA.ASSETS_LEVEL,
			                       ZAIL.ZAIL_DATE,
			                       ZA.CLASSIFICATION_TYPE
			                  FROM T_SYS_DATA_DICTIONARY     T,
			                       ZCFL_ASSETS_INITIAL_LEVEL ZAIL,
			                       ZCFL_ASSETS               ZA
			                 WHERE T.TYPE = '资产分类类型'
			                   AND ZA.PAY_CODE(+) = ZAIL.ZAIL_PAY_CODE
			                   AND T.CODE(+) = ZAIL.ZAIL_LEVEL
			                   AND TRUNC(ZAIL.ZAIL_DATE) = TRUNC(SYSDATE)) TT) T2,
			       T_BASE_PAYPLAN_MAX_V TBPM,
			       FIL_CONTRACT FC,
			       T_PROJECT_HEAD PJ,
			       (SELECT ZR.RESULT_STATUS STATUS,
			               ZR.RESULT_PAY_CODE,
			               ZR.JBPM_ID,
			               ZR.RESULT_END_LEVEL,
			               ZR.RESULT_NOTE,
			               ZR.RESULT_ID
			          FROM ZCFL_RESULT ZR,
			               (SELECT T.RESULT_PAY_CODE, MAX(T.RESULT_ID) RESULT_ID
			                  FROM ZCFL_RESULT T
			                 GROUP BY T.RESULT_PAY_CODE) ZR1
			         WHERE ZR.RESULT_ID(+) = ZR1.RESULT_ID) ZRESULT
			 WHERE T1.TYPE = '资产分类类型'
			   AND T1.LEVEL_NUM = T2.LEVEL_NUM
			   AND T2.ZAIL_PAY_CODE = TBPM.PAYLIST_CODE
			   AND TBPM.CONTRACT_ID = FC.ID
			   AND FC.PROJECT_ID = PJ.ID
			   AND T2.ZAIL_PAY_CODE = ZRESULT.RESULT_PAY_CODE
			   AND ZRESULT.RESULT_ID = #{RESULT_ID}
	</select>
	<select id="yearlevel" parameterType="Map" resultType="Map">
		SELECT ZAIL_LEVEL
  			FROM ZCFL_ASSETS_INITIAL_LEVEL
 			WHERE to_char(ZAIL_DATE, 'yyyy-mm-dd') =
       			(SELECT to_char(MIN(RESULT_DATE), 'yyyy-mm-dd') aa
          			FROM ZCFL_RESULT
         			WHERE RESULT_PAY_CODE = #{ZAIL_PAY_CODE}
           			AND to_char(RESULT_DATE, 'yyyy') = #{yearage})
   				and ZAIL_PAY_CODE = #{ZAIL_PAY_CODE}
	</select>
	<insert id="addZcflResult" parameterType="java.util.Map">
		INSERT INTO ZCFL_RESULT (
			RESULT_ID
			<if test="RESULT_PAY_CODE != null and RESULT_PAY_CODE != ''">,RESULT_PAY_CODE</if>
			<if test="TTP_ID != null and TTP_ID != ''">,TTP_ID</if>
			<if test="RESULT_NOTE != null and RESULT_NOTE != ''">,RESULT_NOTE</if>
			<if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,RESULT_END_LEVEL</if>
			<if test="RESULT_BEGIN_LEVEL != null and RESULT_BEGIN_LEVEL != ''">,RESULT_BEGIN_LEVEL</if>
			,RESULT_CLASSIFICATION_TYPE
			,RESULT_STATUS
			,RESULT_DATE
		)
		VALUES(
  			#{RESULT_ID}
  			<if test="RESULT_PAY_CODE != null and RESULT_PAY_CODE != ''">,#{RESULT_PAY_CODE}</if>
  			<if test="TTP_ID != null and TTP_ID != ''">,#{TTP_ID}</if>
  			<if test="RESULT_NOTE != null and RESULT_NOTE != ''">,#{RESULT_NOTE}</if>
  			<if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,#{RESULT_END_LEVEL}</if>
  			<if test="RESULT_BEGIN_LEVEL != null and RESULT_BEGIN_LEVEL != ''">,#{RESULT_BEGIN_LEVEL}</if>
  			,1
  			,1
  			,SYSDATE
		)
	</insert>
	
	<insert id="addZcflResultDirectly" parameterType="java.util.Map">
		INSERT INTO ZCFL_RESULT_DIRECTLY (
			ZRD_ID
			<if test="RESULT_ID != null and RESULT_ID != ''">,ZRD_RESULT_ID</if>
			<if test="ZRD_TYPE != null and ZRD_TYPE != ''">,ZRD_TYPE</if>
			<if test="ZRD_LEVEL != null and ZRD_LEVEL != ''">,ZRD_LEVEL</if>
			<if test="ZRD_NOTE != null and ZRD_NOTE != ''">,ZRD_NOTE</if>
			<if test="ZRD_SORTING != null and ZRD_SORTING != ''">,ZRD_SORTING</if>
			,ZRD_DATE
		)
		VALUES(
  			SEQ_ZCFL_RESULT_DIRECTLY.NEXTVAL
  			<if test="RESULT_ID != null and RESULT_ID != ''">,#{RESULT_ID}</if>
  			<if test="ZRD_TYPE != null and ZRD_TYPE != ''">,#{ZRD_TYPE}</if>
  			<if test="ZRD_LEVEL != null and ZRD_LEVEL != ''">,#{ZRD_LEVEL}</if>
  			<if test="ZRD_NOTE != null and ZRD_NOTE != ''">,#{ZRD_NOTE}</if>
  			<if test="ZRD_SORTING != null and ZRD_SORTING != ''">,#{ZRD_SORTING}</if>
  			,SYSDATE
		)
	</insert>
	
	<insert id="addZcflResultF" parameterType="java.util.Map">
		INSERT INTO ZCFL_RESULT (
			RESULT_ID
			<if test="RESULT_PAY_CODE != null and RESULT_PAY_CODE != ''">,RESULT_PAY_CODE</if>
			<if test="RESULT_NOTE != null and RESULT_NOTE != ''">,RESULT_NOTE</if>
			,RESULT_CLASSIFICATION_TYPE
			<if test="ZAIL_LEVEL != null and ZAIL_LEVEL != ''">,RESULT_BEGIN_LEVEL</if>
			<if test="RESULT_BEGIN_LEVEL != null and RESULT_BEGIN_LEVEL != ''">,RESULT_BEGIN_LEVEL</if>
			<if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,RESULT_END_LEVEL</if>
			<if test="TTP_ID != null and TTP_ID != ''">,TTP_ID</if>
			<if test="RESULT_NOW_LEVEL != null and RESULT_NOW_LEVEL != ''">,RESULT_NOW_LEVEL</if>
			,RESULT_STATUS
			,RESULT_DATE
		)
		VALUES(
  			#{RESULT_ID}
  			<if test="RESULT_PAY_CODE != null and RESULT_PAY_CODE != ''">,#{RESULT_PAY_CODE}</if>
  			<if test="RESULT_NOTE != null and RESULT_NOTE != ''">,#{RESULT_NOTE}</if>
  			,2
  			<if test="ZAIL_LEVEL != null and ZAIL_LEVEL != ''">,#{ZAIL_LEVEL}</if>
  			<if test="RESULT_BEGIN_LEVEL != null and RESULT_BEGIN_LEVEL != ''">,#{RESULT_BEGIN_LEVEL}</if>
  			<if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,#{RESULT_END_LEVEL}</if>
  			<if test="TTP_ID != null and TTP_ID != ''">,#{TTP_ID}</if>
  			<if test="RESULT_NOW_LEVEL != null and RESULT_NOW_LEVEL != ''">,#{RESULT_NOW_LEVEL}</if>
  			,6
  			,SYSDATE
		)
	</insert>
	
	<update id="updateResultSuccess" parameterType="String">
		UPDATE ZCFL_RESULT 
		   set RESULT_STATUS = 3,
		   	   RESULT_DATE = SYSDATE
		 WHERE RESULT_ID = #{RESULT_ID}
	</update>
	
	<update id="updateResultFailure" parameterType="String">
		UPDATE ZCFL_RESULT 
		   set RESULT_STATUS = 4,
		   	   RESULT_DATE = SYSDATE
		 WHERE RESULT_ID = #{RESULT_ID}
	</update>
	
	<update id="updateJbpmId" parameterType="Map">
		UPDATE ZCFL_RESULT 
		   set JBPM_ID = #{JBPM_ID},
		       RESULT_DATE = SYSDATE
		 WHERE RESULT_ID = #{RESULT_ID}
	</update>
	
	<update id="updateAssetsSuccess" parameterType="Map">
		UPDATE ZCFL_ASSETS 
		   set CLASSIFICATION_TYPE = 1 
		   <if test="RESULT_END_LEVEL != null and RESULT_END_LEVEL != ''">,ASSETS_END_LEVEL = #{RESULT_END_LEVEL}</if>
		   <if test="CLASSIFICATION_TYPE != null and CLASSIFICATION_TYPE != ''">,CLASSIFICATION_TYPE = #{RESULT_CLASSIFICATION_TYPE}</if>
		   <if test="ASSETS_LEVEL != null and ASSETS_LEVEL != ''">,ASSETS_LEVEL = #{RESULT_CHANGE_LEVEL}</if>
		   <if test="ASSETS_TYPE != null and ASSETS_TYPE != ''">,ASSETS_TYPE = #{RESULT_CHANGE_TYPE}</if>
		   ,ASSETS_DATE = SYSDATE
		 WHERE PAY_CODE = #{RESULT_PAY_CODE}
	</update>
	
	<select id="selectZcflResultSuccess" parameterType="String" resultType="Map">
		    SELECT RESULT_ID,
			       RESULT_PAY_CODE,
			       RESULT_NOTE,
			       RESULT_CLASSIFICATION_TYPE,
			       RESULT_CHANGE_TYPE,
			       RESULT_CHANGE_LEVEL,
			       RESULT_BEGIN_LEVEL,
			       RESULT_END_LEVEL,
			       RESULT_STATUS,
			       JBPM_ID
			  FROM ZCFL_RESULT
			 WHERE RESULT_ID = #{RESULT_ID}
	</select>
	
	<select id="selectFXYZ" parameterType="String" resultType="Map">
		    SELECT ZRD_ID,
			       ZRD_RESULT_ID,
			       ZRD_TYPE,
			       ZRD_LEVEL,
			       ZRD_NOTE,
			       ZRD_SORTING,
			       ZRD_DATE
			  FROM ZCFL_RESULT_DIRECTLY
			 WHERE ZRD_RESULT_ID = #{RESULT_ID}
	</select>
	
	<update id="updateZcflResultF" parameterType="Map">
		UPDATE ZCFL_RESULT 
		   set RESULT_TASK_ID = #{RESULT_TASK_ID},
		   	   RESULT_DATE = SYSDATE
		 WHERE RESULT_ID = #{RESULT_ID}
	</update>
	
	<update id="updateZcflResult" parameterType="Map">
		UPDATE ZCFL_RESULT 
		   set RESULT_END_LEVEL = #{ZRD_LEVEL},
		   	   RESULT_DATE = SYSDATE
		 WHERE RESULT_ID = #{RESULT_ID}
	</update>
	
	<select id="assetsextra" parameterType="Map" resultType="Map">
					SELECT TCS.result_pay_code,
			       TCS.result_note,
			       TCS.result_classification_type,
			       TCS.result_change_type,
			       TCS.result_change_level,
			       TCS.result_begin_level,
			       TCS.result_end_level,
			       TCS.result_status,
			       TCS.CODE,
			       (SELECT B.FLAG FROM T_SYS_DATA_DICTIONARY B WHERE B.TYPE='资产分类类型' AND B.CODE=TCS.CODE) CODE1,
			       TCS.RESULT_NOW_LEVEL,
			       (SELECT B.FLAG FROM T_SYS_DATA_DICTIONARY B WHERE B.TYPE='资产分类类型' AND B.CODE=TCS.RESULT_NOW_LEVEL) RESULT_NOW_LEVEL1,
			       CLI.NAME RENTER_NAME,
			       PJ.PLATFORM_TYPE PLATFORM,
			       TCS.result_id
			  FROM (select zcr.result_pay_code,
			               zcr.result_note,
			               zcr.result_classification_type,
			               zcr.result_change_type,
			               zcr.result_change_level,
			               zcr.result_begin_level,
			               zcr.result_end_level,
			               zcr.result_status,
			               zcr.RESULT_NOW_LEVEL,
			               zcr.result_id,
			               tt.code  
			          from ZCFL_RESULT zcr,
			               (select t.code
			                  from t_sys_data_dictionary t
			                 where t.type = '资产分类类型'
			                   and t.level_num =
			                       (select 
		                                (case when aa.zzjb > 12 then 12
		                                  when aa.zzjb &lt; 1 then 1
		                                    else
		                                      aa.zzjb
		                                      end) as zzjb
		                                 from (select (case
			                                 when RESULT_CHANGE_TYPE = '上调' then
			                                  (tt.level_num - RESULT_CHANGE_LEVEL)
			                                 when RESULT_CHANGE_TYPE = '下调' then
			                                  (tt.level_num + RESULT_CHANGE_LEVEL)
			                                 else
			                                  tt.level_num
			                               end) as zzjb
			                          from ZCFL_RESULT zcr,
			                               (select t.level_num
			                                  from t_sys_data_dictionary t
			                                 where t.type = '资产分类类型'
			                                   and t.code =
			                                       (select zcr.RESULT_BEGIN_LEVEL
			                                          from ZCFL_RESULT zcr
			                                         where zcr.result_id = #{RESULT_ID})) tt
			                         where zcr.result_id = #{RESULT_ID})aa)) tt
			         where zcr.result_id = #{RESULT_ID}) TCS,
			       FIL_RENT_PLAN_HEAD_BAS_MAX__V TBPM,--支付表
			       FIL_PROJECT_HEAD PJ,--
             		FIL_CUST_CLIENT CLI--
			 WHERE TCS.result_pay_code = TBPM.PAYLIST_CODE
			  AND TBPM.PROJECT_ID = PJ.ID--
             AND PJ.CLIENT_ID=CLI.ID
	</select>
	<insert id="insinitial" parameterType="Map">
		insert into ZCFL_RESULT_DIRECTLY
		(ZRD_ID,
		ZRD_RESULT_ID,
		ZRD_TYPE,
		ZRD_LEVEL,
		ZRD_NOTE,
		ZRD_SORTING,
		ZRD_DATE
		)values
		( SEQ_ZCFL_RESULT_DIRECTLY.NEXTVAL,
		#{RESULT_ID},
		#{ZRD_TYPE},
		#{ZCTRA_RESULT_TYPE},
		#{RESULT_NOTE},
		#{ZRD_SORTING},
		sysdate
		)
	</insert>
	<update id="updateresult" parameterType="Map">
		update zcfl_result 
			set RESULT_END_LEVEL=#{ZCTRA_RESULT_TYPE},RESULT_DATE=sysdate
			where RESULT_ID=#{RESULT_ID}
	</update>
	<select id="selectinitial"  parameterType="Map" resultType="Map">
		select MAX(ZRD_SORTING) ZRD_SORTING from ZCFL_RESULT_DIRECTLY where ZRD_RESULT_ID=#{RESULT_ID}
	</select>
	<select id="selaffirm"  parameterType="Map" resultType="Map">
		select zrd.ZRD_ID,
		       zrd.ZRD_RESULT_ID,
		       zrd.ZRD_TYPE,
		       zrd.ZRD_LEVEL,
		       zrd.ZRD_NOTE,
		       zrd.ZRD_DATE,
		       zrd.ZRD_SORTING
		  from ZCFL_RESULT_DIRECTLY zrd
		 where zrd.ZRD_RESULT_ID = #{RESULT_ID}
		   AND zrd.ZRD_TYPE = #{ZRD_TYPE}
	</select>
	<select id="selg0"  parameterType="Map" resultType="Map">
		select ZRD_LEVEL,ZRD_NOTE ZRD_SORTING from ZCFL_RESULT_DIRECTLY where ZRD_RESULT_ID=#{RESULT_ID} and ZRD_TYPE=#{G0}
	</select>
	<select id="selg1"  parameterType="Map" resultType="Map">
		select ZRD_LEVEL,ZRD_NOTE ZRD_SORTING from ZCFL_RESULT_DIRECTLY where ZRD_RESULT_ID=#{RESULT_ID} and ZRD_TYPE=#{G1}
	</select>
	<select id="selg2"  parameterType="Map" resultType="Map">
		select ZRD_LEVEL,ZRD_NOTE ZRD_SORTING from ZCFL_RESULT_DIRECTLY where ZRD_RESULT_ID=#{RESULT_ID} and ZRD_TYPE=#{G2}
	</select>
	<select id="selg3"  parameterType="Map" resultType="Map">
		select ZRD_LEVEL,ZRD_NOTE ZRD_SORTING from ZCFL_RESULT_DIRECTLY where ZRD_RESULT_ID=#{RESULT_ID} and ZRD_TYPE=#{G3}
	</select>
	
</mapper>