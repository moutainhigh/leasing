<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="BuyBack">
	<select id="getAllBuyBack" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT * FROM (SELECT CC.*,ROWNUM ROWNO FROM (
		SELECT COUNT(*) COUNT_,FO.PAY_CODE,SUM(FO.Penalty_Rece)-SUM(fo.penalty_paid)
		PENALTY_RECE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.SUP_ID,FE.PRODUCT_NAME,
		(SELECT MAX(to_char(FRD.PAY_DATE,'yyyy-mm-dd')) FROM
		FIL_RENT_PLAN_DETAIL FRD WHERE FRD.PAY_ID=FRP.PAY_ID) END_DATE,
		(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='本金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_BJ,
		(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='租金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_ZJ,
		(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		(SELECT SUM(NVL(FRB.BEGINNING_PAID,0)) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE)
		BEGINNING_PAID,--已还租金
		FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FRP.PAY_ID,FBB.BUY_BACK_STATUS,TO_CHAR(FBB.ACCOUNT_DATE,'YYYY-MM-DD')
		ACCOUNT_DATE,nvl(FBB.SUM_AMT_BACK,0) SUM_AMT_BACK
		FROM FI_OVERDUE_TEMP FO
		LEFT JOIN
		(SELECT FPE.PAYLIST_CODE,
		SUM(FPE.UNIT_PRICE)UNIT_PRICE,--设备单价
		MAX(TSC.COMPANY_NAME) COMPANY_NAME,--厂商
		MAX(TSS.SUP_NAME) SUP_NAME,--供应商
		MAX(TSS.SUP_ID) SUP_ID,--供应商
		ZH_CONCAT(DISTINCT(TP.PRODUCT_NAME)) PRODUCT_NAME--设备名称
		FROM FIL_PROJECT_EQUIPMENT FPE
		LEFT JOIN T_SYS_COMPANY TSC
		ON FPE.COMPANY_ID = TSC.COMPANY_ID
		LEFT JOIN T_SYS_SUPPLIERS TSS
		ON FPE.SUPPLIERS_ID = TSS.SUP_ID
		LEFT JOIN T_PRODUCT TP
		ON FPE.PRODUCT_ID = TP.PRODUCT_ID
		WHERE FPE.STATUS = 0 AND FPE.PAYLIST_CODE IS NOT NULL
		GROUP BY FPE.PAYLIST_CODE) FE
		ON FO.PAY_CODE = FE.PAYLIST_CODE
		LEFT JOIN
		(SELECT FP.PAYLIST_CODE PAYLIST_CODE2,FP.ID PAY_ID,
		FPH.PRO_CODE,FCC.NAME,to_char(FP.START_DATE,'yyyy-mm-dd')
		START_DATE,FP.LEASE_TERM,FP.TOPRIC_SUBFIRENT FROM FIL_PROJECT_HEAD
		FPH,FIL_CUST_CLIENT FCC,FIL_RENT_PLAN_HEAD_MAX_V FP
		WHERE FP.PROJECT_ID = FPH.ID AND FPH.CLIENT_ID=FCC.ID) FRP
		ON FO.PAY_CODE = FRP.PAYLIST_CODE2
		LEFT JOIN FIL_BUY_BACK FBB
		ON FBB.PAY_ID = FRP.PAY_ID
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND FO.rent_rece!=FO.rent_paid and
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		GROUP BY
		FO.PAY_CODE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.SUP_ID,FE.PRODUCT_NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FBB.BUY_BACK_STATUS,FBB.ACCOUNT_DATE
		,FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.PAY_ID,FBB.SUM_AMT_BACK
		HAVING COUNT(*)>2
		) CC
		<where>
			rownum &lt;=#{PAGE_END}
			<if test="PRO_CODE!=null and PRO_CODE!=''">AND CC.PRO_CODE LIKE '%'||#{PRO_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.END_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.END_DATE &lt;= #{E_DELIVER_DATE}</if>
			<if test="B_COUNT_!=null and B_COUNT_!=''">AND CC.COUNT_ >= #{B_COUNT_}</if>
			<if test="E_COUNT_!=null and E_COUNT_!=''">AND CC.COUNT_ &lt;= #{E_COUNT_}</if>
		</where>
		ORDER BY CC.START_DATE DESC) CCC WHERE CCC.ROWNO >= #{PAGE_BEGIN} AND
		CCC.ROWNO &lt;=#{PAGE_END}
	</select>
	<select id="getAllBuyBack_count" parameterType="java.util.Map"
		resultType="int">
		SELECT count(*) FROM (
		SELECT COUNT(*) COUNT_,FO.PAY_CODE,SUM(FO.RENT_RECE)
		PENALTY_RECE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.PRODUCT_NAME,
		(SELECT MAX(to_char(FRD.PAY_DATE,'yyyy-mm-dd')) FROM
		FIL_RENT_PLAN_DETAIL FRD WHERE FRD.PAY_ID=FRP.PAY_ID) END_DATE,
		--(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='本金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_BJ,
		--(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='租金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_ZJ,
		--(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		--(SELECT SUM(NVL(FRB.BEGINNING_PAID,0)) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE)
		BEGINNING_PAID,--已还租金
		FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FRP.PAY_ID,FBB.BUY_BACK_STATUS,TO_CHAR(FBB.ACCOUNT_DATE,'YYYY-MM-DD')
		ACCOUNT_DATE
		FROM FI_OVERDUE_TEMP FO
		LEFT JOIN
		(SELECT FPE.PAYLIST_CODE,
		SUM(FPE.UNIT_PRICE)UNIT_PRICE,--设备单价
		MAX(TSC.COMPANY_NAME) COMPANY_NAME,--厂商
		MAX(TSS.SUP_NAME) SUP_NAME,--供应商
		ZH_CONCAT(DISTINCT(TP.PRODUCT_NAME)) PRODUCT_NAME--设备名称
		FROM FIL_PROJECT_EQUIPMENT FPE
		LEFT JOIN T_SYS_COMPANY TSC
		ON FPE.COMPANY_ID = TSC.COMPANY_ID
		LEFT JOIN T_SYS_SUPPLIERS TSS
		ON FPE.SUPPLIERS_ID = TSS.SUP_ID
		LEFT JOIN T_PRODUCT TP
		ON FPE.PRODUCT_ID = TP.PRODUCT_ID
		WHERE FPE.STATUS = 0 AND FPE.PAYLIST_CODE IS NOT NULL
		GROUP BY FPE.PAYLIST_CODE) FE
		ON FO.PAY_CODE = FE.PAYLIST_CODE
		LEFT JOIN
		(SELECT FP.PAYLIST_CODE PAYLIST_CODE2,FP.ID PAY_ID,
		FPH.PRO_CODE,FCC.NAME,to_char(FP.START_DATE,'yyyy-mm-dd')
		START_DATE,FP.LEASE_TERM,FP.TOPRIC_SUBFIRENT FROM FIL_PROJECT_HEAD
		FPH,FIL_CUST_CLIENT FCC,FIL_RENT_PLAN_HEAD_MAX_V FP
		WHERE FP.PROJECT_ID = FPH.ID AND FPH.CLIENT_ID=FCC.ID) FRP
		ON FO.PAY_CODE = FRP.PAYLIST_CODE2
		LEFT JOIN FIL_BUY_BACK FBB
		ON FBB.PAY_ID = FRP.PAY_ID
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND FO.rent_rece!=FO.rent_paid and
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		GROUP BY
		FO.PAY_CODE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.PRODUCT_NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FBB.BUY_BACK_STATUS,FBB.ACCOUNT_DATE
		,FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.PAY_ID
		HAVING COUNT(*)>2
		) CC
		<where>
			<if test="PRO_CODE!=null and PRO_CODE!=''">AND CC.PRO_CODE LIKE '%'||#{PRO_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.END_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.END_DATE &lt;= #{E_DELIVER_DATE}</if>
			<if test="B_COUNT_!=null and B_COUNT_!=''">AND CC.COUNT_ >= #{B_COUNT_}</if>
			<if test="E_COUNT_!=null and E_COUNT_!=''">AND CC.COUNT_ &lt;= #{E_COUNT_}</if>
		</where>
	</select>
	<select id="butchWarning_pay_code" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT FO.PAY_CODE,FRP.PAY_ID
		FROM FI_OVERDUE_TEMP FO
		LEFT JOIN
		(SELECT FPE.PAYLIST_CODE,
		SUM(FPE.UNIT_PRICE)UNIT_PRICE,--设备单价
		MAX(TSC.COMPANY_NAME) COMPANY_NAME,--厂商
		MAX(TSS.SUP_NAME) SUP_NAME,--供应商
		MAX(TSS.SUP_ID) SUP_ID,--供应商
		ZH_CONCAT(DISTINCT(TP.PRODUCT_NAME)) PRODUCT_NAME--设备名称
		FROM FIL_PROJECT_EQUIPMENT FPE
		LEFT JOIN T_SYS_COMPANY TSC
		ON FPE.COMPANY_ID = TSC.COMPANY_ID
		LEFT JOIN T_SYS_SUPPLIERS TSS
		ON FPE.SUPPLIERS_ID = TSS.SUP_ID
		LEFT JOIN T_PRODUCT TP
		ON FPE.PRODUCT_ID = TP.PRODUCT_ID
		WHERE FPE.STATUS = 0 AND FPE.PAYLIST_CODE IS NOT NULL
		GROUP BY FPE.PAYLIST_CODE) FE
		ON FO.PAY_CODE = FE.PAYLIST_CODE
		LEFT JOIN
		(SELECT FP.PAYLIST_CODE PAYLIST_CODE2,FP.ID PAY_ID,
		FPH.PRO_CODE,FCC.NAME,to_char(FP.START_DATE,'yyyy-mm-dd')
		START_DATE,FP.LEASE_TERM,FP.TOPRIC_SUBFIRENT FROM FIL_PROJECT_HEAD
		FPH,FIL_CUST_CLIENT FCC,FIL_RENT_PLAN_HEAD_MAX_V FP
		WHERE FP.PROJECT_ID = FPH.ID AND FPH.CLIENT_ID=FCC.ID) FRP
		ON FO.PAY_CODE = FRP.PAYLIST_CODE2
		LEFT JOIN FIL_BUY_BACK FBB
		ON FBB.PAY_ID = FRP.PAY_ID
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		and FE.SUP_ID =#{SUP_ID}
		GROUP BY FO.PAY_CODE,FRP.PAY_ID HAVING COUNT(*)>2
    
	</select>

	<select id="butchWarning_pay_code2" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT FO.PAY_CODE,FRP.PAY_ID
		FROM FI_OVERDUE_TEMP FO
		LEFT JOIN
		(SELECT FPE.PAYLIST_CODE,
		SUM(FPE.UNIT_PRICE)UNIT_PRICE,--设备单价
		MAX(TSC.COMPANY_NAME) COMPANY_NAME,--厂商
		MAX(TSS.SUP_NAME) SUP_NAME,--供应商
		MAX(TSS.SUP_ID) SUP_ID,--供应商
		ZH_CONCAT(DISTINCT(TP.PRODUCT_NAME)) PRODUCT_NAME--设备名称
		FROM FIL_PROJECT_EQUIPMENT FPE
		LEFT JOIN T_SYS_COMPANY TSC
		ON FPE.COMPANY_ID = TSC.COMPANY_ID
		LEFT JOIN T_SYS_SUPPLIERS TSS
		ON FPE.SUPPLIERS_ID = TSS.SUP_ID
		LEFT JOIN T_PRODUCT TP
		ON FPE.PRODUCT_ID = TP.PRODUCT_ID
		WHERE FPE.STATUS = 0 AND FPE.PAYLIST_CODE IS NOT NULL
		GROUP BY FPE.PAYLIST_CODE) FE
		ON FO.PAY_CODE = FE.PAYLIST_CODE
		LEFT JOIN
		(SELECT FP.PAYLIST_CODE PAYLIST_CODE2,FP.ID PAY_ID,
		FPH.PRO_CODE,FCC.NAME,to_char(FP.START_DATE,'yyyy-mm-dd')
		START_DATE,FP.LEASE_TERM,FP.TOPRIC_SUBFIRENT FROM FIL_PROJECT_HEAD
		FPH,FIL_CUST_CLIENT FCC,FIL_RENT_PLAN_HEAD_MAX_V FP
		WHERE FP.PROJECT_ID = FPH.ID AND FPH.CLIENT_ID=FCC.ID) FRP
		ON FO.PAY_CODE = FRP.PAYLIST_CODE2
		inner JOIN FIL_BUY_BACK FBB
		ON FBB.PAY_ID = FRP.PAY_ID
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		and FE.SUP_ID =#{SUP_ID}
		GROUP BY FO.PAY_CODE,FRP.PAY_ID HAVING COUNT(*)>2
    
	</select>

	<select id="buyBackManagement" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT * FROM (SELECT CC.*,ROWNUM ROWNO FROM (
		SELECT
		FPH.ORD_ID,
		FPH.CLERK_ID,
		FPH.LEASE_CODE,
		FPH.PRO_CODE,
		T.PAYLIST_CODE PAY_CODE,
		T.STATUS,
		VPS.SUP_NAME,
		VPS.SUP_ID,
		VPS.COMPANY_NAME,
		FCC.NAME,
		FCC.ID CLIENT_ID,
		FCC.TYPE,
		VPS.PRODUCT_NAME,
		TO_CHAR(T.START_DATE,'yyyy-mm-dd') START_DATE,
		T.LEASE_TERM,
		TO_CHAR(T.END_DATE,'yyyy-mm-dd') END_DATE,
		T.LEASE_TOPRIC UNIT_PRICE,
		(SELECT SUM(F.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL F WHERE F.PAY_ID = T.ID
		AND F.ITEM_FLAG = 2 AND F.ITEM_NAME='租金') SUM_ZJ,
		(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		(SELECT round(SUM(NVL(FRB.BEGINNING_PAID,0)),2) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE)
		BEGINNING_PAID,--已还租金
		(SELECT round(SUM(NVL(FRB.BEGINNING_MONEY,0)) -
		SUM(NVL(FRB.BEGINNING_PAID,0)),2) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FRB.BEGINNING_NAME = '本金') WH_BJ,--未还租金
		(select count(1) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		COUNT_,
		(select round(SUM(NVL(fo.PENALTY_RECE,0)),2) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		PENALTY_RECE,
		(select round(SUM(NVL(fo.RENT_RECE,0)),2) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		RENT_RECE,
		T.YEAR_INTEREST,
		T.ID PAY_ID,
		T.PROJECT_ID,
		CASE WHEN T.ZRZ_STATUS ='1' THEN '未融资' else '已融资' end ZRZ_STATUS
		FROM FIL_RENT_PLAN_HEAD_BAS_MAX__V T
		LEFT JOIN v_plan_scheme VPS ON T.PAYLIST_CODE=VPS.PAYLIST_CODE
		LEFT JOIN FIL_PROJECT_HEAD FPH ON T.PROJECT_ID = FPH.ID
		LEFT JOIN FIL_CUST_CLIENT FCC ON FPH.CLIENT_ID = FCC.ID
		where T.STATUS in (0,5,55)
		) CC
		<where>
			rownum &lt;=#{PAGE_END}
			<if test="LEASE_CODE !=null and LEASE_CODE !=''">AND CC.LEASE_CODE LIKE '%'||#{LEASE_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="COUNT_!=null and COUNT_!=''">AND CC.COUNT_ = #{COUNT_}</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.START_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.START_DATE &lt;= #{E_DELIVER_DATE}</if>
			<if test="SYS_ORGIDS_ !=null and SYS_ORGIDS_ !=''">AND CC.ORD_ID IN ${SYS_ORGIDS_} </if>
			<if test="SYS_CLERK_ID_ !=null and SYS_CLERK_ID_ !=''">AND CC.CLERK_ID = #{SYS_CLERK_ID_} </if>
		</where>
		ORDER BY CC.START_DATE DESC) CCC WHERE CCC.ROWNO >= #{PAGE_BEGIN} AND
		CCC.ROWNO &lt;= #{PAGE_END}
	</select>
	<select id="buyBackManagement_count" parameterType="java.util.Map"
		resultType="int">
		SELECT count(*) FROM (
		SELECT
		FPH.ORD_ID,
		FPH.CLERK_ID,
		FPH.LEASE_CODE,
		FPH.PRO_CODE,
		T.PAYLIST_CODE PAY_CODE,
		T.STATUS,
		VPS.SUP_NAME,
		VPS.SUP_ID,
		VPS.COMPANY_NAME,
		FCC.NAME,
		FCC.ID CLIENT_ID,
		FCC.TYPE,
		VPS.PRODUCT_NAME,
		TO_CHAR(T.START_DATE,'yyyy-mm-dd') START_DATE,
		T.LEASE_TERM*T.LEASE_PERIOD LEASE_TERM,
		TO_CHAR(T.END_DATE,'yyyy-mm-dd') END_DATE,
		T.LEASE_TOPRIC UNIT_PRICE,
		(select count(1) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		COUNT_,
		T.YEAR_INTEREST,
		T.ID PAY_ID,
		T.PROJECT_ID
		FROM FIL_RENT_PLAN_HEAD_BAS_MAX__V T
		LEFT JOIN v_plan_scheme VPS ON T.PAYLIST_CODE=VPS.PAYLIST_CODE
		LEFT JOIN FIL_PROJECT_HEAD FPH ON T.PROJECT_ID = FPH.ID
		LEFT JOIN FIL_CUST_CLIENT FCC ON FPH.CLIENT_ID = FCC.ID
		where T.STATUS in (0,5,55)
		) CC
		<where>
			<if test="LEASE_CODE !=null and LEASE_CODE !=''">AND CC.LEASE_CODE LIKE '%'||#{LEASE_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="COUNT_!=null and COUNT_!=''">AND CC.COUNT_ = #{COUNT_}</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.START_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.START_DATE &lt;= #{E_DELIVER_DATE}</if>
			<if test="SYS_ORGIDS_ !=null and SYS_ORGIDS_ !=''">AND CC.ORD_ID IN ${SYS_ORGIDS_} </if>
			<if test="SYS_CLERK_ID_ !=null and SYS_CLERK_ID_ !=''">AND CC.CLERK_ID = #{SYS_CLERK_ID_} </if>
		</where>
	</select>


	<select id="buyBackQuery" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT * FROM (SELECT CC.*,ROWNUM ROWNO FROM (
		SELECT
		fph.LEASE_CODE,
		fph.pro_code,
		t.PAYLIST_CODE PAY_CODE,
		T.STATUS,
		VPS.SUP_NAME,
		VPS.COMPANY_NAME,
		fcc.name,
		VPS.PRODUCT_NAME,
		to_char(t.START_DATE,'yyyy-mm-dd') START_DATE,
		t.LEASE_TERM*t.LEASE_PERIOD LEASE_TERM,
		to_char(t.END_DATE,'yyyy-mm-dd') END_DATE,
		t.LEASE_TOPRIC UNIT_PRICE,
		(SELECT SUM(F.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL F WHERE F.PAY_ID = T.ID
		AND F.ITEM_FLAG = 2 AND F.ITEM_NAME='租金') SUM_ZJ,
		(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		(SELECT round(SUM(NVL(FRB.BEGINNING_PAID,0)),2) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE)
		BEGINNING_PAID,--已还租金
		(SELECT round(SUM(NVL(FRB.BEGINNING_MONEY,0)) -
		SUM(NVL(FRB.BEGINNING_PAID,0)),2) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FRB.BEGINNING_NAME = '本金') WH_BJ,--未还租金
		(select count(1) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		COUNT_,
		(select round(SUM(NVL(fo.PENALTY_RECE,0)),2) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		PENALTY_RECE,
		(select round(SUM(NVL(fo.RENT_RECE,0)),2) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		RENT_RECE,
		t.year_interest,
		t.ID PAY_ID,
		t.project_id
		FROM fil_rent_plan_head_bas_max__v t
		LEFT JOIN v_plan_scheme VPS ON T.PAYLIST_CODE=VPS.PAYLIST_CODE
		left join fil_project_head fph on t.PROJECT_ID = fph.id
		left join fil_cust_client fcc on fph.client_id = fcc.id
		where T.STATUS in (5,55)
		) CC
		<where>
			rownum &lt;=#{PAGE_END}
			<if test="LEASE_CODE !=null and LEASE_CODE!=''">AND CC.LEASE_CODE LIKE '%'||#{PRO_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="COUNT_!=null and COUNT_!=''">AND CC.COUNT_ = #{COUNT_}</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.START_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.START_DATE &lt;= #{E_DELIVER_DATE}</if>
		</where>
		ORDER BY CC.START_DATE DESC) CCC WHERE CCC.ROWNO>=#{PAGE_BEGIN}
	</select>
	<select id="buyBackQuery_count" parameterType="java.util.Map"
		resultType="int">
		SELECT count(*) FROM (
		SELECT
		fph.LEASE_CODE,
		fph.pro_code,
		t.PAYLIST_CODE PAY_CODE,
		t.status,
		VPS.SUP_NAME,
		VPS.COMPANY_NAME,
		fcc.name,
		VPS.PRODUCT_NAME,
		to_char(t.START_DATE,'yyyy-mm-dd') START_DATE,
		t.LEASE_TERM*t.LEASE_PERIOD LEASE_TERM,
		to_char(t.END_DATE,'yyyy-mm-dd') END_DATE,
		t.LEASE_TOPRIC UNIT_PRICE,
		(select count(1) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		COUNT_,
		t.ID PAY_ID,
		fph.id project_id
		FROM fil_rent_plan_head_bas_max__v t
		LEFT JOIN v_plan_scheme VPS ON T.PAYLIST_CODE=VPS.PAYLIST_CODE
		left join fil_project_head fph on t.PROJECT_ID = fph.id
		left join fil_cust_client fcc on fph.client_id = fcc.id
		where T.STATUS in (5,55)
		) CC
		<where>
			<if test="LEASE_CODE !=null and LEASE_CODE!=''">AND CC.LEASE_CODE LIKE '%'||#{LEASE_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="COUNT_!=null and COUNT_!=''">AND CC.COUNT_ = #{COUNT_}</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.START_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.START_DATE &lt;= #{E_DELIVER_DATE}</if>
		</where>
	</select>

	<select id="queryAllProduct" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT t.product_name FROM T_PRODUCT t order by t.gxtime
		desc
	</select>
	<select id="queryAllCompany" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT t.company_name FROM T_SYS_COMPANY t order by
		t.create_time desc
	</select>
	<insert id="update_buyBackWarning" parameterType="Map">
		INSERT
		INTO FIL_BUY_BACK
		(ID,PAY_ID,ACCOUNT_DATE,BUY_BACK_STATUS,CREATE_DATE,PAYLIST_CODE,PENALTY_AMT,NOMINALPRICE_NEW)
		VALUES
		(SEQ_FIL_BUY_BACK.NEXTVAL,#{PAY_ID},to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'),#{BUY_BACK_STATUS},SYSDATE,#{PAYLIST_CODE},#{PENALTY_AMT},1)
	</insert>

	<select id="BuyBackWarning" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT * FROM (SELECT CC.*,ROWNUM ROWNO FROM (
		SELECT COUNT(*) COUNT_,FO.PAY_CODE,SUM(FO.PENALTY_RECE)-SUM(FO.PENALTY_PAID)
		PENALTY_RECE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.PRODUCT_NAME,
		(SELECT MAX(to_char(FRD.PAY_DATE,'yyyy-mm-dd')) FROM
		FIL_RENT_PLAN_DETAIL FRD WHERE FRD.PAY_ID=FRP.PAY_ID) END_DATE,
		(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='本金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_BJ,
		(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='租金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_ZJ,
		(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		(SELECT SUM(NVL(FRB.BEGINNING_PAID,0)) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE)
		BEGINNING_PAID,--已还租金
		FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FRP.PAY_ID,FBB.BUY_BACK_STATUS,FRP.ORD_ID
		FROM FI_OVERDUE_TEMP FO
		LEFT JOIN
		(SELECT FPE.PAYLIST_CODE,
		SUM(FPE.UNIT_PRICE)UNIT_PRICE,--设备单价
		MAX(TSC.COMPANY_NAME) COMPANY_NAME,--厂商
		MAX(TSS.SUP_NAME) SUP_NAME,--供应商
		ZH_CONCAT(DISTINCT(TP.PRODUCT_NAME)) PRODUCT_NAME--设备名称
		FROM FIL_PROJECT_EQUIPMENT FPE
		LEFT JOIN T_SYS_COMPANY TSC
		ON FPE.COMPANY_ID = TSC.COMPANY_ID
		LEFT JOIN T_SYS_SUPPLIERS TSS
		ON FPE.SUPPLIERS_ID = TSS.SUP_ID
		LEFT JOIN T_PRODUCT TP
		ON FPE.PRODUCT_ID = TP.PRODUCT_ID
		WHERE FPE.STATUS = 0 AND FPE.PAYLIST_CODE IS NOT NULL
		GROUP BY FPE.PAYLIST_CODE) FE
		ON FO.PAY_CODE = FE.PAYLIST_CODE
		LEFT JOIN
		(SELECT FPH.ORD_ID,FP.PAYLIST_CODE PAYLIST_CODE2,FP.ID PAY_ID,
		FPH.PRO_CODE,FCC.NAME,to_char(FP.START_DATE,'yyyy-mm-dd')
		START_DATE,FP.LEASE_TERM,FP.TOPRIC_SUBFIRENT FROM FIL_PROJECT_HEAD
		FPH,FIL_CUST_CLIENT FCC,FIL_RENT_PLAN_HEAD_MAX_V FP
		WHERE FP.PROJECT_ID = FPH.ID AND FPH.CLIENT_ID=FCC.ID) FRP
		ON FO.PAY_CODE = FRP.PAYLIST_CODE2
		INNER JOIN FIL_BUY_BACK FBB
		ON FBB.PAY_ID = FRP.PAY_ID AND FBB.BUY_BACK_STATUS = 0
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		GROUP BY
		FO.PAY_CODE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.PRODUCT_NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FBB.BUY_BACK_STATUS,FRP.ORD_ID
		,FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.PAY_ID
		HAVING COUNT(*)>2
		) CC
		<where>
			rownum &lt;=#{PAGE_END}
			<if test="PRO_CODE!=null and PRO_CODE!=''">AND CC.PRO_CODE LIKE '%'||#{PRO_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="COUNT_!=null and COUNT_!=''">AND CC.COUNT_ = #{COUNT_}</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.START_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.START_DATE &lt;= #{E_DELIVER_DATE}</if>
			<if test="ORD_ID!=null and ORD_ID!=''">AND CC.ORD_ID in ${ORD_ID}</if>
		</where>
		ORDER BY CC.START_DATE DESC) CCC WHERE CCC.ROWNO >= #{PAGE_BEGIN} AND
		CCC.ROWNO &lt;=#{PAGE_END}
	</select>
	<select id="BuyBackWarning_count" parameterType="java.util.Map"
		resultType="int">
		SELECT count(*) FROM (
		SELECT COUNT(*) COUNT_,FO.PAY_CODE,SUM(FO.RENT_RECE)
		PENALTY_RECE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.PRODUCT_NAME,
		--(SELECT MAX(to_char(FRD.PAY_DATE,'yyyy-mm-dd')) FROM
		FIL_RENT_PLAN_DETAIL FRD WHERE FRD.PAY_ID=FRP.PAY_ID) END_DATE,
		--(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='本金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_BJ,
		--(SELECT SUM(FRD.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL FRD WHERE
		FRD.ITEM_NAME='租金' AND FRD.PAY_ID=FRP.PAY_ID)SUM_ZJ,
		--(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		--(SELECT SUM(NVL(FRB.BEGINNING_PAID,0)) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FO.PAY_CODE)
		BEGINNING_PAID,--已还租金
		FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FRP.PAY_ID,FBB.BUY_BACK_STATUS,FRP.ORD_ID
		FROM FI_OVERDUE_TEMP FO
		LEFT JOIN
		(SELECT FPE.PAYLIST_CODE,
		SUM(FPE.UNIT_PRICE)UNIT_PRICE,--设备单价
		MAX(TSC.COMPANY_NAME) COMPANY_NAME,--厂商
		MAX(TSS.SUP_NAME) SUP_NAME,--供应商
		ZH_CONCAT(DISTINCT(TP.PRODUCT_NAME)) PRODUCT_NAME--设备名称
		FROM FIL_PROJECT_EQUIPMENT FPE
		LEFT JOIN T_SYS_COMPANY TSC
		ON FPE.COMPANY_ID = TSC.COMPANY_ID
		LEFT JOIN T_SYS_SUPPLIERS TSS
		ON FPE.SUPPLIERS_ID = TSS.SUP_ID
		LEFT JOIN T_PRODUCT TP
		ON FPE.PRODUCT_ID = TP.PRODUCT_ID
		WHERE FPE.STATUS = 0 AND FPE.PAYLIST_CODE IS NOT NULL
		GROUP BY FPE.PAYLIST_CODE) FE
		ON FO.PAY_CODE = FE.PAYLIST_CODE
		LEFT JOIN
		(SELECT FPH.ORD_ID,FP.PAYLIST_CODE PAYLIST_CODE2,FP.ID PAY_ID,
		FPH.PRO_CODE,FCC.NAME,to_char(FP.START_DATE,'yyyy-mm-dd')
		START_DATE,FP.LEASE_TERM,FP.TOPRIC_SUBFIRENT FROM FIL_PROJECT_HEAD
		FPH,FIL_CUST_CLIENT FCC,FIL_RENT_PLAN_HEAD_MAX_V FP
		WHERE FP.PROJECT_ID = FPH.ID AND FPH.CLIENT_ID=FCC.ID) FRP
		ON FO.PAY_CODE = FRP.PAYLIST_CODE2
		INNER JOIN FIL_BUY_BACK FBB
		ON FBB.PAY_ID = FRP.PAY_ID AND FBB.BUY_BACK_STATUS = 0
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		GROUP BY
		FO.PAY_CODE,FE.UNIT_PRICE,FE.COMPANY_NAME,FE.SUP_NAME,FE.PRODUCT_NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.LEASE_TERM,FBB.BUY_BACK_STATUS,FRP.ORD_ID
		,FRP.PRO_CODE,FRP.NAME,FRP.START_DATE,FRP.TOPRIC_SUBFIRENT,FRP.PAY_ID
		HAVING COUNT(*)>2
		) CC
		<where>
			<if test="PRO_CODE!=null and PRO_CODE!=''">AND CC.PRO_CODE LIKE '%'||#{PRO_CODE}||'%'</if>
			<if test="SUP_NAME!=null and SUP_NAME!=''">AND CC.SUP_NAME LIKE '%'||#{SUP_NAME}||'%'</if>
			<if test="NAME!=null and NAME!=''">AND CC.NAME LIKE '%'||#{NAME}||'%'</if>
			<if test="COUNT_!=null and COUNT_!=''">AND CC.COUNT_ = #{COUNT_}</if>
			<if test="PRODUCT_NAME!=null and PRODUCT_NAME!=''">AND CC.PRODUCT_NAME LIKE '%'||#{PRODUCT_NAME}||'%'</if>
			<if test="COMPANY_NAME!=null and COMPANY_NAME!=''">AND CC.COMPANY_NAME LIKE '%'||#{COMPANY_NAME}||'%'</if>
			<if test="B_DELIVER_DATE!=null and B_DELIVER_DATE!=''">AND CC.START_DATE >= #{B_DELIVER_DATE}</if>
			<if test="E_DELIVER_DATE!=null and E_DELIVER_DATE!=''">AND CC.START_DATE &lt;= #{E_DELIVER_DATE}</if>
			<if test="ORD_ID!=null and ORD_ID!=''">AND CC.ORD_ID in ${ORD_ID}</if>
		</where>
	</select>

	<select id="exportExcel" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT FOO.COUNT_,FOO.PENALTY_RECE ,FOO.RENT_RECE,
		VFE.SUPPLIER_NAMES,--供应商
		FH.PRO_CODE,--项目编号
		TO_CHAR(FBB.ACCOUNT_DATE,'YYYY-MM-DD') ACCOUNT_DATE,--结算日
		TO_CHAR(FBB.CREATE_DATE,'YYYY-MM-DD') CREATE_DATE,--创建日期
		FCC.NAME,--承租人名称
		VFE.PRODUCT_NAMES,--租赁物
		VFE.SPEC_NAME,--型号
		VFE.WHOLE_ENGINE_CODES,--出厂编号
		VFE.LEASE_TOPRIC,--租赁物总价值
		FH.LEASE_TERM,--租赁周期
		FH.LEASE_PERIOD,
		TO_CHAR(FH.DELIVER_DATE,'YYYY-MM-DD') DELIVER_DATE,--起租日
		(SELECT
		SUM(T.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL T WHERE T.ITEM_FLAG=1 AND
		T.ITEM_NAME LIKE '%租金%' AND T.PAY_ID=FRP.ID) SUM_ZJ,--租金总计
		(SELECT
		SUM(T1.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL T1 WHERE
		T1.ITEM_NAME='租金' AND T1.PAY_ID=FRP.ID) START_ZJ,--起租租金
		(SELECT
		MAX(T.TPM_CODE) FROM FIL_PROJECT_FILE T WHERE
		T.PROJECT_ID=FRP.PROJECT_ID AND T.TPM_TYPE='融资租赁合同' AND T.FILE_TYPE
		=1)
		TPM_CODE,--SFNXSZ130012-A00
		(SELECT DECODE(MAX(T.VALUE_STR), '1','网银支付','非网银支付' ) FROM FIL_PROJECT_SCHEME
		T WHERE T.PROJECT_ID=FRP.PROJECT_ID AND T.KEY_NAME_ZN LIKE
		'%租金%'||'%方式%')
		PAYMENT_MODE, --租金付款方式
		(SELECT
		NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FRP.PAYLIST_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		(SELECT
		SUM(NVL(FRB.BEGINNING_PAID,0)) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=FRP.PAYLIST_CODE)
		BEGINNING_PAID,--已还租金
		(SELECT SUM(T.ITEM_MONEY) FROM
		FIL_RENT_PLAN_DETAIL T WHERE T.PAY_ID= FRP.id AND T.ITEM_NAME LIKE
		'%留购%')LEAVE,--留购价
		(SELECT to_char(min(t.pay_date),'yyyy-mm-dd') FROM
		fil_rent_plan_detail t where t.pay_id=FRP.id and t.item_flag=2 and
		t.item_name='利息' and trunc(t.pay_date) > trunc(sysdate))
		UNPAID_MIN_NUM,--未到期租金最小期次
		(SELECT sum(t.ITEM_MONEY) FROM
		fil_rent_plan_detail t where t.pay_id=FRP.id and t.item_flag=2 and
		t.item_name='利息' and trunc(t.pay_date) > trunc(sysdate))
		UNPAID_INTEREST,--未到期租金利息
		(SELECT SUM(T.ITEM_MONEY) FROM
		FIL_RENT_PLAN_DETAIL T WHERE T.PAY_ID= FRP.id AND T.ITEM_NAME='保证金')
		DEPOSIT--保证金
		FROM FIL_RENT_PLAN_HEAD_BAS_MAX__V FRP
		LEFT JOIN
		V_EQUIPMENT_SUPS_COMS VFE ON FRP.PAYLIST_CODE=VFE.PAYLIST_CODE
		LEFT
		JOIN FIL_PROJECT_HEAD FH ON FRP.PROJECT_ID=FH.ID
		LEFT JOIN
		FIL_CUST_CLIENT FCC ON FH.CLIENT_ID =FCC.ID
		LEFT JOIN FIL_BUY_BACK FBB
		ON FRP.ID = FBB.PAY_ID
		LEFT JOIN (SELECT COUNT(*)
		COUNT_,FO.PAY_CODE,SUM(FO.PENALTY_RECE)-SUM(FO.PENALTY_PAID)
		PENALTY_RECE ,SUM(FO.RENT_RECE)-SUM(FO.RENT_PAID) RENT_RECE FROM
		FI_OVERDUE FO
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		GROUP BY FO.PAY_CODE HAVING COUNT(*)>1) FOO ON
		FOO.PAY_CODE=FRP.PAYLIST_CODE
		<where>
			<if test="PAY_ID!=null and PAY_ID!=''">
				frp.id in
				<foreach item="ids" index="index" collection="PAY_ID" open="("
					separator="," close=")">
					#{ids}  
				 </foreach>

			</if>
		</where>
	</select>
	<delete id="refreshWarning" parameterType="java.util.Map">
		delete fil_buy_back fb
		where fb.pay_id in (SELECT frp.ID FROM fil_rent_plan_head_max_v frp
		where frp.PAYLIST_CODE in(
		SELECT fo.pay_code FROM fi_overdue fo where
		trunc(fo.create_date) = trunc(sysdate) and fo.pay_code in
		(SELECT
		fp.PAYLIST_CODE FROM fil_buy_back fbb,fil_rent_plan_head_max_v fp
		where fp.ID=fbb.pay_id)
		group by fo.pay_code having
		count(fo.pay_code)&lt;3))
	</delete>
	<delete id="non-payment_rent" parameterType="java.util.Map">

	</delete>
	<insert id="insert_detialBySelf" parameterType="Map">
		insert into
		fil_rent_plan_detail (
		ID, -- id NUMBER
		EQUIPMENT_ID, -- 设备id--暂时无用
		VARCHAR2
		PAY_DATE, -- 约定还款日 DATE
		PERIOD_NUM, -- 期次 NUMBER
		ITEM_NAME, --
		项目名称 VARCHAR2
		ITEM_MONEY, -- 项目金额 NUMBER
		ITEM_FLAG, --
		项目类型[1：首期款；2：租金；3：DB保证金；4：其他费用] NUMBER
		SPLIT_RATE, -- 拆分比例 VARCHAR2
		SPLIT_MONEY, -- 拆分金额 NUMBER
		PAID_MONEY, -- 实收金额 NUMBER
		PAY_ID, -- 支付表ID
		NUMBER
		TYPE, -- 备用：类型 NUMBER
		REMARK, -- 备注 VARCHAR2
		ITEM_NAME_EN, --
		VARCHAR2
		IRR, -- 租赁内含利率 NUMBER
		LOCKED_FLAG --
		锁定标识（只有还款计划书有锁定标识其他费用没有1是锁定0是不锁定） NUMBER
		)
		SELECT
		seq_fil_rent_plan_detail.nextval, -- id NUMBER
		EQUIPMENT_ID, --
		设备id--暂时无用 VARCHAR2
		PAY_DATE, -- 约定还款日 DATE
		PERIOD_NUM, -- 期次 NUMBER
		ITEM_NAME, -- 项目名称 VARCHAR2
		ITEM_MONEY, -- 项目金额 NUMBER
		ITEM_FLAG, --
		项目类型[1：首期款；2：租金；3：DB保证金；4：其他费用] NUMBER
		SPLIT_RATE, -- 拆分比例 VARCHAR2
		SPLIT_MONEY, -- 拆分金额 NUMBER
		PAID_MONEY, -- 实收金额 NUMBER
		#{NEWID}, --
		支付表ID NUMBER
		TYPE, -- 备用：类型 NUMBER
		REMARK, -- 备注 VARCHAR2
		ITEM_NAME_EN,
		-- VARCHAR2
		IRR, -- 租赁内含利率 NUMBER
		LOCKED_FLAG --
		锁定标识（只有还款计划书有锁定标识其他费用没有1是锁定0是不锁定） NUMBER
		FROM fil_rent_plan_detail t
		where t.pay_id = #{PAY_ID}
    </insert>
	<update id="buyBackNormal" parameterType="Map">
		update fil_buy_back t set pay_id = #{PAY_ID}
		<if test="BUY_BACK_STATUS !=null and BUY_BACK_STATUS !=''">,BUY_BACK_STATUS=#{BUY_BACK_STATUS}</if>
		<if test="PAYLIST_CODE !=null and PAYLIST_CODE !=''">,PAYLIST_CODE=#{PAYLIST_CODE}</if>
		<if test="PROJECT_ID !=null and PROJECT_ID !=''">,PROJECT_ID=#{PROJECT_ID}</if>
		<if test="SUM_ZJ !=null and SUM_ZJ !=''">,RENT_TOTAL=#{SUM_ZJ}</if>
		<if test="YS_MONEY !=null and YS_MONEY !=''">,RENT_PAID=#{YS_MONEY}</if>
		<if test="sy_money !=null and sy_money !=''">,RENT_LEFT=#{sy_money}</if>
		<if test="RENT_PAID_AMOUNT !=null and RENT_PAID_AMOUNT !=''">,RENT_PAID_AMOUNT=#{RENT_PAID_AMOUNT}</if>
		<if test="LG_DKJE !=null and LG_DKJE !=''">,NOMINALPRICE_DK=#{LG_DKJE}</if>
		<if test="BZJDk !=null and BZJDk !=''">,CAUTION_DK=#{BZJDk}</if>
		<if test="liugoujia !=null and liugoujia !=''">,NOMINALPRICE_NEW=#{liugoujia}</if>
		<if test="WDQLX_MONEY !=null and WDQLX_MONEY !=''">,INTEREST_UNDO=#{WDQLX_MONEY}</if>
		<if test="CORPUS_UNDO !=null and CORPUS_UNDO !=''">,CORPUS_UNDO=#{CORPUS_UNDO}</if>
		<if test="WS_YQ !=null and WS_YQ !=''">,PENALTY_AMT=#{WS_YQ}</if>
		<if test="HEJI !=null and HEJI !=''">,SUM_AMT_BACK=#{HEJI}</if>
		<if test="IS_END_STATUS !=null and IS_END_STATUS !=''">,IS_END_STATUS=#{IS_END_STATUS}</if>
		<!--
			<if test="HG_SXF !=null and HG_SXF
			!=''">,OTHER_SHOULD_PAY=#{HG_SXF}</if>
		-->
		<if test="BZJ !=null and BZJ !=''">,IS_DEPOSIT=#{BZJ}</if>
		<if test="isLiugou !=null and isLiugou !=''">,IS_LEAVE=#{isLiugou}</if>
		<if test="DBBZJ !=null and DBBZJ !=''">,IS_DBDEPOSIT=#{DBBZJ}</if>
		<if test="taxes !=null and taxes !=''">,TAX_MONEY=#{taxes}</if>
		<if test="HG_SXF !=null and HG_SXF !=''">,HG_SXF=#{HG_SXF}</if>
		<if test="DBBZJ !=null and DBBZJ !=''">,DBDEPOSIT_DK=#{DBBZJ}</if>
		<if test="yq_money !=null and yq_money !=''">,FAXI=#{yq_money}</if>
		<if test="REALITY_DATE != null and REALITY_DATE != ''">,REALITY_DATE=to_date(#{REALITY_DATE},'yyyy-MM-dd')</if>
		<if test="lease_term != null and lease_term != ''">,lease_term=#{lease_term}</if>
		where t.pay_id=#{PAY_ID}
	</update>
	<update id="buyBackNEWID" parameterType="Map">
		update
		fil_buy_back t set pay_id = #{NEWID}
		where t.pay_id=#{PAY_ID}
	</update>
	<update id="detial_interest_zero" parameterType="Map">
		update
		fil_rent_plan_detail t
		set t.item_money = t.item_money*(1-${LILV}/100)
		where t.item_flag = 2
		and t.item_name in ('利息','手续费','管理费','利息增值税')
		and t.pay_id = #{NEWID}
		and trunc(ADD_MONTHS(to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'),1)) &lt;=
		trunc(t.pay_date)
	</update>

	<update id="detial_interest_ZJ" parameterType="Map">
		MERGE INTO
		fil_rent_plan_detail t
		USING (
		select fr.pay_id,fr.period_num,round(sum(nvl(fr.item_money,0)),2) ITEM_MONEY
		from fil_rent_plan_detail fr where fr.pay_id = #{NEWID} and
		fr.item_flag=2 and fr.item_name in ('利息','本金','手续费','管理费','利息增值税') group by
		fr.pay_id,fr.period_num
		) tt
		ON (t.pay_id = #{NEWID} and
		trunc(ADD_MONTHS(to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'),1)) &lt;=
		trunc(t.pay_date) and t.item_flag = 2 and t.pay_id=tt.pay_id and
		t.period_num=tt.period_num and t.item_name in ('租金','PMT租金'))
		WHEN
		MATCHED THEN UPDATE set t.ITEM_MONEY=tt.ITEM_MONEY
	</update>


	<!-- 以下为正常回购检索 -->

	<!-- 获取项目信息 -->
	<select id="getProData" parameterType="Map" resultType="Map">
		SELECT DISTINCT *
		FROM (

		SELECT FPH.PRO_CODE PRO_CODE, --项目编号 Y
		FPE.PRODUCT_NAME PRODUCT_NAME, --设备名称 Y
		FPE.SPEC_NAME SPEC_NAME, --设备型号 Y
		FPH.LEASE_TOPRIC LEASE_TOPRIC, --租赁物价值 Y
		FPH.LEASE_TERM LEASE_TERM, --租赁期限 Y
		FPE.WHOLE_ENGINE_CODE WHOLE_ENGINE_CODE, --出厂编号
		FPE.STAYBUY_PRICE STAYBUY_PRICE, --留购价
		TO_CHAR(FPH.DELIVER_DATE, 'YYYY-MM-DD') DELIVER_DATE, --起租日 Y
		CL.NAME CUST_NAME --客户名称
		FROM FIL_RENT_PLAN_HEAD_MAX_V HM,
		FIL_PROJECT_EQUIPMENT FPE,
		FIL_PROJECT_HEAD FPH,
		FIL_CUST_CLIENT CL
		WHERE FPE.PROJECT_ID = FPH.ID
		AND HM.PROJECT_ID = FPH.ID
		AND CL.ID = FPH.CLIENT_ID

		AND HM.ID = #{PAYLIST_ID})
	</select>

	<!-- 租金计算 -->
	<select id="getRentData" parameterType="Map" resultType="Map">
		SELECT
		ROUND(SUM(NVL(FRB.BEGINNING_MONEY, 0)), 2) RENT_HJ, --租金总和
		ROUND(NVL(T1.BJ_MONEY, 0) + NVL(T1.LX_MONEY, 0), 2) YS_MONEY, --已收租金
		SUM(DECODE(FRB.BEGINNING_NAME, #{LIXI}, FRB.BEGINNING_MONEY)) -
		SUM(DECODE(FRB.BEGINNING_NAME, #{LIXI}, FRB.BEGINNING_PAID))
		WDQLX_MONEY, --未到期利息
		SUM(DECODE(FRB.BEGINNING_NAME, #{QZZJ}, FRB.BEGINNING_MONEY)) QZZJ_MONEY,
		ROUND(NVL(T2.WS_YQ, 0), 2) WS_YQ, --违约金
		--ROUND(NVL(T1.QZZJ_MONEY, 0), 2) QZZJ_MONEY, --起租租金
		ROUND(NVL(T3.MONEY, 0), 2) FIRST_MONEY, --第一期租金
		ROUND(NVL(T4.MONEY, 0), 2) MQ_MONEY, --每期租金
		MV.PAY_WAY
		FROM FIL_RENT_PLAN_HEAD_MAX_V MV
		LEFT JOIN (SELECT SUM(ROUND(NVL(DE.BEGINNING_MONEY,0),2)) MONEY,
		DE.PAYLIST_CODE
		FROM FI_R_BEGINNING DE
		WHERE DE.BEGINNING_NUM = 1
		GROUP BY DE.PAYLIST_CODE) T3 ON T3.PAYLIST_CODE = MV.PAYLIST_CODE
		LEFT JOIN (SELECT SUM(ROUND(NVL(DE.BEGINNING_MONEY,0),2)) MONEY,
		DE.PAYLIST_CODE
		FROM FI_R_BEGINNING DE
		WHERE DE.BEGINNING_NUM = 2
		GROUP BY DE.PAYLIST_CODE) T4 ON T4.PAYLIST_CODE = MV.PAYLIST_CODE
		LEFT JOIN FI_R_BEGINNING FRB ON MV.PAYLIST_CODE = FRB.PAYLIST_CODE
		LEFT JOIN (SELECT SUM(DECODE(FR.BEGINNING_NAME, #{BENJIN},
		FR.BEGINNING_PAID)) BJ_MONEY,
		SUM(DECODE(FR.BEGINNING_NAME, #{LIXI},FR.BEGINNING_PAID)) LX_MONEY,
		FR.PAYLIST_CODE
		FROM FI_R_BEGINNING FR
		WHERE FR.BEGINNING_FLAG = 1
		GROUP BY FR.PAYLIST_CODE
		ORDER BY FR.PAYLIST_CODE DESC) T1 ON T1.PAYLIST_CODE =
		MV.PAYLIST_CODE
		LEFT JOIN (SELECT ROUND(NVL(SUM(T0.WS_YQ), 0), 2) WS_YQ, T0.PAY_CODE
		FROM (SELECT ROUND(MAX(OV.PENALTY_RECE), 2) -
		ROUND(MAX(OV.PENALTY_PAID), 2) WS_YQ,
		MAX(OV.CREATE_DATE) CREATE_DATE,
		OV.PAY_CODE,
		OV.PERIOD
		FROM FI_OVERDUE OV
		GROUP BY OV.PERIOD, OV.PAY_CODE
		ORDER BY OV.PAY_CODE DESC, OV.PERIOD DESC) T0
		GROUP BY T0.PAY_CODE
		ORDER BY T0.PAY_CODE DESC) T2 ON T2.PAY_CODE =
		MV.PAYLIST_CODE

		LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = MV.PROJECT_ID
		WHERE MV.ID = #{PAYLIST_ID}
		GROUP BY T1.BJ_MONEY, T1.LX_MONEY, T2.WS_YQ, T3.MONEY,T4.MONEY,MV.PAY_WAY
	</select>

	<select id="getBZJData" parameterType="Map" resultType="Map">
		SELECT (SELECT NVL(SUM(BEGINNING_MONEY), 0)
		FROM FI_R_BEGINNING FRB,
		T_SYS_DATA_DICTIONARY TSDD,
		FIL_PROJECT_HEAD FPH
		WHERE TSDD.CODE = FRB.ITEM_FLAG
		AND TSDD.FLAG = '保证金'
		AND FRB.PROJECT_ID = FPH.ID
		AND FPH.PRO_CODE = #{PRO_CODE}) AS BZJ,
		(SELECT NVL(SUM(BEGINNING_MONEY), 0)
		FROM FI_R_BEGINNING FRB,
		T_SYS_DATA_DICTIONARY TSDD,
		FIL_PROJECT_HEAD FPH
		WHERE TSDD.CODE = FRB.ITEM_FLAG
		AND TSDD.FLAG = 'DB保证金'
		AND FRB.PROJECT_ID = FPH.ID
		AND FPH.PRO_CODE = #{PRO_CODE}) AS DBBZJ
		FROM DUAL
	</select>

	<insert id="buyBackOther" parameterType="Map">
		insert into fil_rent_plan_detail (
		ID
		,ITEM_FLAG
		,PAY_ID
		<if test="ITEM_NAME!=null and ITEM_NAME!=''">,ITEM_NAME</if>
		<if test="ITEM_MONEY!=null and ITEM_MONEY!=''">,ITEM_MONEY</if>
		) values(
		seq_fil_rent_plan_detail.nextval
		,4
		,#{NEWID}
		<if test="ITEM_NAME!=null and ITEM_NAME!=''">,#{ITEM_NAME}</if>
		<if test="ITEM_MONEY!=null and ITEM_MONEY!=''">,#{ITEM_MONEY}</if>
		)
	</insert>

	<select id="queryPayInfo" parameterType="Map" resultType="Map">
		SELECT
		sum(t.item_money) item_money FROM fil_rent_plan_detail t
		where trunc(t.pay_date)>trunc(to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'))
		and t.item_name='本金' and t.pay_id=#{PAY_ID}		
	</select>


	<select id="getProData1" parameterType="Map" resultType="Map">
		SELECT H.ID PRO_ID,
		H.PRO_NAME,
		H.PRO_CODE,
		VESC.SUPPLIER_NAMES SUP_SHORTNAME,
		VESC.COMPANY_NAMES COMPANY_NAME,
		VESC.PRODUCT_NAMES PRODUCT_NAME,
		VESC.ENGINE_TYPES ENGINE_TYPE,
		VESC.WHOLE_ENGINE_CODES WHOLE_ENGINE_CODE,
		MV.LEASE_TOPRIC,
		to_char(MV.START_DATE, 'yyyy-MM-dd') START_DATE,
		MV.LEASE_TERM, --期数
		MV.LEASE_PERIOD, --还款周期
		CL.ID CLIENT_ID,
		CL.NAME CUST_NAME,
		nvl(round(FM.ITEM_MONEY, 2), 0) MQ_MONEY, --每期租金
		nvl(round(FM1.ITEM_MONEY, 2), 0) FIRST_MONEY, --第一期租金
		MV.ID PAY_ID,
		MV.FIRST_MONEY_ALL,
		(SELECT sum(nvl(FRB.BEGINNING_MONEY,0)) - SUM(NVL(FRB.BEGINNING_PAID,0)) FROM
		FI_R_BEGINNING FRB WHERE FRB.ITEM_FLAG =2 AND
		FRB.PAYLIST_CODE=MV.PAYLIST_CODE and FRB.beginning_name = '本金') wh_bj
		--未还租金
		FROM FIL_PROJECT_HEAD H
		INNER JOIN FIL_RENT_PLAN_HEAD_MAX_V MV ON MV.PROJECT_ID = H.ID
		LEFT JOIN V_EQUIPMENT_SUPS_COMS VESC ON MV.PAYLIST_CODE=VESC.PAYLIST_CODE
		LEFT JOIN (SELECT SUM(D.BEGINNING_MONEY) ITEM_MONEY, D.PAYLIST_CODE
		FROM fi_r_beginning D
		WHERE D.BEGINNING_NUM = 2
		AND D.ITEM_FLAG = 2
		GROUP BY D.PAYLIST_CODE) FM ON FM.PAYLIST_CODE = MV.PAYLIST_CODE
		LEFT JOIN
		(SELECT SUM(D.BEGINNING_MONEY) ITEM_MONEY, D.PAYLIST_CODE
		FROM fi_r_beginning D
		WHERE D.BEGINNING_NUM = 1
		GROUP BY D.PAYLIST_CODE) FM1 ON FM1.PAYLIST_CODE = MV.PAYLIST_CODE
		LEFT JOIN FIL_CUST_CLIENT CL ON CL.ID = H.CLIENT_ID
		WHERE MV.PAYLIST_CODE=#{PAYLIST_CODE}
    </select>

	<select id="getBuyBackData1" parameterType="Map" resultType="Map">
		SELECT B.ID,
		B.PAY_ID,
		TO_CHAR(B.ACCOUNT_DATE, 'YYYY-MM-DD') ACCOUNT_DATE,
		B.BUY_BACK_STATUS,
		B.PAYLIST_CODE,
		B.PROJECT_ID,
		NVL(B.RENT_TOTAL,0) RENT_TOTAL,
		decode(b.is_leave,0,b.nominalprice_dk,0)+decode(b.is_deposit,0,b.caution_dk,0)
		dk,
		(SELECT nvl(sum(nvl(t.item_money,0)),0)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.PAY_ID = B.PAY_ID
		and t.item_name not like '%留购%'
		and t.item_name like '回购%') other_money,
		NVL(B.RENT_PAID,0) RENT_PAID,
		NVL(B.RENT_LEFT,0) RENT_LEFT,
		NVL(B.RENT_PAID_AMOUNT,0) RENT_PAID_AMOUNT,
		NVL(B.NOMINALPRICE_DK,0) NOMINALPRICE_DK,
		NVL(B.CAUTION_DK,0) CAUTION_DK,
		NVL(B.NOMINALPRICE_NEW,0) NOMINALPRICE_NEW,
		NVL(B.INTEREST_UNDO,0) INTEREST_UNDO,
		NVL(B.CORPUS_UNDO,0) CORPUS_UNDO,
		NVL(B.PENALTY_AMT,0) PENALTY_AMT,
		NVL(B.SUM_AMT_BACK,0) SUM_AMT_BACK,
		B.IS_END_STATUS,
		B.IS_DEPOSIT,
		B.IS_LEAVE,
		B.IS_DBDEPOSIT,
		NVL(B.DBDEPOSIT_DK,0) DBDEPOSIT_DK,
		NVL(B.TAX_MONEY,0) TAX_MONEY,
		NVL(B.HG_SXF,0) HG_SXF,
		B.REALITY_PAYEE,
		NVL(B.LILVJM,0) LILVJM
		FROM FIL_BUY_BACK B
		WHERE B.ID = #{BUY_BACK_ID}
    </select>

	<select id="getFileHG" parameterType="Map" resultType="Map">
		SELECT T.*, T.ROWID FROM FIL_PROJECT_FILE T WHERE T.PROJECT_ID
		=#{PROJECT_ID} and t.TPM_TYPE =#{HGFILE}
    </select>
	<select id="getHG_YS_MONEY" parameterType="Map" resultType="Map">
		SELECT t.sum_amt_back YS_MONEY FROM fil_buy_back t
		,fil_rent_plan_head_bas_max__v f where t.pay_id = f.ID and
		f.PAYLIST_CODE=#{PAYLIST_CODE}
    </select>

	<select id="HG_YS_MONEY" parameterType="Map" resultType="double">
		SELECT
		(SELECT sum(NVL(BEGINNING_MONEY, 0)) BEGINNING_MONEY
		FROM (SELECT NULL BID,
		T.PERIOD BEGINNING_NUM,
		'违约金' BEGINNING_NAME,
		nvl(T.PENALTY_RECE, 0) - nvl(T.PENALTY_PAID, 0) BEGINNING_MONEY,
		1 TYPE
		FROM FI_OVERDUE T
		WHERE T.PAY_CODE = #{PAYLIST_CODE}
		AND to_char(T.CREATE_DATE, 'yyyy-mm-dd') =
		(SELECT to_char(max(fpp1.account_date), 'yyyy-mm-dd')
		FROM fil_buy_back fpp1
		where fpp1.paylist_code = #{PAYLIST_CODE})
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY-t.beginning_paid BEGINNING_MONEY,
		2 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.ITEM_FLAG = 4
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid BEGINNING_MONEY,
		3 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '利息'
		AND T.ITEM_FLAG = 2
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid BEGINNING_MONEY,
		4 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY != T.BEGINNING_PAID
		AND T.BEGINNING_FLAG =0
		AND T.BEGINNING_NAME = '本金'
		AND T.ITEM_FLAG = 2)
		WHERE BEGINNING_MONEY != 0)
		-
		decode(t.is_deposit,0,t.CAUTION_DK,0)-
		decode(t.is_leave,0,t.nominalprice_dk,0)-
		decode(t.is_dbdeposit,0,t.dbdeposit_dk,0) HG_YS_MONEY
		FROM fil_buy_back
		t where t.paylist_code=#{PAYLIST_CODE} and t.is_end_status=0
    </select>
	<select id="JQ_YS_MONEY" parameterType="Map" resultType="double">
		SELECT
		distinct(SELECT sum(NVL(BEGINNING_MONEY, 0)) BEGINNING_MONEY
		FROM (SELECT NULL BID,
		T.PERIOD BEGINNING_NUM,
		'违约金' BEGINNING_NAME,
		nvl(T.PENALTY_RECE, 0) - nvl(T.PENALTY_PAID, 0) BEGINNING_MONEY,
		1 TYPE
		FROM FI_OVERDUE T
		WHERE T.PAY_CODE = #{PAYLIST_CODE}
		AND to_char(T.CREATE_DATE, 'yyyy-mm-dd') =
		(SELECT to_char(max(fpp1.account_date), 'yyyy-mm-dd')
		FROM fil_paychange_parameter fpp1,fil_rent_plan_head frp
		where fpp1.pay_id = frp.id
		and frp.paylist_code = #{PAYLIST_CODE})
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid BEGINNING_MONEY,
		3 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '利息'
		AND T.ITEM_FLAG = 2
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid BEGINNING_MONEY,
		4 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '本金'
		AND T.ITEM_FLAG = 2)
		WHERE BEGINNING_MONEY > 0)
		-
		nvl(t.CAUTION_DK,0)
		from fil_paychange_parameter t,fil_rent_plan_head f where f.id = t.pay_id
		and f.paylist_code=#{PAYLIST_CODE} and t.is_end_status =0
    </select>


	<insert id="doInsertFileHG" parameterType="Map">
		INSERT INTO FIL_PROJECT_FILE
		(ID,
		TPM_TYPE,
		NAME,
		PDF_PATH,
		PROJECT_ID,
		PAYLIST_CODE,
		CREATE_CODE,
		CREATE_DATE,
		FILE_TYPE,
		CLIENT_ID)
		VALUES
		(SEQ_FIL_PROJECT_FILE.NEXTVAL,
		#{TPM_TYPE},
		#{NAME},
		#{PDF_PATH},
		#{PROJECT_ID},
		#{PAYLIST_CODE},
		#{USERCODE},
		SYSDATE,
		#{FILE_TYPE},
		#{CLIENT_ID})    	
    </insert>

	<!--查询结算日往后的利息-->
	<select id="queryPayInterests" parameterType="Map" resultType="Map">
		SELECT sum(t.item_money) item_money FROM fil_rent_plan_detail t
		where
		trunc(t.pay_date)>trunc(ADD_MONTHS(to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'),1))
		and t.item_name='利息' and t.pay_id=#{PAY_ID}		
	</select>
	<!--保证金-->
	<select id="queryPayDeposit" parameterType="Map" resultType="Map">
		SELECT sum(t.item_money) item_money FROM fil_rent_plan_detail t
		where t.item_name='保证金' and t.pay_id=#{PAY_ID}		
	</select>
	<!--db保证金-->
	<select id="queryPayDBDeposit" parameterType="Map" resultType="Map">
		SELECT sum(t.item_money) item_money FROM fil_rent_plan_detail t
		where t.item_name='DB保证金' and t.pay_id=#{PAY_ID}		
	</select>
	<!--留购价-->
	<select id="queryPayLeave" parameterType="Map" resultType="Map">
		SELECT sum(t.item_money) item_money FROM fil_rent_plan_detail t
		where t.item_name like '留购价%' and t.pay_id=#{PAY_ID}				
	</select>
	<!--分期回购查询逾期信息-->
	<select id="queryFI_OVERDUE" parameterType="Map" resultType="Map">
		SELECT COUNT(*) COUNT_,
		FO.PAY_CODE,
		SUM(FO.PENALTY_RECE)-SUM(FO.PENALTY_PAID) PENALTY_RECE,
		SUM(FO.RENT_RECE)-SUM(FO.RENT_PAID) RENT_RECE
		FROM FI_OVERDUE FO
		WHERE FO.CREATE_DATE = TRUNC(SYSDATE) AND
		FO.PENALTY_RECE-FO.PENALTY_PAID>0.2
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		AND FO.PAY_CODE = #{PAY_CODE}
		GROUP BY FO.PAY_CODE	
	</select>
	<select id="penaltyaAccountsDate1" parameterType="map"
		resultType="Map">
		SELECT SUM(T.BEGINNING_MONEY)BEGINNING_MONEY ,
		NVL(SUM(T.BEGINNING_PAID),0)
		BEGINNING_PAID,T.BEGINNING_NUM,to_char(T.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')
		BEGINNING_RECEIVE_DATA FROM FI_R_BEGINNING T
		where t.item_flag = 2 and t.beginning_flag &lt;>1 and
		trunc(t.beginning_receive_data) &lt;=
		trunc(to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'))
		and
		t.paylist_code=#{PAYLIST_CODE} group by
		t.beginning_num,t.beginning_receive_data
	</select>

	<delete id="delete_penaltyaAccountsDate" parameterType="map">
		delete fi_overdue t where trunc(t.create_date) > trunc(sysdate) and
		t.pay_code=#{PAYLIST_CODE}
	</delete>
	<delete id="delete_penaltyaAccountsDate2" parameterType="map">
		delete fi_overdue t where trunc(t.create_date) = trunc(sysdate) and
		t.pay_code=#{PAY_CODE} and t.period = #{PERIOD}
	</delete>
	<select id="query_fi_overdue_today" parameterType="map"
		resultType="Map">
		SELECT ID,
		PAY_CODE,
		PERIOD,
		RENT_RECE,
		RENT_PAID,
		PENALTY_RECE,
		PENALTY_PAID,
		to_char(CREATE_DATE,'yyyy-mm-dd') CREATE_DATE,
		RENT_DATE,
		PENALTY_DAY,
		DUE_STATUS,
		PROJECT_ID,
		CUST_NAME,
		SUP,
		PAY_START,
		EQUI,
		to_char(PENALTY_DATE,'yyyy-mm-dd') PENALTY_DATE
		FROM fi_overdue t where trunc(t.create_date) =
		trunc(sysdate) and t.pay_code=#{PAYLIST_CODE} and t.period =
		#{BEGINNING_NUM}
	</select>
	<select id="query_fi_overdue_ACCOUNT_DATE" parameterType="map"
		resultType="double">
		SELECT
		sum(nvl(t.penalty_rece,0))-sum(nvl(t.penalty_paid,0)) penalty_rece
		FROM fi_overdue t where t.pay_code=#{PAYLIST_CODE} and
		to_char(t.create_date,'yyyy-mm-dd') = #{ACCOUNT_DATE}
	</select>

	<select id="penaltyaInfo" parameterType="map" resultType="Map">
		SELECT
		FH.ENGINE_TYPE,to_char(FH.DELIVER_DATE,'yyyy-mm-dd')
		DELIVER_DATE,TSS.SUP_NAME,FCC.NAME,FH.ID PROJECT_ID FROM
		FIL_PROJECT_HEAD FH
		INNER JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V T ON T.PROJECT_ID = FH.ID
		LEFT JOIN
		FIL_CUST_CLIENT FCC ON FCC.ID = FH.CLIENT_ID
		LEFT JOIN T_SYS_SUPPLIERS
		TSS ON TSS.SUP_ID = FH.SUP_ID
		WHERE T.PAYLIST_CODE=#{PAYLIST_CODE}
	</select>
	<insert id="insert_penaltyaInfo" parameterType="Map">
		INSERT INTO FI_OVERDUE
		(ID
		<if test="PAY_CODE != null">,PAY_CODE</if>
		<if test="PERIOD != null">,PERIOD</if>
		<if test="RENT_RECE != null">,RENT_RECE</if>
		<if test="RENT_PAID != null">,RENT_PAID</if>
		<if test="PENALTY_RECE != null">,PENALTY_RECE</if>
		<if test="PENALTY_PAID != null">,PENALTY_PAID</if>
		<if test="CREATE_DATE != null and CREATE_DATE!=''">,CREATE_DATE</if>
		<if test="RENT_DATE != null and RENT_DATE!=''">,RENT_DATE</if>
		<if test="PENALTY_DAY != null">,PENALTY_DAY</if>
		<if test="DUE_STATUS != null">,DUE_STATUS</if>
		<if test="PROJECT_ID != null">,PROJECT_ID</if>
		<if test="CUST_NAME != null">,CUST_NAME</if>
		<if test="SUP != null">,SUP</if>
		<if test="PAY_START != null and PAY_START!=''">,PAY_START</if>
		<if test="EQUI != null">,EQUI</if>
		<if test="PENALTY_DATE != null and PENALTY_DATE != ''">,PENALTY_DATE</if>
		<if test="OVER_TYPE != null">,OVER_TYPE</if>
		)
		VALUES
		(SEQ_FI_OVERDUE.NEXTVAL
		<if test="PAY_CODE != null">,#{PAY_CODE}</if>
		<if test="PERIOD != null">,#{PERIOD}</if>
		<if test="RENT_RECE != null">,#{RENT_RECE}</if>
		<if test="RENT_PAID != null">,#{RENT_PAID}</if>
		<if test="PENALTY_RECE != null">,#{PENALTY_RECE}</if>
		<if test="PENALTY_PAID != null">,#{PENALTY_PAID}</if>
		<if test="CREATE_DATE != null and CREATE_DATE!=''">,to_date(#{CREATE_DATE},'yyyy-mm-dd')</if>
		<if test="RENT_DATE != null and RENT_DATE!=''">,to_date(#{RENT_DATE},'yyyy-mm-dd')</if>
		<if test="PENALTY_DAY != null">,#{PENALTY_DAY}</if>
		<if test="DUE_STATUS != null">,#{DUE_STATUS}</if>
		<if test="PROJECT_ID != null">,#{PROJECT_ID}</if>
		<if test="CUST_NAME != null">,#{CUST_NAME}</if>
		<if test="SUP != null">,#{SUP}</if>
		<if test="PAY_START != null and PAY_START!=''">,to_date(#{PAY_START},'yyyy-mm-dd')</if>
		<if test="EQUI != null">,#{EQUI}</if>
		<if test="PENALTY_DATE != null and PENALTY_DATE != ''">,to_date(#{PENALTY_DATE},'yyyy-mm-dd')</if>
		<if test="OVER_TYPE != null">,#{OVER_TYPE}</if>
		)
	</insert>
	<insert id="insert_penaltyaInfo2" parameterType="map">
		insert into fi_overdue
		(ID,
		PAY_CODE,
		PERIOD,
		RENT_RECE,
		RENT_PAID,
		PENALTY_RECE,
		PENALTY_PAID,
		CREATE_DATE,
		RENT_DATE,
		PENALTY_DAY,
		DUE_STATUS,
		PROJECT_ID,
		CUST_NAME,
		SUP,
		PAY_START,
		EQUI,
		PENALTY_DATE,
		OVER_TYPE,
		TEMP_LC )
		SELECT
		seq_fi_overdue.nextval,
		PAY_CODE ,
		PERIOD ,
		RENT_RECE ,
		RENT_PAID ,
		PENALTY_RECE ,
		PENALTY_PAID ,
		to_date(#{ACCOUNT_DATE},'yyyy-mm-dd') ,
		RENT_DATE ,
		PENALTY_DAY ,
		DUE_STATUS ,
		PROJECT_ID ,
		CUST_NAME ,
		SUP ,
		PAY_START ,
		EQUI ,
		PENALTY_DATE
		,
		OVER_TYPE ,
		TEMP_LC
		FROM fi_overdue t where t.create_date = trunc(sysdate) and
		t.rent_paid>=t.rent_rece and t.pay_code=#{PAYLIST_CODE}
    </insert>
	<select id="deleteAlreadyData" parameterType="map" resultType="Map">
		SELECT * FROM fil_rent_plan_head_bas_max__v t where
		t.PAYLIST_CODE=#{PAYLIST_CODE}
	</select>
	<select id="selectRepoData" parameterType="map" resultType="Map">
		SELECT FOO.COUNT_,
		to_char(SYSDATE,'YYYY-MM-DD') NOW_DATE,
		FOO.PENALTY_RECE,
		FOO.RENT_RECE,
		to_char(FH.SIGNED_DATE,'YYYY-MM-DD') SIGNED_DATE,
		nvl(FCC.Id_Card_No,fcc.oragnization_code) CARD_ORAGNIZATION_CODE,
		(SELECT tss1.sup_name FROM t_sys_suppliers tss1 where tss1.sup_id =
		nvl(fbb.reality_payee,FH.Sup_Id)) SUPPLIER_NAMES, --供应商
		FH.PRO_CODE, --项目编号
		TO_CHAR(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),
		'YYYY-MM-DD') ACCOUNT_DATE, --结算日
		--ADD_MONTHS(decode(fbb.account_date,null,sysdate,fbb.account_date),1),
		TO_CHAR(FBB.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE, --创建日期
		FCC.NAME, --承租人名称
		VFE.PRODUCT_NAMES, --租赁物
		--VFE.SPEC_NAME, --型号
		VFE.WHOLE_ENGINE_CODES, --出厂编号
		VFE.LEASE_TOPRIC, --租赁物总价值
		FH.LEASE_TERM, --租赁周期
		FH.LEASE_PERIOD,
		TO_CHAR(FH.DELIVER_DATE, 'YYYY-MM-DD') DELIVER_DATE, --起租日
		(SELECT SUM(T.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.ITEM_FLAG = 1
		AND T.ITEM_NAME LIKE '%租金%'
		AND T.PAY_ID = FRP.ID)START_ZJ,--起租租金
		(SELECT SUM(T1.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T1
		WHERE T1.ITEM_NAME = '租金'
		AND T1.PAY_ID = FRP.ID) SUM_ZJ ,--租金总计
		(SELECT SUM(T.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL T WHERE t.item_name like
		'回购%' AND T.PAY_ID=FRP.ID and t.item_name not like '%留购%')
		qt_fy,--其他费用合计
		(SELECT MAX(T.TPM_CODE)
		FROM FIL_PROJECT_FILE T
		WHERE T.PROJECT_ID = FRP.PROJECT_ID
		AND T.TPM_TYPE = '融资租赁合同'
		AND T.FILE_TYPE = 1) TPM_CODE, --SFNXSZ130012-A00
		--(SELECT DECODE(MAX(T.VALUE_STR), '1', '网银支付', '非网银支付')
		-- FROM FIL_PROJECT_SCHEME T
		-- WHERE T.PROJECT_ID = FRP.PROJECT_ID
		-- AND T.KEY_NAME_ZN LIKE '%租金%' || '%方式%') PAYMENT_MODE, --租金付款方式
		(SELECT NVL(MAX(FRB.BEGINNING_NUM), 0)
		FROM FI_R_BEGINNING FRB
		WHERE FRB.ITEM_FLAG = 2
		AND FRB.PAYLIST_CODE = FRP.PAYLIST_CODE
		AND FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID
		AND FRB.BEGINNING_MONEY > 0) BEGINNING_NUM, --已还的最大期次

		(SELECT min(t.period_num)
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) >
		trunc(ADD_MONTHS(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),1-nvl(fbb.MITIGATE,0))))
		dqqc, --当前期次

		(SELECT SUM(NVL(FRB.BEGINNING_PAID, 0))
		FROM FI_R_BEGINNING FRB
		WHERE FRB.ITEM_FLAG = 2
		AND FRB.PAYLIST_CODE = FRP.PAYLIST_CODE) BEGINNING_PAID, --已还租金
		(SELECT SUM(T.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.PAY_ID = FRP.id
		and t.item_flag=1
		AND T.ITEM_NAME LIKE '%留购%') LEAVE, --留购价
		fbb.NOMINALPRICE_NEW hg_LEAVE, --回购留购价
		(SELECT to_char(min(t.pay_date), 'yyyy-mm-dd')
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) > trunc(sysdate)) UNPAID_MIN_NUM, --未到期租金最小期次
		(SELECT sum(t.ITEM_MONEY)
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) > trunc(sysdate)) UNPAID_INTEREST, --未到期租金利息
		(SELECT sum(t.ITEM_MONEY)
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) >
		trunc(ADD_MONTHS(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),1-nvl(fbb.MITIGATE,0))))
		UNPAID_INTEREST1, --未到期租金利息
		decode(fbb.is_deposit,1,0,(SELECT SUM(T.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.PAY_ID = FRP.id
		AND T.ITEM_NAME = '保证金')) DEPOSIT --保证金
		FROM FIL_RENT_PLAN_HEAD_MAX_V FRP
		LEFT JOIN V_EQUIPMENT_SUPS_COMS VFE
		ON FRP.PAYLIST_CODE = VFE.PAYLIST_CODE
		LEFT JOIN FIL_PROJECT_HEAD FH
		ON FRP.PROJECT_ID = FH.ID
		LEFT JOIN FIL_CUST_CLIENT FCC
		ON FH.CLIENT_ID = FCC.ID
		LEFT JOIN fil_buy_back fbb on fbb.paylist_code=FRP.PAYLIST_CODE
		left join (SELECT trph.paylist_code, fpp1.account_date FROM
		fil_paychange_parameter fpp1 left join fil_rent_plan_head trph on
		trph.id=fpp1.pay_id and fpp1.param_name='提前结清') fpp on
		fpp.paylist_code=FRP.PAYLIST_CODE
		LEFT JOIN (SELECT COUNT(*) COUNT_,
		tt1.PAY_CODE,
		SUM(tt1.PENALTY_RECE) - SUM(tt1.PENALTY_PAID) PENALTY_RECE,
		SUM(tt1.RENT_RECE) - SUM(tt1.RENT_PAID) RENT_RECE
		FROM (
		SELECT fo.*
		FROM FI_OVERDUE FO
		LEFT JOIN fil_buy_back fbb on fbb.paylist_code=FO.Pay_Code
		left join (SELECT trph.paylist_code, fpp1.account_date FROM
		fil_paychange_parameter fpp1 left join fil_rent_plan_head trph on
		trph.id=fpp1.pay_id) fpp
		on fpp.paylist_code=FO.Pay_Code
		WHERE TO_CHAR(fo.create_date, 'YYYY-MM-DD') =
		TO_CHAR(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),
		'YYYY-MM-DD')
		AND abs(FO.PENALTY_RECE - FO.PENALTY_PAID) > 0.6
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		) tt1 GROUP BY tt1.PAY_CODE
		HAVING COUNT(*) >= 1
		) FOO
		ON FOO.PAY_CODE = FRP.PAYLIST_CODE
		where frp.PAYLIST_CODE=#{PAYLIST_CODE} order by account_date desc
	</select>
	<select id="selectRepoData11" parameterType="map" resultType="Map">
		SELECT FOO.COUNT_,
		to_char(SYSDATE,'YYYY-MM-DD') NOW_DATE,
		fbb.PENALTY_AMT PENALTY_RECE,
		FOO.RENT_RECE,
		to_char(FH.SIGNED_DATE,'YYYY-MM-DD') SIGNED_DATE,
		nvl(FCC.Id_Card_No,fcc.oragnization_code) CARD_ORAGNIZATION_CODE,
		(SELECT tss1.sup_name FROM t_sys_suppliers tss1 where tss1.sup_id =
		nvl(fbb.reality_payee,FH.Sup_Id)) SUPPLIER_NAMES, --供应商
		FH.PRO_CODE, --项目编号
		TO_CHAR(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),
		'YYYY-MM-DD') ACCOUNT_DATE, --结算日
		--ADD_MONTHS(decode(fbb.account_date,null,sysdate,fbb.account_date),1),
		TO_CHAR(FBB.CREATE_DATE, 'YYYY-MM-DD') CREATE_DATE, --创建日期
		FCC.NAME, --承租人名称
		VFE.PRODUCT_NAMES, --租赁物
		VFE.SPEC_NAME, --型号
		VFE.WHOLE_ENGINE_CODES, --出厂编号
		VFE.LEASE_TOPRIC, --租赁物总价值
		FH.LEASE_TERM, --租赁周期
		FH.LEASE_PERIOD,
		TO_CHAR(FH.DELIVER_DATE, 'YYYY-MM-DD') DELIVER_DATE, --起租日
		(SELECT SUM(T.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.ITEM_FLAG = 1
		AND T.ITEM_NAME LIKE '%租金%'
		AND T.PAY_ID = FRP.ID)START_ZJ,--起租租金
		(SELECT SUM(T1.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T1
		WHERE T1.ITEM_NAME = '租金'
		AND T1.PAY_ID = FRP.ID) SUM_ZJ ,--租金总计
		(SELECT SUM(T.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL T WHERE t.item_name like
		'回购%' AND T.PAY_ID=FRP.ID and t.item_name not like '%留购%')
		qt_fy,--其他费用合计
		(SELECT MAX(T.TPM_CODE)
		FROM FIL_PROJECT_FILE T
		WHERE T.PROJECT_ID = FRP.PROJECT_ID
		AND T.TPM_TYPE = '融资租赁合同'
		AND T.FILE_TYPE = 1) TPM_CODE, --SFNXSZ130012-A00
		(SELECT DECODE(MAX(T.VALUE_STR), '1', '网银支付', '非网银支付')
		FROM FIL_PROJECT_SCHEME T
		WHERE T.PROJECT_ID = FRP.PROJECT_ID
		AND T.KEY_NAME_ZN LIKE '%租金%' || '%方式%') PAYMENT_MODE, --租金付款方式
		(SELECT NVL(MAX(FRB.BEGINNING_NUM), 0)
		FROM FI_R_BEGINNING FRB
		WHERE FRB.ITEM_FLAG = 2
		AND FRB.PAYLIST_CODE = FRP.PAYLIST_CODE
		AND FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID
		AND FRB.BEGINNING_MONEY > 0) BEGINNING_NUM, --已还的最大期次

		(SELECT min(t.period_num)
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) >
		trunc(ADD_MONTHS(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),1-nvl(fbb.MITIGATE,0))))
		dqqc, --当前期次

		(SELECT SUM(NVL(FRB.BEGINNING_PAID, 0))
		FROM FI_R_BEGINNING FRB
		WHERE FRB.ITEM_FLAG = 2
		AND FRB.PAYLIST_CODE = FRP.PAYLIST_CODE) BEGINNING_PAID, --已还租金
		(SELECT SUM(T.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.PAY_ID = FRP.id
		and t.item_flag=1
		AND T.ITEM_NAME LIKE '%留购%') LEAVE, --留购价
		fbb.NOMINALPRICE_NEW hg_LEAVE, --回购留购价
		(SELECT to_char(min(t.pay_date), 'yyyy-mm-dd')
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) > trunc(sysdate)) UNPAID_MIN_NUM, --未到期租金最小期次
		(SELECT sum(t.ITEM_MONEY)
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) > trunc(sysdate)) UNPAID_INTEREST, --未到期租金利息
		(SELECT sum(t.ITEM_MONEY)
		FROM fil_rent_plan_detail t
		where t.pay_id = FRP.id
		and t.item_flag = 2
		and t.item_name = '利息'
		and trunc(t.pay_date) >
		trunc(ADD_MONTHS(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),1-nvl(fbb.MITIGATE,0))))
		UNPAID_INTEREST1, --未到期租金利息
		decode(fbb.is_deposit,1,0,(SELECT SUM(T.ITEM_MONEY)
		FROM FIL_RENT_PLAN_DETAIL T
		WHERE T.PAY_ID = FRP.id
		AND T.ITEM_NAME = '保证金')) DEPOSIT --保证金
		FROM FIL_RENT_PLAN_HEAD_MAX_V FRP
		LEFT JOIN V_EQUIPMENT_SUPS_COMS VFE
		ON FRP.PAYLIST_CODE = VFE.PAYLIST_CODE
		LEFT JOIN FIL_PROJECT_HEAD FH
		ON FRP.PROJECT_ID = FH.ID
		LEFT JOIN FIL_CUST_CLIENT FCC
		ON FH.CLIENT_ID = FCC.ID
		LEFT JOIN fil_buy_back fbb on fbb.paylist_code=FRP.PAYLIST_CODE
		left join (SELECT trph.paylist_code, fpp1.account_date FROM
		fil_paychange_parameter fpp1 left join fil_rent_plan_head trph on
		trph.id=fpp1.pay_id) fpp on fpp.paylist_code=FRP.PAYLIST_CODE
		LEFT JOIN (SELECT COUNT(*) COUNT_,
		tt1.PAY_CODE,
		SUM(tt1.PENALTY_RECE) - SUM(tt1.PENALTY_PAID) PENALTY_RECE,
		SUM(tt1.RENT_RECE) - SUM(tt1.RENT_PAID) RENT_RECE
		FROM (
		SELECT fo.*
		FROM FI_OVERDUE FO
		LEFT JOIN fil_buy_back fbb on fbb.paylist_code=FO.Pay_Code
		left join (SELECT trph.paylist_code, fpp1.account_date FROM
		fil_paychange_parameter fpp1 left join fil_rent_plan_head trph on
		trph.id=fpp1.pay_id) fpp
		on fpp.paylist_code=FO.Pay_Code
		WHERE TO_CHAR(fo.create_date, 'YYYY-MM-DD') =
		TO_CHAR(decode(FBB.ACCOUNT_DATE,'',fpp.account_date,FBB.ACCOUNT_DATE),
		'YYYY-MM-DD')
		AND abs(FO.PENALTY_RECE - FO.PENALTY_PAID) > 0.6
		--应付和实付相差大于0.2元（排除了已还计算罚息的时候小数点后面的计算，
		) tt1 GROUP BY tt1.PAY_CODE
		HAVING COUNT(*) >= 1
		) FOO
		ON FOO.PAY_CODE = FRP.PAYLIST_CODE
		where frp.PAYLIST_CODE=#{PAYLIST_CODE}
	</select>
	<select id="getCustName" parameterType="map" resultType="Map">
		SELECT t.sup_id id,t.sup_shortname name FROM t_sys_suppliers t where
		t.sup_shortname like '%'||#{pv}||'%' or t.SUP_NAME like '%'||#{pv}||'%'
	</select>
	<delete id="deleteAlreadyData_detail" parameterType="map">
		delete fil_rent_plan_detail t where t.pay_id=#{PAY_ID}
	</delete>
	<delete id="deleteAlreadyData_buy_back" parameterType="map">
		delete fil_buy_back t where t.pay_id=#{PAY_ID}
	</delete>
	<delete id="deleteAlreadyData_head" parameterType="map">
		delete
		fil_rent_plan_head t where t.id=#{PAY_ID}
	</delete>

	<delete id="del_fil_buy_back" parameterType="map">
		delete
		fil_buy_back t where t.paylist_code=#{PAY_CODE}
	</delete>
	<delete id="del_fil_buy_back_status0" parameterType="String">
		delete fil_buy_back t where t.paylist_code=#{PAYLIST_CODE} and
		t.buy_back_status=0
	</delete>

	<update id="toUpdataProStatus" parameterType="Map">
		update
		fil_project_head set id=#{PROJECT_ID}
		,STATUS = (SELECT
		nvl(t.hg_remark,35) FROM fil_buy_back t where
		t.paylist_code=#{PAYLIST_CODE})
		,END_STATUS = (SELECT
		nvl(t.hg_remark,35) FROM fil_buy_back t where
		t.paylist_code=#{PAYLIST_CODE})
		where id=${PROJECT_ID}
	</update>
	<update id="toUpdatePlanStatus" parameterType="Map">
		update
		fil_rent_plan_head_bas_max__v v set v.STATUS=0 where v.PAYLIST_CODE =
		(SELECT distinct(t.paylist_code) FROM fil_buy_back t where
		t.paylist_code=#{PAYLIST_CODE} and t.buy_back_status=2)
	</update>

	<select id="query_fcc_name_sup1" parameterType="map" resultType="map">
		SELECT fcc.name name1,t.REALITY_PAYEE FROM fil_buy_back t
		left join
		t_sys_suppliers tss on tss.sup_id = t.REALITY_PAYEE
		left join
		fil_cust_client fcc on tss.sup_name = fcc.name
		where t.pay_id=#{PAY_ID}
	</select>
	<select id="query_id_name" parameterType="map" resultType="int">
		SELECT t.id FROM fil_cust_client t where t.name = #{NAME1}
	</select>

	<select id="query_fcc_ORG_ID" parameterType="map" resultType="map">
		SELECT fcc.NAME,
		fcc.CREATE_CODE,--创建人编号
		fcc.CLERK_CODE,--客户经理编号
		fcc.CLERK_NAME,--客户名称
		fcc.ORG_ID--
		FROM fil_rent_plan_head
		frh,fil_project_head fph,fil_cust_client fcc
		where frh.project_id=fph.id and fcc.id=fph.client_id and frh.id=#{PAY_ID}
	</select>
	<select id="select_fil_paychange_parameter" parameterType="map"
		resultType="map">
		SELECT *
		FROM (SELECT fpp.*, rownum rnum
		FROM fil_paychange_parameter fpp, fil_rent_plan_head t
		where fpp.pay_id = t.ID
		and fpp.param_name='提前结清'
		and t.PAYLIST_CODE = #{PAYLIST_CODE}
		order by fpp.id) tt
		where tt.rnum = 1
	</select>
	<update id="toUpdata_fcc_ORG_ID" parameterType="map">
		update fil_cust_client set ORG_ID=#{ORG_ID}
		<if test="CLERK_CODE!=null">,CLERK_CODE = #{CLERK_CODE}</if>
		<if test="CLERK_NAME!=null">,CLERK_NAME = #{CLERK_NAME}</if>
		<if test="CREATE_CODE!=null">,CREATE_CODE = #{CREATE_CODE}</if>
		where id=#{NEWID}
	</update>
	<update id="update_sup_third" parameterType="map">
		update fil_buy_back
		t set t.REALITY_PAYEE =
		(SELECT fp.sup_id FROM fil_project_head fp,fil_rent_plan_head fr where
		fr.project_id=fp.id and fr.id =#{PAY_ID} ) where t.pay_id=#{PAY_ID}
	</update>
	<insert id="insert_fil_cust_client_sup" parameterType="map">
		<selectKey resultType="int" order="BEFORE" keyProperty="NEWID">
			SELECT seq_fil_cust_client.nextval FROM DUAL
		</selectKey>
		insert into fil_cust_client (id,
		name,type,registe_date,registe_capital,registe_address,status,province,city,cust_id
		)
		select #{NEWID},
		tt.sup_name,'LP',tt.setup_date,tt.registe_capital,tt.sup_address, 0
		,tt.prov_id,tt.city_id,#{NEWID}
		from t_sys_suppliers tt where tt.sup_id
		= #{REALITY_PAYEE}
	</insert>
	<update id="toUpdata_project_sup" parameterType="map">
		update
		fil_project_head set INVOICE_TARGET_TYPE=1
		,FIRST_PAYMENT_TYPE=2,RENT_PAYMENT_TYPE=2,
		INVOICE_TARGET_ID=#{CLIENT_ID},CLIENT_ID=#{CLIENT_ID}
		where id =
		(SELECT t.project_id FROM fil_rent_plan_head t where t.id=#{PAY_ID})
	</update>
	<update id="buyBackNormal23" parameterType="Map">
		update fil_buy_back t set
		sum_amt_back=#{HJ}
		<if test="PENALTY_RECE !=null and PENALTY_RECE !=''">,penalty_amt=#{PENALTY_RECE}</if>
		<if test="UNPAID_INTEREST !=null and UNPAID_INTEREST !=''">,interest_undo=#{UNPAID_INTEREST}</if>
		where t.PAYLIST_CODE=#{PAYLIST_CODE}
		and nvl(t.is_end_status,0)=0
	</update>
	<select id="doConfirmRefundAppByProId" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_FUNDRED (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{EXTRA_MONEY,mode=IN,jdbcType=NUMERIC},#{FI_ACCOUNT_DATE_,mode=IN,jdbcType=VARCHAR},#{FI_REALITY_BANK_,mode=IN,jdbcType=VARCHAR},#{FUND_ID,mode=IN,jdbcType=INTEGER} )}  
	    ]]>
	</select>
	<select id="PRC_FUNDRED_NO_DEPOSIT" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_FUNDRED_NO_DEPOSIT (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{EXTRA_MONEY,mode=IN,jdbcType=NUMERIC},#{FI_ACCOUNT_DATE_,mode=IN,jdbcType=VARCHAR},#{FI_REALITY_BANK_,mode=IN,jdbcType=VARCHAR},#{FUND_ID,mode=IN,jdbcType=INTEGER})}  
	    ]]>
	</select>
	<select id="PRC_FUNDRED_BUY_BACK" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_FUNDRED_BUY_BACK (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{EXTRA_MONEY,mode=IN,jdbcType=NUMERIC},#{FI_ACCOUNT_DATE_,mode=IN,jdbcType=VARCHAR},#{FI_REALITY_BANK_,mode=IN,jdbcType=VARCHAR} )}  
	    ]]>
	</select>
	<select id="PRC_FUNDRED_BUY_BACK_NO" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_FUNDRED_BUY_BACK_NO (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{EXTRA_MONEY,mode=IN,jdbcType=NUMERIC},#{FI_ACCOUNT_DATE_,mode=IN,jdbcType=VARCHAR},#{FI_REALITY_BANK_,mode=IN,jdbcType=VARCHAR})}  
	    ]]>
	</select>
	<select id="PRC_FUNDRED_BUY_FQ" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_FUNDRED_BUY_FQ (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{EXTRA_MONEY,mode=IN,jdbcType=NUMERIC},#{FI_ACCOUNT_DATE_,mode=IN,jdbcType=VARCHAR},#{FI_REALITY_BANK_,mode=IN,jdbcType=VARCHAR} )}  
	    ]]>
	</select>
	<select id="PRC_FUNDRED_BUY_FQ_NO" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_FUNDRED_BUY_FQ_NO (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{EXTRA_MONEY,mode=IN,jdbcType=NUMERIC},#{FI_ACCOUNT_DATE_,mode=IN,jdbcType=VARCHAR},#{FI_REALITY_BANK_,mode=IN,jdbcType=VARCHAR})}  
	    ]]>
	</select>
	<select id="m_flag" parameterType="map" resultType="map">
		SELECT
		distinct t.paylist_code FROM fi_r_beginning t where
		t.paylist_code=#{PAYLIST_CODE} and (frb.beginning_status=1 or
		frb.vinual_flag=1)
	</select>
	<select id="m_flag2" parameterType="map" resultType="map">
		SELECT
		distinct t.pay_code FROM fi_overdue t where t.create_date =
		trunc(sysdate)
		and t.pay_code=#{PAYLIST_CODE} and (t.OVERDUE_STATUS=1 or
		t.VINUAL_DUN_FLAG=1)
	</select>
	<select id="is_verification_finish" parameterType="map"
		resultType="map">
		SELECT * FROM fi_r_beginning t where t.paylist_code=
		#{PAYLIST_CODE} and t.beginning_money-t.beginning_paid>1 and
		t.item_flag=2
	</select>

	<select id="calculate_overdue_appointed" statementType="CALLABLE">  
	    <![CDATA[  
	        {call calculate_overdue_appointed (#{PAYCODEPARAM,mode=IN,jdbcType=VARCHAR},#{NEW_DATE,mode=IN,jdbcType=VARCHAR})}  
	    ]]>
	</select>
	<select id="PRC_BE_QJL_PAY_CODE" statementType="CALLABLE">  
	    <![CDATA[  
	        {call PRC_BE_QJL_PAY_CODE (#{V_PAYCODE,mode=IN,jdbcType=VARCHAR})}  
	    ]]>
	</select>
	<select id="is_bzj" parameterType="map" resultType="map">
		SELECT
		t.is_deposit,
		(SELECT f.beginning_money FROM fi_r_beginning f where
		f.paylist_code=t.paylist_code and f.item_flag=1 and
		f.beginning_name='保证金') bzj
		FROM fil_buy_back t where
		t.paylist_code=#{PAYLIST_CODE}
	</select>
	<select id="ws_bj" parameterType="map" resultType="double">
		SELECT
		sum(f.beginning_money) ws_bj FROM fi_r_beginning f where f.item_flag=2
		and f.beginning_name='本金'
		and f.beginning_receive_data>=
		ADD_MONTHS(to_date(#{ACCOUNT_DATE},'yyyy-mm-dd'),1) and
		f.paylist_code=#{PAYLIST_CODE}
	</select>
	<select id="queryByIDfil_buy_back" parameterType="map"
		resultType="map">
		SELECT t.paylist_code,t.pay_id,t.Lease_Term FROM
		fil_buy_back t where t.id=#{BUY_BACK_ID}
	</select>

	<select id="query_new_bzj" parameterType="map" resultType="double">
		SELECT
		decode(nvl(tt.beginning_money,0),0,round((t.sum_amt_back-t.nominalprice_new)*0.05,2),0)
		bzj,t.* FROM fil_buy_back t
		left join (SELECT * FROM fi_r_beginning f where f.beginning_name='DB保证金')
		tt on tt.paylist_code=t.paylist_code
		where t.id=#{BUY_BACK_ID}
	</select>
	<select id="query_fq_qc" parameterType="map" resultType="int">
		SELECT
		least (nvl((SELECT count(*) / 2
		FROM fi_r_beginning t
		where t.paylist_code = tt.paylist_code
		and abs(t.beginning_paid - t.beginning_money) > 0.1
		and t.item_flag = 2
		group by t.paylist_code),0)
		,
		nvl((SELECT count(*) / 2
		FROM fi_r_beginning t
		where t.paylist_code = tt.paylist_code
		and abs(t.beginning_paid - t.beginning_money) &lt; 0.1
		and t.item_flag = 2
		group by t.paylist_code),0)
		+
		nvl((SELECT count(*) / 2
		FROM fi_r_beginning t
		where t.paylist_code = tt.paylist_code
		and abs(t.beginning_paid - t.beginning_money) > 0.1
		and t.beginning_receive_data &lt; trunc(sysdate)
		and t.item_flag = 2
		group by t.paylist_code),0)) fq_qc
		FROM fil_buy_back tt where tt.id =
		#{BUY_BACK_ID}
	</select>

	<select id="queryDKlist" parameterType="map" resultType="map">
		SELECT
		BID,
		BEGINNING_NUM,
		BEGINNING_NAME,
		NVL(BEGINNING_MONEY, 0) BEGINNING_MONEY
		FROM (SELECT NULL BID,
		T.PERIOD BEGINNING_NUM,
		'违约金' BEGINNING_NAME,
		nvl(T.PENALTY_RECE, 0) - nvl(T.PENALTY_PAID, 0) BEGINNING_MONEY,
		1 TYPE
		FROM FI_OVERDUE T
		WHERE T.PAY_CODE = #{PAY_CODE}
		AND to_char(T.CREATE_DATE, 'yyyy-mm-dd') =
		(SELECT to_char(max(fpp1.account_date), 'yyyy-mm-dd')
		FROM fil_buy_back fpp1
		where fpp1.paylist_code = #{PAY_CODE})
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid BEGINNING_MONEY,
		3 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAY_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '利息'
		AND T.ITEM_FLAG = 2
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid BEGINNING_MONEY,
		4 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAY_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '本金'
		AND T.ITEM_FLAG = 2)
		WHERE BEGINNING_MONEY > 0
		ORDER BY BEGINNING_NUM, TYPE
	</select>

	<update id="update_fil_paychange_parameter" parameterType="Map">
		update fil_paychange_parameter t set
		IS_END_STATUS=1
		,PAYLIST_CODE=#{PAYLIST_CODE}
		,PROJECT_ID = (SELECT max(frp.project_id)
		project_id FROM fil_rent_plan_head frp where
		frp.paylist_code=#{PAYLIST_CODE})
		<if test="HIRE_BANK !=null">,HIRE_BANK=#{HIRE_BANK}</if>
		<if test="RENT_TOTAL !=null">,RENT_TOTAL=#{RENT_TOTAL}</if>
		<if test="RENT_PAID !=null">,RENT_PAID=#{RENT_PAID}</if>
		<if test="RENT_LEFT !=null">,RENT_LEFT=#{RENT_LEFT}</if>
		<if test="PENALTY_AMT !=null">,PENALTY_AMT=#{PENALTY_AMT}</if>
		<if test="INTEREST_UNDO !=null">,INTEREST_UNDO=#{INTEREST_UNDO}</if>
		<if test="SUM_AMT_AHEAD !=null">,SUM_AMT_AHEAD=#{SUM_AMT_AHEAD}</if>
		<if test="OTHER_SHOULD_PAY !=null">,OTHER_SHOULD_PAY=#{OTHER_SHOULD_PAY}</if>
		<if test="CORPUS_UNDO !=null">,CORPUS_UNDO=#{CORPUS_UNDO}</if>
		<if test="REALITY_DATE !=null">,REALITY_DATE=to_date(#{REALITY_DATE},'yyyy-mm-dd')</if>
		where t.pay_id in (SELECT f.id FROM fil_rent_plan_head f where
		f.paylist_code=#{PAYLIST_CODE})
	</update>
	<update id="update_fil_buy_back" parameterType="Map">
		update fil_buy_back t set
		IS_END_STATUS=1
		<if test="HIRE_BANK !=null">,HIRE_BANK=#{HIRE_BANK}</if>
		<if test="RENT_TOTAL !=null">,RENT_TOTAL=#{RENT_TOTAL}</if>
		<if test="RENT_PAID !=null">,RENT_PAID=#{RENT_PAID}</if>
		<if test="RENT_LEFT !=null">,RENT_LEFT=#{RENT_LEFT}</if>
		<if test="PENALTY_AMT !=null">,PENALTY_AMT=#{PENALTY_AMT}</if>
		<if test="INTEREST_UNDO !=null">,INTEREST_UNDO=#{INTEREST_UNDO}</if>
		<if test="SUM_AMT_BACK !=null">,SUM_AMT_BACK=#{SUM_AMT_BACK}</if>
		<if test="OTHER_SHOULD_PAY !=null">,OTHER_SHOULD_PAY=#{OTHER_SHOULD_PAY}</if>
		<if test="CORPUS_UNDO !=null">,CORPUS_UNDO=#{CORPUS_UNDO}</if>
		<if test="REALITY_DATE !=null">,REALITY_DATE=to_date(#{REALITY_DATE},'yyyy-mm-dd')</if>
		where t.is_end_status=0 and t.pay_id in (SELECT f.id FROM
		fil_rent_plan_head f where f.paylist_code=#{PAYLIST_CODE})
	</update>
	<delete id="FI_ACCOUNT_DATE_FX" parameterType="java.util.Map">
		delete fi_overdue
		t
		where t.pay_code = #{PAYLIST_CODE}
		and t.create_date >
		(SELECT NVL(MAX(NVL(FBB.ACCOUNT_DATE,FPP.ACCOUNT_DATE)),TRUNC(SYSDATE)) FROM
		FIL_RENT_PLAN_HEAD T
		LEFT JOIN FIL_PAYCHANGE_PARAMETER FPP ON FPP.PAY_ID=T.ID AND
		FPP.IS_END_STATUS=0
		LEFT JOIN FIL_BUY_BACK FBB ON FBB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FBB.IS_END_STATUS=0
		WHERE T.PAYLIST_CODE =#{PAYLIST_CODE})
		and nvl(t.penalty_paid, 0) = 0
	</delete>
	<delete id="FI_ACCOUNT_DATE_FX2" parameterType="java.util.Map">
		delete fi_overdue
		f where f.id in (
		SELECT fo.id
		FROM fil_buy_back fbb, fi_overdue fo
		where fbb.paylist_code = fo.pay_code
		and fo.create_date >= trunc(fbb.account_date)
		and fbb.paylist_code = #{PAYLIST_CODE}
		union
		SELECT t.id
		FROM fi_overdue t
		where t.pay_code = #{PAYLIST_CODE}
		and t.create_date >= trunc(sysdate)
		)
	</delete>
	<delete id="FI_ACCOUNT_DATE_FX3" parameterType="java.util.Map">
		delete fi_overdue
		f where f.id in (
		SELECT fo.id
		FROM fil_paychange_parameter fbb, fi_overdue fo,fil_rent_plan_head frph
		where frph.paylist_code = fo.pay_code and fbb.pay_id=frph.id
		and fo.create_date >= trunc(fbb.account_date)
		and frph.paylist_code = #{PAYLIST_CODE}
		union
		SELECT t.id
		FROM fi_overdue t
		where t.pay_code = #{PAYLIST_CODE}
		and t.create_date >= trunc(sysdate)
		)
	</delete>
	<delete id="FIL_BUY_BACK_DATE" parameterType="java.util.Map">
		delete fil_buy_back
		t where t.paylist_code=#{PAYLIST_CODE}
	</delete>
	<delete id="FIL_BUY_BACK_DATE2" parameterType="java.util.Map">
		DELETE fil_paychange_parameter t where t.pay_id in (SELECT f.id FROM
		fil_rent_plan_head f where f.paylist_code=#{PAYLIST_CODE}) 
	</delete>

	<update id="round_overdue_appointed" parameterType="Map">
		UPDATE
		FI_OVERDUE FO SET FO.PENALTY_RECE = ROUND(FO.PENALTY_RECE,0)
		WHERE FO.PAY_CODE=#{PAYCODEPARAM} AND
		TO_CHAR(FO.CREATE_DATE,'YYYY-MM-DD')=#{NEW_DATE}
	</update>
	<update id="saveCheckedDeposit" parameterType="Map">
		update
		fil_buy_back t set t.paylist_code=#{PAYLIST_CODE}
		,t.pool_info=#{POOL_INFO},t.file_path=#{FILE_PATH} where
		t.paylist_code=#{PAYLIST_CODE}
	</update>
	<update id="saveCheckedDeposit_pool" parameterType="String">
		update fi_deposit_pool t set t.status=0 where t.pool_id=#{pool_id}
	</update>
	<update id="updateCheckedDeposit_pool_money" parameterType="String">
		update fi_deposit_pool t set
		t.CANUSE_MONEY=t.CANUSE_MONEY-#{pool_money} where t.pool_id=#{pool_id}
	</update>

	<delete id="del_overdue_appointed" parameterType="String">
		DELETE fi_overdue t where t.pay_code=#{PAYLIST_CODE} and
		t.create_date>trunc(sysdate)
	</delete>

	<update id="buy_faxi" parameterType="Map">
		update fil_buy_back t
		set
		t.faxi=round(t.sum_amt_back*(trunc(t.reality_date)-trunc(t.account_date))*0.0003,0)
		where t.paylist_code=#{PAYLIST_CODE} and
		trunc(t.reality_date)-trunc(t.account_date)>0
	</update>
	<update id="buy_faxi1" parameterType="Map">
		update
		fil_paychange_parameter t set
		t.faxi=round(t.sum_amt_ahead*(trunc(t.reality_date)-trunc(t.account_date))*0.0005,0)
		where t.paylist_code=#{PAYLIST_CODE} and
		trunc(t.reality_date)-trunc(t.account_date)>0
	</update>
	<select id="buy_faxi_id" parameterType="map" resultType="map">
		SELECT
		max(t.id) id_ FROM fi_overdue t where t.pay_code=#{PAYLIST_CODE}
	</select>
	<select id="deposit_pool_money" parameterType="map" resultType="double">
		SELECT T.Canuse_Money FROM fi_deposit_pool t where
		t.pool_id=#{pool_id}
	</select>
	<select id="quey_pool_infos" parameterType="String" resultType="map">
		SELECT t.pool_info FROM fil_buy_back t where
		t.paylist_code=#{PAYLIST_CODE}
	</select>
	<select id="query_binn_paid" parameterType="map" resultType="map">
		SELECT * FROM fi_r_beginning t where t.paylist_code=#{PAYLIST_CODE}
		and t.item_flag=2 and abs(t.beginning_money-t.beginning_paid)>1
	</select>
	<select id="query_binn_paid_fq" parameterType="map" resultType="map">
		SELECT * FROM fi_r_beginning t where t.paylist_code=#{PAYLIST_CODE}
		and abs(t.beginning_money-t.beginning_paid)>1 and t.beginning_name
		like '%回购%' and t.beginning_name not like '%回购留购价款%'
	</select>

	<select id="query_repealBuyBackStages_fq" parameterType="map"
		resultType="map">
		SELECT id FROM fil_rent_plan_head t where
		t.paylist_code=#{PAYLIST_CODE} and t.version_code &lt; 0
	</select>

	<select id="getCAUTION_DK" parameterType="map" resultType="map">
		SELECT max(nvl(t.CAUTION_DK,0)) CAUTION_DK
		from fil_paychange_parameter t,fil_rent_plan_head f where f.id = t.pay_id
		and f.paylist_code=#{PAYLIST_CODE} and t.is_end_status =0
	</select>
	<select id="toCheckedDeposit" parameterType="map" resultType="map">
		SELECT t.POOL_ID, t.canuse_money,
		decode(t.type,1,'DB保证金池',2,'供应商垫汇余款池',3,'设备付款余款池') type
		FROM fi_deposit_pool t, fil_buy_back fb
		where fb.REALITY_PAYEE = t.owner_id
		and fb.paylist_code = #{PAYLIST_CODE}
		and t.status = 1
		and t.TYPE in (1,2,3)
		order by t.type desc
	</select>
	<select id="query_pool_file" parameterType="map" resultType="map">
		SELECT t.pool_info,t.file_path FROM fil_buy_back t where
		t.paylist_code=#{PAYLIST_CODE}
	</select>
	<select id="queryPlanMaxId" parameterType="map" resultType="int">
		SELECT id FROM fil_rent_plan_head_bas_max__v t where
		t.PAYLIST_CODE=#{PAYLIST_CODE}
	</select>
	<select id="buy_back_lease_term" parameterType="map" resultType="int">
		SELECT t.lease_term FROM fil_buy_back t where t.id=(SELECT max(f.id)
		FROM fil_buy_back f where f.paylist_code=#{PAYLIST_CODE})
	</select>
	<select id="buy_back_fq_lqbz" parameterType="map" resultType="map">
		SELECT t.YEAR_INTEREST*100 YEARINTEREST,
		nvl((SELECT f.beginning_money
		FROM fi_r_beginning f where f.paylist_code=t.PAYLIST_CODE and
		f.beginning_name='回购手续费'),0) fqhgsxf,
		nvl((SELECT f.beginning_money
		FROM fi_r_beginning f where f.paylist_code=t.PAYLIST_CODE and
		f.beginning_name='回购保证金'),0) fqhgbzj,
		nvl((SELECT f.beginning_money
		FROM fi_r_beginning f where f.paylist_code=t.PAYLIST_CODE and
		f.beginning_name like '%回购%' and f.beginning_name not in
		('回购手续费','回购保证金','回购留购价')),0) fqhgqtfy
		FROM
		fil_rent_plan_head_bas_max__v t where t.PAYLIST_CODE=#{PAYLIST_CODE}
	</select>
	<insert id="insert_buy_faxi" parameterType="map">
		insert into fi_overdue (
		IS_BUY_PENALTY, -- 默认0为正常，1为回购款违约金
		VINUAL_RECE, --
		虚拟核销应收
		VINUAL_PAID, -- 虚拟核销实收
		VINUAL_DUE_DATE, -- 虚拟核销实收日期
		VINUAL_DUN_STATUS, -- 0未申请 1申请中
		VINUAL_DUN_FLAG, -- 0：虚拟核销不可核销
		1：虚拟核销可以核销（租金由虚拟核销产生的违约金） 2：虚拟核销成功
		--BEGINNING_FALSE_NUM, -- 失败次数
		--BEGINNING_FALSE_REASON, -- 失败原因
		OVERDUE_STATUS, -- 0：未申请
		1：核销已申请（默认为0）3：结清抵扣已申请
		TEMP_LC, -- 临时字段，测试 刷数据功能
		ID, --
		PAY_CODE, -- 支付表编号
		PERIOD, -- 期次
		RENT_RECE, -- 应收租金总额
		RENT_PAID, -- 实收租金总额
		PENALTY_RECE, -- 应收罚息总额
		PENALTY_PAID, -- 实收罚息总额
		CREATE_DATE, -- 创建日期
		RENT_DATE, -- 应付日期
		PENALTY_DAY, -- 罚息天数
		DUE_STATUS, --
		0：不能核销，1：可以核销，2：违约金免除申请中
		PROJECT_ID, -- 项目ID
		CUST_NAME, -- 客户名
		SUP, -- 供应商
		PAY_START, -- 起租时间
		EQUI, -- 租赁物类型
		--PENALTY_DATE, -- 实收日期
		OVER_TYPE -- 逾期类型， 如回购款的逾期金额
		)
		SELECT
		1, -- 默认0为正常，1为回购款违约金
		VINUAL_RECE, -- 虚拟核销应收
		VINUAL_PAID, -- 虚拟核销实收
		VINUAL_DUE_DATE, -- 虚拟核销实收日期
		VINUAL_DUN_STATUS, -- 0未申请 1申请中
		VINUAL_DUN_FLAG, -- 0：虚拟核销不可核销 1：虚拟核销可以核销（租金由虚拟核销产生的违约金） 2：虚拟核销成功
		--BEGINNING_FALSE_NUM, -- 失败次数
		--BEGINNING_FALSE_REASON, -- 失败原因
		OVERDUE_STATUS, -- 0：未申请 1：核销已申请（默认为0）3：结清抵扣已申请
		TEMP_LC, -- 临时字段，测试
		刷数据功能
		seq_fi_overdue.nextval, --
		PAY_CODE, -- 支付表编号
		(SELECT max(frb.beginning_num)+1 FROM fi_r_beginning frb
		where frb.paylist_code=t.pay_code and frb.item_flag=2 ), -- 期次
		0
		RENT_RECE_, -- 应收租金总额
		0 RENT_PAID_, -- 实收租金总额
		(SELECT max(nvl(f.faxi,0))
		FROM fil_buy_back f where f.paylist_code=t.pay_code)PENALTY_RECE_, --
		应收罚息总额
		0 PENALTY_PAID_, -- 实收罚息总额
		(SELECT max(f.reality_date) FROM
		fil_buy_back f where f.paylist_code=t.pay_code), -- 创建日期
		(SELECT
		max(f.account_date) FROM fil_buy_back f where
		f.paylist_code=t.pay_code), -- 应付日期
		(SELECT
		max(f.reality_date)-max(f.account_date) FROM fil_buy_back f where
		f.paylist_code=t.pay_code) PENALTY_DAY, -- 罚息天数
		1 DUE_STATUS, --
		0：不能核销，1：可以核销，2：违约金免除申请中
		PROJECT_ID, -- 项目ID
		CUST_NAME, -- 客户名
		SUP, -- 供应商
		PAY_START, -- 起租时间
		EQUI, -- 租赁物类型
		--PENALTY_DATE, -- 实收日期
		OVER_TYPE -- 逾期类型， 如回购款的逾期金额
		FROM fi_overdue t
		where t.id=#{ID_}
    </insert>
	<insert id="insert_buy_faxi2" parameterType="map">
		insert into fi_overdue (
		IS_BUY_PENALTY, -- 默认0为正常，1为回购款违约金
		VINUAL_RECE, --
		虚拟核销应收
		VINUAL_PAID, -- 虚拟核销实收
		VINUAL_DUE_DATE, -- 虚拟核销实收日期
		VINUAL_DUN_STATUS, -- 0未申请 1申请中
		VINUAL_DUN_FLAG, -- 0：虚拟核销不可核销
		1：虚拟核销可以核销（租金由虚拟核销产生的违约金） 2：虚拟核销成功
		--BEGINNING_FALSE_NUM, -- 失败次数
		--BEGINNING_FALSE_REASON, -- 失败原因
		OVERDUE_STATUS, -- 0：未申请
		1：核销已申请（默认为0）3：结清抵扣已申请
		TEMP_LC, -- 临时字段，测试 刷数据功能
		ID, --
		PAY_CODE, -- 支付表编号
		PERIOD, -- 期次
		RENT_RECE, -- 应收租金总额
		RENT_PAID, -- 实收租金总额
		PENALTY_RECE, -- 应收罚息总额
		PENALTY_PAID, -- 实收罚息总额
		CREATE_DATE, -- 创建日期
		RENT_DATE, -- 应付日期
		PENALTY_DAY, -- 罚息天数
		DUE_STATUS, --
		0：不能核销，1：可以核销，2：违约金免除申请中
		PROJECT_ID, -- 项目ID
		CUST_NAME, -- 客户名
		SUP, -- 供应商
		PAY_START, -- 起租时间
		EQUI, -- 租赁物类型
		--PENALTY_DATE, -- 实收日期
		OVER_TYPE -- 逾期类型， 如回购款的逾期金额
		)
		SELECT
		2, -- 默认0为正常，1为回购款违约金
		VINUAL_RECE, -- 虚拟核销应收
		VINUAL_PAID, -- 虚拟核销实收
		VINUAL_DUE_DATE, -- 虚拟核销实收日期
		VINUAL_DUN_STATUS, -- 0未申请 1申请中
		VINUAL_DUN_FLAG, -- 0：虚拟核销不可核销 1：虚拟核销可以核销（租金由虚拟核销产生的违约金） 2：虚拟核销成功
		--BEGINNING_FALSE_NUM, -- 失败次数
		--BEGINNING_FALSE_REASON, -- 失败原因
		OVERDUE_STATUS, -- 0：未申请 1：核销已申请（默认为0）3：结清抵扣已申请
		TEMP_LC, -- 临时字段，测试
		刷数据功能
		seq_fi_overdue.nextval, --
		PAY_CODE, -- 支付表编号
		(SELECT max(frb.beginning_num)+1 FROM fi_r_beginning frb
		where frb.paylist_code=t.pay_code and frb.item_flag=2 ), -- 期次
		0
		RENT_RECE_, -- 应收租金总额
		0 RENT_PAID_, -- 实收租金总额
		(SELECT max(nvl(f.faxi,0))
		FROM fil_paychange_parameter f where
		f.paylist_code=t.pay_code)PENALTY_RECE_, -- 应收罚息总额
		0 PENALTY_PAID_, -- 实收罚息总额
		(SELECT max(f.reality_date) FROM fil_paychange_parameter f where
		f.paylist_code=t.pay_code), -- 创建日期
		(SELECT max(f.account_date) FROM fil_paychange_parameter f where
		f.paylist_code=t.pay_code), -- 应付日期
		(SELECT max(f.reality_date)-max(f.account_date) FROM fil_paychange_parameter
		f where f.paylist_code=t.pay_code) PENALTY_DAY, -- 罚息天数
		1 DUE_STATUS,
		-- 0：不能核销，1：可以核销，2：违约金免除申请中
		PROJECT_ID, -- 项目ID
		CUST_NAME, -- 客户名
		SUP, -- 供应商
		PAY_START, -- 起租时间
		EQUI, -- 租赁物类型
		--PENALTY_DATE, -- 实收日期
		OVER_TYPE -- 逾期类型， 如回购款的逾期金额
		FROM fi_overdue t
		where t.id=#{ID_}
    </insert>


	<select id="buyBackInfo" parameterType="java.util.Map"
		resultType="java.util.Map">
		SELECT
		FPH.LEASE_CODE,
		FPH.PRO_CODE,
		T.PAYLIST_CODE,
		T.STATUS,
		VPS.SUP_NAME,
		VPS.SUP_ID,
		VPS.COMPANY_ID,
		VPS.COMPANY_NAME,
		FCC.NAME CUST_NAME,
		FCC.ID CUST_ID,
		FCC.TYPE,
		VPS.PRODUCT_NAME,
		VPS.SPEC_NAME,
		VPS.WHOLE_ENGINE_CODE,
		round(NVL(VPS.TOTAL_PRICE,0),2) TOTAL_PRICE,
		TO_CHAR(T.START_DATE,'yyyy-mm-dd') START_DATE,
		T.LEASE_TERM,
		TO_CHAR(T.END_DATE,'yyyy-mm-dd') END_DATE,
		T.LEASE_TOPRIC UNIT_PRICE,
		(SELECT SUM(F.ITEM_MONEY) FROM FIL_RENT_PLAN_DETAIL F WHERE F.PAY_ID = T.ID
		AND F.ITEM_FLAG = 2 AND F.ITEM_NAME='租金') SUM_ZJ,
		(SELECT NVL(MAX(FRB.BEGINNING_NUM),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FRB.BEGINNING_MONEY &lt;= FRB.BEGINNING_PAID AND
		FRB.BEGINNING_MONEY>0) BEGINNING_NUM,--已还的最大期次
		(SELECT NVL(SUM(NVL(FRB.BEGINNING_MONEY,0)),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.PAYLIST_CODE=T.PAYLIST_CODE AND FRB.BEGINNING_NUM=1 AND
		FRB.BEGINNING_MONEY>0) FIRST_MONEY,--第一期租金
		(SELECT NVL(SUM(NVL(FRB.BEGINNING_MONEY,0)),0) FROM FI_R_BEGINNING FRB WHERE
		FRB.PAYLIST_CODE=T.PAYLIST_CODE AND FRB.BEGINNING_NUM=2 AND
		FRB.BEGINNING_MONEY>0) MQ_MONEY,--每期租金
		(SELECT round(SUM(NVL(FRB.BEGINNING_PAID,0)),2) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE)
		BEGINNING_PAID,--已还租金
		(SELECT round(SUM(NVL(FRB.BEGINNING_MONEY,0)) -
		SUM(NVL(FRB.BEGINNING_PAID,0)),2) FROM FI_R_BEGINNING FRB WHERE
		FRB.ITEM_FLAG =2 AND FRB.PAYLIST_CODE=T.PAYLIST_CODE AND
		FRB.BEGINNING_NAME = '本金') WH_BJ,--未还租金
		(select count(1) from fi_overdue fo where
		TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and fo.pay_code=T.PAYLIST_CODE)
		COUNT_,
		(select round(SUM(NVL(fo.PENALTY_RECE,0)- NVL(fo.PENALTY_PAID,0)),2) from
		fi_overdue fo where TRUNC(FO.CREATE_DATE)=TRUNC(sysdate) and
		fo.pay_code=T.PAYLIST_CODE) DUE_RECE,
		(SELECT round(sum(nvl(ff.FUND_RECEIVE_MONEY, 0)), 2)
		FROM fi_fund ff
		where ff.fund_client_id = fcc.ID
		and ff.FUND_STATUS=0
		) FUND_RECEIVE_MONEY,
		T.YEAR_INTEREST,
		T.ID PAY_ID,
		T.PROJECT_ID,
		--( select round(nvl(f.CANUSE_MONEY, 0), 2) from FI_DEPOSIT_POOL f
		--	where f.paylist_code = t.paylist_code and f.TYPE=4) DEPOSIT,
		round(nvl(T.DEPOSIT_SY, 0), 2) DEPOSIT,
		(select round(nvl(f.CANUSE_MONEY, 0), 2) from FI_DEPOSIT_POOL f
			where f.paylist_code = t.paylist_code and f.TYPE=1) DBDEPOSIT,
		(SELECT round(sum(nvl(f.beginning_money, 0)), 2)
		FROM fi_r_beginning f
		where f.paylist_code = t.paylist_code
		and f.item_flag = 1
		and f.beginning_name like '%留购价%') LGJTOTAL
		FROM fil_rent_plan_head_max_v T
		LEFT JOIN v_plan_scheme VPS ON T.PAYLIST_CODE=VPS.PAYLIST_CODE
		LEFT JOIN FIL_PROJECT_HEAD FPH ON T.PROJECT_ID = FPH.ID
		LEFT JOIN FIL_CUST_CLIENT FCC ON FPH.CLIENT_ID = FCC.ID
		where T.STATUS in (0,5,55) and T.ID=#{ID}
	</select>

	<select id="getPayDetailByOldId" parameterType="java.util.Map"
		resultType="java.util.Map">
		select
		ITEM_NAME,ITEM_MONEY,PERIOD_NUM,to_char(PAY_DATE,'yyyy-MM-dd')
		PAY_DATE,LOCKED_FLAG from fil_rent_plan_detail frpd where
		frpd.pay_id=#{OLD_PAY_ID} and frpd.ITEM_FLAG=2 order by id 
	</select>
</mapper>