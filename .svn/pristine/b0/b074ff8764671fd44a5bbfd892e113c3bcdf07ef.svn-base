<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="rentWriteVinual">
	<select id="querySupp_Bank" parameterType="Map" resultType="Map">
		select SUPP_ID,SUPP_NAME,BANK_NAME,BANK_ACCOUNT from t_sys_supplier_bank where SUPP_ID=#{SUPP_ID}
	</select>
	
	<select id="query_Bank_Vinual_CU" parameterType="java.util.Map" resultType="java.util.Map">
				 SELECT * FROM (	 
				SELECT  CC.*,ROWNUM ROWNO FROM 
				(
				 select frbj.id,frbj.LEASE_CODE,frbj.paylist_code,to_char(frbj.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,frbj.BEGINNING_NAME,frbj.ITEM_FLAG
				 ,frbj.BEGINNING_NUM,frbj.BEGINNING_STATUS VINUAL_STATUS
				 ,CASE WHEN frbj.ITEM_FLAG=2 THEN round(nvl(frbj.BEGINNING_MONEY,0)-nvl(frbj.BEGINNING_PAID,0),2) ELSE round(nvl(frbj.VINUAL_RECE,0),2) END BEGINNING_MONEY
				 ,frbj.pro_code,frbj.CUST_NAME CUSTNAME,frbj.CUST_ID,frbj.SUPPLIER_NAME SUPPLIERS_NAME,frbj.COMPANY_NAME,frbj.PRODUCT_NAME
				,case when frbj.LOCKTYPE=1 then '未锁定' else '已锁定' end LOCKNAME
				from FI_R_BEGINNING_JOIN frbj
				left join FIL_PROJECT_HEAD FPH on FPH.ID=frbj.PROJ_ID
				where frbj.PAYLIST_CODE NOT LIKE '%_ZQX%' AND frbj.BEGINNING_STATUS=0 and frbj.VINUAL_FLAG=0 and ((frbj.ITEM_FLAG=2 and last_day(sysdate)>=frbj.BEGINNING_RECEIVE_DATA and nvl(frbj.BEGINNING_MONEY,0)-nvl(frbj.BEGINNING_PAID,0)>0) or (frbj.ITEM_FLAG=5 AND nvl(frbj.VINUAL_RECE,0)>0) ) 
				and FPH.PLATFORM_TYPE !=7
				<if test="SUP_ID != null and SUP_ID != ''"> and frbj.SUP_ID=#{SUP_ID}</if>
						<if test="CUST_NAME !=null and CUST_NAME !=''"> and frbj.CUST_NAME like '%'||#{CUST_NAME}||'%'</if>
						<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and frbj.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
						<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
						<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
						<if test="COM_NAME !=null and COM_NAME !=''"> and frbj.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
						<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and frbj.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
				order by frbj.PRO_CODE,frbj.LEASE_CODE,frbj.paylist_code,frbj.beginning_num,frbj.ITEM_FLAG desc
			) CC where rownum &lt;=#{PAGE_END}
						) CCC
				 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="query_Bank_Vinual_CU_count" parameterType="java.util.Map" resultType="int">
			SELECT  count(1) FROM (
					select frbj.id,frbj.LEASE_CODE,frbj.paylist_code,to_char(frbj.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,frbj.BEGINNING_NAME,frbj.ITEM_FLAG
				 ,frbj.BEGINNING_NUM,frbj.BEGINNING_STATUS VINUAL_STATUS
				 ,CASE WHEN frbj.ITEM_FLAG=2 THEN round(nvl(frbj.BEGINNING_MONEY,0)-nvl(frbj.BEGINNING_PAID,0),2) ELSE round(nvl(frbj.VINUAL_RECE,0),2) END BEGINNING_MONEY
				 ,frbj.pro_code,frbj.CUST_NAME CUSTNAME,frbj.CUST_ID,frbj.SUPPLIER_NAME SUPPLIERS_NAME,frbj.COMPANY_NAME,frbj.PRODUCT_NAME
				,case when frbj.LOCKTYPE=1 then '未锁定' else '已锁定' end LOCKNAME
				from FI_R_BEGINNING_JOIN frbj
				left join FIL_PROJECT_HEAD FPH on FPH.ID=frbj.PROJ_ID
				where frbj.PAYLIST_CODE NOT LIKE '%_ZQX%' AND frbj.BEGINNING_STATUS=0 and frbj.VINUAL_FLAG=0 and ((frbj.ITEM_FLAG=2 and last_day(sysdate)>=frbj.BEGINNING_RECEIVE_DATA and nvl(frbj.BEGINNING_MONEY,0)-nvl(frbj.BEGINNING_PAID,0)>0) or (frbj.ITEM_FLAG=5 AND nvl(frbj.VINUAL_RECE,0)>0) ) 
				and FPH.PLATFORM_TYPE !=7
				<if test="SUP_ID != null and SUP_ID != ''"> and frbj.SUP_ID=#{SUP_ID}</if>
						<if test="CUST_NAME !=null and CUST_NAME !=''"> and frbj.CUST_NAME like '%'||#{CUST_NAME}||'%'</if>
						<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and frbj.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
						<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
						<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
						<if test="COM_NAME !=null and COM_NAME !=''"> and frbj.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
						<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and frbj.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
				)c 
	</select>
	
	<select id="query_Bank_Vinual_S" parameterType="Map" resultType="Map">
		SELECT T2.*
		  FROM (SELECT T1.*, ROWNUM ROWNO
		          FROM (SELECT H.ID HEAD_ID,
		                       H.FI_PAY_MONEY,
		                       TO_CHAR(H.FI_PAY_DATE, 'yyyy-MM-dd') FI_PAY_DATE,
		                       H.FI_REALITY_MONEY,
		                       H.FI_ACCOUNT_DATE,
		                       H.FI_APP_CODE,
		                       H.FI_APP_NAME,
		                       TO_CHAR(H.FI_APP_DATE, 'yyyy-MM-dd') FI_APP_DATE,
		                       H.FI_STATUS,
		                       H.FI_REMARK,
		                       H.FI_FLAG,
		                       tsdd.FLAG STATUS_FLAG,
		                       H.APP_CREATE,
		                       H.FI_PROJECT_NUM
		                  FROM FI_FUND_HEAD H
		                  left join t_sys_data_dictionary tsdd on tsdd.type=#{tags1} and tsdd.code=H.FI_STATUS
		                  <where>
		                    FI_FLAG in (16,17) and FI_STATUS in (0,4)
		                    <if test="ORG_LIST != null and ORG_LIST != ''">and H.FI_ORG_ID in ${ORG_LIST}</if>
		                  	<if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
		                  	<if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
		                  	<if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
		                  	<if test="FI_PAY_MONEY != null and FI_PAY_MONEY != ''">AND H.FI_PAY_MONEY LIKE '%'||#{FI_PAY_MONEY}||'%'</if>
		                  	<if test="FI_STATUS != null and FI_STATUS != ''">AND H.FI_STATUS LIKE '%'||#{FI_STATUS}||'%'</if>
		                  	<if test="APP_CREATE != null and APP_CREATE != ''">AND H.FI_APP_NAME LIKE '%'||#{APP_CREATE}||'%'</if>
		                  </where>) T1 where ROWNUM &lt;=#{PAGE_END} ) T2
		 WHERE T2.ROWNO >= #{PAGE_BEGIN}
		</select>
		
		<select id="query_Bank_Vinual_S_count" parameterType="Map" resultType="int">
		SELECT COUNT(1) FROM(SELECT H.ID HEAD_ID,
		                       H.FI_PAY_MONEY,
		                       TO_CHAR(H.FI_PAY_DATE, 'yyyy-MM-dd') FI_PAY_DATE,
		                       H.FI_REALITY_MONEY,
		                       H.FI_ACCOUNT_DATE,
		                       H.FI_APP_CODE,
		                       H.FI_APP_NAME,
		                       TO_CHAR(H.FI_APP_DATE, 'yyyy-MM-dd') FI_APP_DATE,
		                       H.FI_STATUS,
		                       H.FI_REMARK,
		                       H.FI_PROJECT_NUM,
		                       H.SUPPLIER_NAME
		                  FROM FI_FUND_HEAD H
		                  <where>
		                     FI_FLAG in (16,17) and FI_STATUS in (0,4)
		                     <if test="ORG_LIST != null and ORG_LIST != ''">and H.FI_ORG_ID in ${ORG_LIST}</if>
		                  	<if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
		                  	<if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
		                  	<if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
		                  	<if test="FI_PAY_MONEY != null and FI_PAY_MONEY != ''">AND H.FI_PAY_MONEY LIKE '%'||#{FI_PAY_MONEY}||'%'</if>
		                  	<if test="FI_STATUS != null and FI_STATUS != ''">AND H.FI_STATUS LIKE '%'||#{FI_STATUS}||'%'</if>
		                  	<if test="APP_CREATE != null and APP_CREATE != ''">AND H.FI_APP_NAME LIKE '%'||#{APP_CREATE}||'%'</if>
		                  </where>)T
		</select>
		
		<update id="updateBeginState" parameterType="String">
		 	UPDATE fi_r_beginning SET BEGINNING_STATUS=0,MODIFY_TIME=sysdate WHERE BEGINNING_ID in (
		 		 select frb.BEGINNING_ID from fi_fund_head ffh
				    left join fi_fund_detail ffd on ffh.id=ffd.d_fund_id
				    left join fi_r_beginning frb on ffd.D_BEGING_ID=frb.BEGINNING_ID
				    where ffh.id=#{HEAD_ID} and frb.BEGINNING_ID is not null
		 	) 
		 </update>
		 
		 <select id="queryDunDateAll"  parameterType="String" resultType="Map">
		 	select D_PAY_CODE,PERIOD,case when D_STATUS=1 then 2 when D_STATUS=2 then 5 end ITEM_FLAG from fi_fund_detail where d_fund_id=#{HEAD_ID}
		 </select>
		
		<update id="updateOverDunStaute" parameterType="java.util.Map">
			update fi_overdue set OVERDUE_STATUS=#{OVERDUE_STATUS}
			<if test="REALITY_TIME !=null and REALITY_TIME !=''">,PENALTY_DATE=to_date(#{REALITY_TIME},'yyyy-MM-dd')</if> 
			where ID = (
				select max(id) from fi_overdue where pay_code=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM} 
			)
		</update>
		
		<update id="deleteCancellationDe" parameterType="String">
		 	delete FI_FUND_DETAIL WHERE D_FUND_ID=#{HEAD_ID}
		 </update>
		 
		 <update id="deleteCancellation" parameterType="String">
		 	delete FI_FUND_HEAD WHERE ID=#{HEAD_ID}
		 </update>
		 
		 <select id="queryFundInvoice"  parameterType="map" resultType="map">
		 	select fph.INVOICE_TARGET_TYPE,fph.INVOICE_TARGET_ID,vps.SUP_ID,vps.SUP_NAME,frb.PROJECT_ID
		 	,fcc.id CUST_ID,fcc.name CUSTNAME,fph.pro_code,to_char(frb.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA
		 	from fi_r_beginning frb 
			left join v_plan_scheme vps on frb.paylist_code=vps.PAYLIST_CODE
			left join fil_project_head fph on fph.id=frb.PROJECT_ID
			left join fil_cust_client fcc on fph.client_id=fcc.id
			where frb.PAYLIST_CODE=#{PAYLIST_CODE} and frb.BEGINNING_NUM=#{BEGINNING_NUM}
			group by fph.INVOICE_TARGET_TYPE,fph.INVOICE_TARGET_ID,vps.SUP_ID,vps.SUP_NAME,frb.PROJECT_ID
		 	,fcc.id,fcc.name,fph.pro_code,to_char(frb.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd')
		</select>
		
		<select id="queryDetailByPayNum"  parameterType="java.util.Map" resultType="map">
			select frb.BEGINNING_ID,frb.BEGINNING_NUM,frb.BEGINNING_NAME,frb.PAYLIST_CODE,frb.ITEM_FLAG
			,(nvl(frb.BEGINNING_MONEY,0)-nvl(frb.BEGINNING_PAID,0)-nvl(frb.VINUAL_MONEY,0)) BEGINNING_MONEY,to_char(BEGINNING_RECEIVE_DATA,'yyyy-mm-dd') BEGINNING_RECEIVE_DATA
			from fi_r_beginning frb where PAYLIST_CODE=#{PAYLIST_CODE} and BEGINNING_NUM=#{BEGINNING_NUM} 
				and frb.VINUAL_FLAG=0 and frb.BEGINNING_STATUS=0 and frb.ITEM_FLAG=2 
				and frb.BEGINNING_FLAG=0 and (nvl(frb.BEGINNING_MONEY,0)-nvl(frb.BEGINNING_PAID,0)-nvl(frb.VINUAL_MONEY,0))!=0
				order by BEGINNING_NAME
		</select>
		
		<insert id="createDetailByBank" parameterType="java.util.Map">
			insert into FI_FUND_DETAIL
			(
			ID
			<if test="fund_head_id !=null and fund_head_id !=''">,D_FUND_ID</if>
			<if test="CUSTNAME !=null and CUSTNAME !=''">,D_TO_THE_PAYEE</if>
			<if test="CUST_ID !=null and CUST_ID !=''">,D_CLIENT_CODE</if>
			<if test="CUSTNAME !=null and CUSTNAME !=''">,D_CLIENT_NAME</if>
			,D_PAY_PROJECT
			<if test="MONEYCURR !=null and MONEYCURR !=''">,D_RECEIVE_MONEY</if>
			<if test="D_PAY_MONEYLB !=null and D_PAY_MONEYLB !=''">,D_PAY_MONEY</if>
			<if test="BEGINNING_RECEIVE_DATA !=null and BEGINNING_RECEIVE_DATA !=''">,D_RECEIVE_DATE</if>
			<if test="PAYLIST_CODE !=null and PAYLIST_CODE !=''">,D_PAY_CODE</if>
			<if test="PRO_CODE !=null and PRO_CODE !=''">,D_PROJECT_CODE</if>
			<if test="BEGINNING_ID !=null and BEGINNING_ID !=''">,D_BEGING_ID</if>
			<if test="BEGINNING_NUM !=null and BEGINNING_NUM !=''">,PERIOD</if>
			<if test="D_STATUS !=null and D_STATUS !=''">,D_STATUS</if>
			<if test="INVOICE_TARGET_TYPE !=null and INVOICE_TARGET_TYPE !=''">,INVOICE_TARGET_TYPE</if>
			<if test="INVOICE_TARGET_ID !=null and INVOICE_TARGET_ID !=''">,INVOICE_TARGET_ID</if>
			,RE_STATUS
			,D_VINUAL_STATUS
			)
			values(
			SEQ_FUND_DETAIL.nextval
			<if test="fund_head_id !=null and fund_head_id !=''">,#{fund_head_id}</if>
			<if test="CUSTNAME !=null and CUSTNAME !=''">,#{CUSTNAME}</if>
			<if test="CUST_ID !=null and CUST_ID !=''">,#{CUST_ID}</if>
			<if test="CUSTNAME !=null and CUSTNAME !=''">,#{CUSTNAME}</if>
			,#{BEGINNING_NAME}
			<if test="MONEYCURR !=null and MONEYCURR !=''">,ROUND(#{MONEYCURR},2)</if>
			<if test="D_PAY_MONEYLB !=null and D_PAY_MONEYLB !=''">,ROUND(#{D_PAY_MONEYLB},2)</if>
			<if test="BEGINNING_RECEIVE_DATA !=null and BEGINNING_RECEIVE_DATA !=''">,to_date(#{BEGINNING_RECEIVE_DATA},'yyyy-mm-dd')</if>
			<if test="PAYLIST_CODE !=null and PAYLIST_CODE !=''">,#{PAYLIST_CODE}</if>
			<if test="PRO_CODE !=null and PRO_CODE !=''">,#{PRO_CODE}</if>
			<if test="BEGINNING_ID !=null and BEGINNING_ID !=''">,#{BEGINNING_ID}</if>
			<if test="BEGINNING_NUM !=null and BEGINNING_NUM !=''">,#{BEGINNING_NUM}</if>
			<if test="D_STATUS !=null and D_STATUS !=''">,#{D_STATUS}</if>
			<if test="INVOICE_TARGET_TYPE !=null and INVOICE_TARGET_TYPE !=''">,#{INVOICE_TARGET_TYPE}</if>
			<if test="INVOICE_TARGET_ID !=null and INVOICE_TARGET_ID !=''">,to_char(#{INVOICE_TARGET_ID})</if>
			,4
			,1
			)
		</insert>
		
		<update id="updateBeggingStatusByID" parameterType="java.util.Map">
			update fi_r_beginning set BEGINNING_STATUS=#{BEGINNING_STATUS},MODIFY_TIME=sysdate
			where BEGINNING_ID=#{BEGINNING_ID}
		</update>
		
		<update id="updateSupp_Bank" parameterType="Map">
			update t_sys_supplier_bank set SUPP_ID=#{SUPP_ID}
			<if test="SUPP_NAME != null and SUPP_NAME != ''">,SUPP_NAME = #{SUPP_NAME}</if>
			<if test="BANK_NAME != null and BANK_NAME != ''">,BANK_NAME = #{BANK_NAME}</if>
			<if test="BANK_ACCOUNT != null and BANK_ACCOUNT != ''">,BANK_ACCOUNT = #{BANK_ACCOUNT}</if>
			where SUPP_ID=#{SUPP_ID}
		</update>
		
		<insert id="insertSupp_Bank" parameterType="Map">
			insert into t_sys_supplier_bank 
			(
				SUPP_ID
				,SUPP_NAME
				<if test="BANK_NAME != null and BANK_NAME != ''">,BANK_NAME</if>
				<if test="BANK_ACCOUNT != null and BANK_ACCOUNT != ''">,BANK_ACCOUNT</if>
			)values
			(
				#{SUPP_ID}
				,#{SUPP_NAME}
				<if test="BANK_NAME != null and BANK_NAME != ''">,#{BANK_NAME}</if>
				<if test="BANK_ACCOUNT != null and BANK_ACCOUNT != ''">,#{BANK_ACCOUNT}</if>
			)
		</insert>
		
		<insert id="createFundHead_Not" parameterType="java.util.Map">
			insert into fi_fund_head
			(ID
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,FI_PAY_MONEY</if>
			<if test="FI_PROJECT_NUM !=null and FI_PROJECT_NUM !=''">,FI_PROJECT_NUM</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,FI_APP_NAME</if>
			<if test="FI_PAY_DATE !=null and FI_PAY_DATE !=''">,FI_PAY_DATE</if>
			<if test="FI_FAG !=null and FI_FAG !=''">,FI_FLAG</if>
			,FI_STATUS
			<if test="USER_CODE !=null and USER_CODE !=''">,FI_APP_CODE</if>
			<if test="FI_PAY_TYPE !=null and FI_PAY_TYPE !=''">,FI_PAY_TYPE</if>
			<if test="FI_PRO_NAME !=null and FI_PRO_NAME !=''">,FI_PRO_NAME</if>
			<if test="FI_REALITY_BANK !=null and FI_REALITY_BANK !=''">,FI_REALITY_BANK</if>
			<if test="BANK_NAME !=null and BANK_NAME !=''">,FI_TO_THE_PAYEE</if>
			<if test="BANK_ACCOUNT !=null and BANK_ACCOUNT !=''">,FI_TO_THE_ACCOUNT</if>
			<if test="ORG_ID !=null and ORG_ID !=''">, FI_ORG_ID</if>
			<if test="SUP_ID !=null and SUP_ID !=''">,SUP_ID</if>
			<if test="SUPPLIER_NAME !=null and SUPPLIER_NAME !=''">, SUPPLIER_NAME</if>
			,FI_APP_DATE
			,FI_FUND_CODE
			<if test="APP_CREATE !=null and APP_CREATE !=''">, APP_CREATE</if>
			)
			values 
			(#{fund_head_id}
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,round(#{FI_PAY_MONEY},2)</if>
			<if test="FI_PROJECT_NUM !=null and FI_PROJECT_NUM !=''">,#{FI_PROJECT_NUM}</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,#{USER_NAME}</if>
			<if test="FI_PAY_DATE !=null and FI_PAY_DATE !=''">,to_date(#{FI_PAY_DATE},'yyyy-mm-dd')</if>
			<if test="FI_FAG !=null and FI_FAG !=''">,#{FI_FAG}</if>
			,0
			<if test="USER_CODE !=null and USER_CODE !=''">,#{USER_CODE}</if>
			<if test="FI_PAY_TYPE !=null and FI_PAY_TYPE !=''">,#{FI_PAY_TYPE}</if>
			<if test="FI_PRO_NAME !=null and FI_PRO_NAME !=''">,#{FI_PRO_NAME}</if>
			<if test="FI_REALITY_BANK !=null and FI_REALITY_BANK !=''">,#{FI_REALITY_BANK}</if>
			<if test="BANK_NAME !=null and BANK_NAME !=''">,#{BANK_NAME}</if>
			<if test="BANK_ACCOUNT !=null and BANK_ACCOUNT !=''">,#{BANK_ACCOUNT}</if>
			<if test="ORG_ID !=null and ORG_ID !=''">, #{ORG_ID}</if>
			<if test="SUP_ID !=null and SUP_ID !=''">,#{SUP_ID}</if>
			<if test="SUPPLIER_NAME !=null and SUPPLIER_NAME !=''">, #{SUPPLIER_NAME}</if>
			,sysdate
			,1
			<if test="APP_CREATE !=null and APP_CREATE !=''">, #{APP_CREATE}</if>
			)
		</insert>
		
		<insert id="createFundHead_Not1" parameterType="java.util.Map">
			insert into fi_fund_head
			(ID
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,FI_PAY_MONEY</if>
			<if test="FI_PROJECT_NUM !=null and FI_PROJECT_NUM !=''">,FI_PROJECT_NUM</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,FI_APP_NAME</if>
			<if test="FI_PAY_DATE !=null and FI_PAY_DATE !=''">,FI_PAY_DATE</if>
			<if test="FI_FAG !=null and FI_FAG !=''">,FI_FLAG</if>
			,FI_STATUS
			<if test="USER_CODE !=null and USER_CODE !=''">,FI_APP_CODE</if>
			<if test="FI_PAY_TYPE !=null and FI_PAY_TYPE !=''">,FI_PAY_TYPE</if>
			<if test="FI_PRO_NAME !=null and FI_PRO_NAME !=''">,FI_PRO_NAME</if>
			<if test="ORG_ID !=null and ORG_ID !=''">, FI_ORG_ID</if>
			<if test="SUP_ID !=null and SUP_ID !=''">,SUP_ID</if>
			<if test="SUPPLIER_NAME !=null and SUPPLIER_NAME !=''">, SUPPLIER_NAME</if>
			,FI_APP_DATE
			,FI_FUND_CODE
			<if test="APP_CREATE !=null and APP_CREATE !=''">, APP_CREATE</if>
			)
			values 
			(#{fund_head_id}
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,round(#{FI_PAY_MONEY},2)</if>
			<if test="FI_PROJECT_NUM !=null and FI_PROJECT_NUM !=''">,#{FI_PROJECT_NUM}</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,#{USER_NAME}</if>
			<if test="FI_PAY_DATE !=null and FI_PAY_DATE !=''">,to_date(#{FI_PAY_DATE},'yyyy-mm-dd')</if>
			<if test="FI_FAG !=null and FI_FAG !=''">,#{FI_FAG}</if>
			,0
			<if test="USER_CODE !=null and USER_CODE !=''">,#{USER_CODE}</if>
			<if test="FI_PAY_TYPE !=null and FI_PAY_TYPE !=''">,#{FI_PAY_TYPE}</if>
			<if test="FI_PRO_NAME !=null and FI_PRO_NAME !=''">,#{FI_PRO_NAME}</if>
			<if test="ORG_ID !=null and ORG_ID !=''">, #{ORG_ID}</if>
			<if test="SUP_ID !=null and SUP_ID !=''">,#{SUP_ID}</if>
			<if test="SUPPLIER_NAME !=null and SUPPLIER_NAME !=''">, #{SUPPLIER_NAME}</if>
			,sysdate
			,1
			<if test="APP_CREATE !=null and APP_CREATE !=''">, #{APP_CREATE}</if>
			)
		</insert>
		
		<select id="toMgAppAlready" parameterType="Map" resultType="Map">
			SELECT CCC.*
			  FROM (SELECT CC.*, ROWNUM ROWNO
			          FROM (SELECT H.ID HEAD_ID,
			                       tsdd.FLAG FI_PAY_TYPE,
			                       H.FI_PAY_MONEY,
			                       TO_CHAR(H.FI_PAY_DATE,'YYYY-MM-DD') FI_PAY_DATE,
			                       H.FI_PROJECT_NUM,
			                       H.FI_REALITY_MONEY,
			                       H.FI_REALITY_BANK,
			                       TO_CHAR( H.FI_ACCOUNT_DATE,'YYYY-MM-DD') FI_ACCOUNT_DATE,
			                       H.FI_APP_CODE,
			                       H.FI_APP_NAME,
			                       TO_CHAR(H.FI_APP_DATE,'YYYY-MM-DD') FI_APP_DATE,
			                       H.FI_CHECK_CODE,
			                       H.FI_CHECK_NAME,
			                       TO_CHAR(H.FI_CHECK_DATE,'YYYY-MM-DD') FI_CHECK_DATE,
			                       tsdd1.FLAG FI_STATUS,
			                       H.FI_REMARK,
			                       H.FI_FLAG,
			                       H.APP_CREATE
			                  FROM FI_FUND_HEAD H
			                  left join T_SYS_DATA_DICTIONARY tsdd on tsdd.code=H.FI_PAY_TYPE and tsdd.type='付款方式'
			                  left join T_SYS_DATA_DICTIONARY tsdd1 on tsdd1.code=H.FI_STATUS and tsdd1.type='核销状态'
			                  WHERE H.FI_STATUS = 5
			                  AND H.FI_FLAG=17
			                  <if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
			                  <if test="FI_SUPPLIERS_ID != null and FI_SUPPLIERS_ID != ''">AND H.SUPPLIER_NAME LIKE '%'||#{FI_SUPPLIERS_ID}||'%'</if>
			                  <if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
			                  <if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
			                  ORDER BY H.ID DESC
			 ) CC where rownum &lt;=#{PAGE_END}
							) CCC
					 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
			 </select>
			 
			<select id="toMgAppAlreadyCount" parameterType="Map" resultType="int">
				SELECT count(1) FROM FI_FUND_HEAD H
			                  WHERE H.FI_STATUS = 5
			                  AND H.FI_FLAG=17
			                  <if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
			                  <if test="FI_SUPPLIERS_ID != null and FI_SUPPLIERS_ID != ''">AND H.SUPPLIER_NAME LIKE '%'||#{FI_SUPPLIERS_ID}||'%'</if>
			                  <if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
			                  <if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
			                 
			 </select>
			 
			  <select id="queryHeXiaoPage" parameterType="Map" resultType="Map">
			 	select ffh.id FUND_ID,to_char(ffh.fi_pay_date,'yyyy-mm-dd') fi_pay_date,ffh.FI_PAY_BANK,ffh.FI_TO_THE_PAYEE,ffh.FI_REALITY_BANK,ffh.FI_TAGE_MONEY FI_PAY_YUE,
				to_char(nvl(ffh.FI_ACCOUNT_DATE,sysdate),'yyyy-mm-dd') FI_ACCOUNT_DATE,ffh.FI_PAY_MONEY,ffh.FI_FLAG,min(vffhs.SUP_NAME) SUP_NAME,ffh.FI_REALITY_ACCOUNT,ZH_CONCAT(ffhs.FUND_MONEY) MONEYORDERSAVE
				from fi_fund_head ffh
				left join V_FI_FUND_HEAD_SUPPER vffhs on vffhs.fund_id=ffh.ID 
				left join FI_FUND_HEAD_SPLIT ffhs on ffhs.fund_id=ffh.id
				where ffh.id=#{FUND_ID}
				group by ffh.id, ffh.fi_pay_date, ffh.FI_PAY_BANK, ffh.FI_TO_THE_PAYEE, ffh.FI_REALITY_BANK,ffh.FI_TAGE_MONEY, ffh.FI_ACCOUNT_DATE, ffh.FI_PAY_MONEY, ffh.FI_FLAG,ffh.FI_REALITY_ACCOUNT
			</select>
			
			<select id="querySuppByFundID"  parameterType="Map" resultType="Map">
			 	SELECT FUND_ID,SUP_ID FI_TAGE_ID,SUP_NAME FI_TAGE_NAME FROM V_FI_FUND_HEAD_SUPPER WHERE FUND_ID=#{FUND_ID}
			 </select>
			 
			  <select id="querySvaePoolMoney"  parameterType="Map" resultType="Map">
			 	select sum(FA_ACCOINT_MONEY) FA_ACCOINT_MONEY from fi_fund_account ffc 
				left join FI_DEPOSIT_POOL fdp on fdp.POOL_ID=ffc.FA_POOL_ID
				where ffc.FA_FUND_ID=#{FUND_ID} and fdp.TYPE=#{POOLID}
			 </select>
			 
			 <select id="queryPoolTypeOwnerMoney" parameterType="Map" resultType="Map">
			 	select sum(CANUSE_MONEY) CANUSE_MONEY from FI_DEPOSIT_POOL where OWNER_ID=#{OWNER_ID} and TYPE=#{POOLID} and STATUS=1
			 </select>
			 
			 <select id="queryPoolNumber" parameterType="Map" resultType="int">
			 	select count(ID) from fi_fund_account ffc 
				where ffc.FA_FUND_ID=#{FUND_ID} and ffc.FA_POOL_ID is not null
			 </select>
			 
			  <update id="toUpdateFHead" parameterType="Map">
			 	UPDATE FI_FUND_HEAD 
				SET FI_CHECK_DATE=SYSDATE
				,FI_CHECK_NAME=#{USERNAME}
				,FI_CHECK_CODE=#{USERCODE}
				<if test="FI_PAY_BANK !=null">,FI_PAY_BANK=#{FI_PAY_BANK}</if>
				<if test="FI_ACCOUNT_DATE!=null">,FI_ACCOUNT_DATE=TO_DATE(#{FI_ACCOUNT_DATE},'yyyy-MM-dd')</if>
				<if test="FI_REALITY_MONEY!=null">,FI_REALITY_MONEY=round(#{FI_REALITY_MONEY},2)</if>
				<if test="FI_REALITY_BANK!=null">,FI_REALITY_BANK=#{FI_REALITY_BANK}</if>
				<if test="FI_REALITY_ACCOUNT!=null">,FI_REALITY_ACCOUNT=#{FI_REALITY_ACCOUNT}</if>
				<if test="FI_TAGE !=null">,FI_TAGE=#{FI_TAGE}</if>
				<if test="FI_TAGE_ID !=null">,FI_TAGE_ID=#{FI_TAGE_ID}</if>
				<if test="FI_TAGE_NAME !=null">,FI_TAGE_NAME=#{FI_TAGE_NAME}</if>
				<if test="FI_TO_THE_PAYEE !=null">,FI_TO_THE_PAYEE=#{FI_TO_THE_PAYEE}</if>
				<if test="FI_PAY_YUE !=null">,FI_TAGE_MONEY=round(#{FI_PAY_YUE},2)</if>
				WHERE ID=#{FUND_ID}
	 		</update>
	 		
	 		<select id="toGetAccountCount" parameterType="Map" resultType="int">
				  select count(ID) from fi_fund_account fa where fa.fa_fund_id=#{FUND_ID}
			</select>
			
			<select id="queryAcountPollById"  parameterType="Map" resultType="Map">
				select ZH_CONCAT(DISTINCT FA_POOL_ID) POOLIDS from fi_fund_account fa where fa.fa_fund_id=#{FUND_ID} and fa.FA_POOL_ID is not null
			</select>
			
			<update id="updatePOOLStatus" parameterType="Map">
			 	update FI_DEPOSIT_POOL set STATUS=1 where POOL_ID in (${POOLIDS})
			 </update>
			 
			  <delete id="delAccountByHeadId" parameterType="Map">
			 	delete from fi_fund_account a where a.fa_fund_id=#{FUND_ID}
			 </delete>
			 
			 <select id="queryDetailByFundId1" parameterType="Map" resultType="Map">
			 	select * from fi_fund_detail where d_fund_id=#{FUND_ID} and D_STATUS=1 
			 </select>
			 
			 <insert id="doInsertAccountByDetail" parameterType="Map">
				INSERT INTO FI_FUND_ACCOUNT
				  (ID
				   <if test="D_FUND_ID != null and D_FUND_ID != ''">,FA_FUND_ID</if>
				   <if test="D_BEGING_ID != null and D_BEGING_ID != ''">,FA_BEGING_ID</if>
				   <if test="ID != null and ID != ''">,FA_DETAIL_ID</if>
				   <if test="FA_POOL_ID != null and FA_POOL_ID != ''">,FA_POOL_ID</if>
				   <if test="D_RECEIVE_MONEY != null and D_RECEIVE_MONEY != ''">,FA_ACCOINT_MONEY</if>
				   <if test="FA_CAN_USE_MONEY != null and FA_CAN_USE_MONEY != ''">,FA_CAN_USE_MONEY</if>
				   )
				VALUES
				  (SEQ_FUND_ACCOUNT.NEXTVAL
				   <if test="D_FUND_ID != null and D_FUND_ID != ''">,#{D_FUND_ID}</if>
				   <if test="D_BEGING_ID != null and D_BEGING_ID != ''">,#{D_BEGING_ID}</if>
				   <if test="ID != null and ID != ''">,#{ID}</if>
				   <if test="FA_POOL_ID != null and FA_POOL_ID != ''">,#{FA_POOL_ID}</if>
				   <if test="D_RECEIVE_MONEY != null and D_RECEIVE_MONEY != ''">,round(#{D_RECEIVE_MONEY},2)</if>
				   <if test="FA_CAN_USE_MONEY != null and FA_CAN_USE_MONEY != ''">,round(#{FA_CAN_USE_MONEY},2)</if>
				   )
			 </insert>
			 
			 <delete id="deleteFundSplit"  parameterType="Map">
			 	delete FI_FUND_HEAD_SPLIT WHERE FUND_ID=#{FUND_ID}
			 </delete>
			 
			 <insert id="insertFundSplit"  parameterType="Map">
				insert into FI_FUND_HEAD_SPLIT (FUND_MONEY,FUND_ID) values (#{FUND_MONEY},#{FUND_ID})
			</insert>
			
			<select id="queryFundHeadById1"  parameterType="Map" resultType="Map">
			 	select * from fi_fund_head where ID=#{FUND_ID}
			 </select>
			 
			 <select id="queryPoolTypeOwner" parameterType="Map" resultType="Map">
			 	select * from FI_DEPOSIT_POOL where OWNER_ID=#{OWNER_ID} and TYPE=#{TYPE} and STATUS=1 order by POOL_ID
			 </select>
			 
			 <update id="updatePoolStateByfundId" parameterType="Map">
			 	 update FI_DEPOSIT_POOL set CANUSE_MONEY=round(#{CANUSE_MONEY},2) where POOL_ID =#{FA_POOL_ID}
			 </update>
			 
			  <update id="doUpdateHeadStatus" parameterType="Map">
			 	UPDATE FI_FUND_HEAD 
				SET FI_CHECK_NAME=#{USERNAME,jdbcType=VARCHAR}
				,FI_CHECK_DATE=SYSDATE
				,FI_CHECK_CODE=#{USERCODE,jdbcType=VARCHAR}
				,FI_STATUS=1
				WHERE ID=#{FUND_ID,jdbcType=VARCHAR}
			 </update>
			 
			 <select id="queryFundTime" parameterType="Map" resultType="Map">
				select to_char(FI_ACCOUNT_DATE,'yyyy-MM-dd') FI_ACCOUNT_DATE,to_char(FI_PAY_DATE,'yyyy-MM-dd') FI_PAY_DATE from FI_FUND_HEAD where ID=#{FUND_ID}
			</select>
			
			<select id="queryDetailByFundId" parameterType="Map" resultType="Map">
			 	select * from fi_fund_detail where d_fund_id=#{FUND_ID} 
			 </select>
			 
			 <update id="updateBegin" parameterType="Map">
			 	 update fi_r_beginning set VINUAL_MONEY=round(nvl(VINUAL_MONEY,0)+nvl(#{D_RECEIVE_MONEY},0),2),BEGINNING_STATUS=0,MODIFY_TIME=sysdate where BEGINNING_ID=#{D_BEGING_ID}
			 </update>
			 
			 <update id="updateBeginState1"  parameterType="Map">
			 	update fi_r_beginning set BEGINNING_FLAG=3,MODIFY_TIME=sysdate,VINUAL_FLAG=1
			 	<if test="TIME != null and TIME != ''">,VINUAL_DATE=to_date(#{TIME},'yyyy-MM-dd')</if>
			 	where BEGINNING_ID=#{D_BEGING_ID}
			 </update>
			 
			  <update id="updateRENT_PAIDDueNew" parameterType="Map">
			 	update  fi_overdue set RENT_PAID=round(nvl(RENT_PAID,0)+nvl(#{D_RECEIVE_MONEY},0),2) where pay_code=#{D_PAY_CODE} and PERIOD=#{PERIOD} AND CREATE_DATE>=TO_DATE(#{TIME},'YYYY-MM-DD')
			 </update>
			 
			 <select id="queryDunDate"  parameterType="Map" resultType="Map">
			 	select frb.paylist_code,frb.beginning_num from fi_fund_DETAIL ffd 
				left join fi_r_beginning frb on frb.beginning_id=ffd.d_beging_id
				where ffd.d_status=1 and ffd.d_fund_id=#{FUND_ID} and  TO_DATE(#{TIME},'yyyy-MM-dd')>frb.BEGINNING_RECEIVE_DATA
				group by frb.paylist_code,frb.beginning_num
			 </select>
			 
			 <update id="updateDunVinual" parameterType="Map">
			 	MERGE INTO fi_overdue t 
				USING (
					select PAY_CODE,PERIOD,round(PENALTY_RECE) PENALTY_RECE from fi_overdue where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM} and CREATE_DATE=TO_DATE(#{TIME},'yyyy-MM-dd')
				) tt
				ON (t.PAY_CODE=tt.PAY_CODE and t.PERIOD=tt.PERIOD and t.CREATE_DATE>=TO_DATE(#{TIME},'YYYY-MM-DD'))
				WHEN MATCHED THEN UPDATE set t.VINUAL_RECE=tt.PENALTY_RECE,t.PENALTY_RECE=tt.PENALTY_RECE,t.DUE_STATUS=1
			 </update>
			 
			 <update id="updateDunVinualNEW" parameterType="Map">
			 	MERGE INTO fi_overdue t 
				USING (
					select PAY_CODE,PERIOD,round(PENALTY_RECE) PENALTY_RECE from fi_overdue where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM} and CREATE_DATE=TO_DATE(#{TIME},'yyyy-MM-dd')
				) tt
				ON (t.PAY_CODE=tt.PAY_CODE and t.PERIOD=tt.PERIOD and t.CREATE_DATE>=TO_DATE(#{TIME},'YYYY-MM-DD'))
				WHEN MATCHED THEN UPDATE set t.VINUAL_RECE=tt.PENALTY_RECE,t.VINUAL_DUN_STATUS=1
			 </update>
			 
			 <select id="queryDunDateNo"  parameterType="Map" resultType="Map">
			 	select frb.paylist_code,frb.beginning_num from fi_fund_DETAIL ffd 
				left join fi_r_beginning frb on frb.beginning_id=ffd.d_beging_id
				where ffd.d_status=1 and ffd.d_fund_id=#{FUND_ID} and frb.BEGINNING_RECEIVE_DATA>=TO_DATE(#{TIME},'yyyy-MM-dd')
				group by frb.paylist_code,frb.beginning_num
			 </select>
			 
			 <update id="updateDunVinualNo" parameterType="Map">
			 	delete fi_overdue where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM}
			 </update>
			 
			 <update id="updateDunVinualNoNew" parameterType="Map">
			 	update fi_overdue t set t.VINUAL_RECE=0,t.VINUAL_DUN_STATUS=1 where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM}
			 </update>
			 
			 <update id="updateDunVinualHeXiao" parameterType="Map">
			 	MERGE INTO fi_overdue t 
				USING (
					select PAY_CODE,PERIOD,round(PENALTY_RECE) PENALTY_RECE from fi_overdue where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM} and CREATE_DATE=TO_DATE(#{TIME},'yyyy-MM-dd')
				) tt
				ON (t.PAY_CODE=tt.PAY_CODE and t.PERIOD=tt.PERIOD and t.CREATE_DATE>=TO_DATE(#{TIME},'YYYY-MM-DD'))
				WHEN MATCHED THEN UPDATE set t.VINUAL_PAID=to_number(nvl(#{D_RECEIVE_MONEY},0)),t.VINUAL_DUE_DATE=TO_DATE(#{TIME},'YYYY-MM-DD'),t.DUE_STATUS=1,t.VINUAL_DUN_FLAG=1,t.OVERDUE_STATUS=0
			 </update>
			 
			 <update id="updateDunVinualHeXiaoNew" parameterType="Map">
			 	MERGE INTO fi_overdue t 
				USING (
					select PAY_CODE,PERIOD,round(PENALTY_RECE) PENALTY_RECE from fi_overdue where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM} and CREATE_DATE=TO_DATE(#{TIME},'yyyy-MM-dd')
				) tt
				ON (t.PAY_CODE=tt.PAY_CODE and t.PERIOD=tt.PERIOD and t.CREATE_DATE>=TO_DATE(#{TIME},'YYYY-MM-DD'))
				WHEN MATCHED THEN UPDATE set t.VINUAL_PAID=to_number(nvl(#{D_RECEIVE_MONEY},0)),t.VINUAL_DUE_DATE=TO_DATE(#{TIME},'YYYY-MM-DD'),t.VINUAL_DUN_FLAG=1,t.OVERDUE_STATUS=0
			 </update>
			 
			 <select id="queryFundHeadById"  parameterType="Map" resultType="Map">
			 	select * from fi_fund_head where ID=#{FUND_ID} and FI_TAGE_MONEY>0
			 </select>
			 
			 <insert id="insertPoolDate" parameterType="Map">
			 	insert into FI_DEPOSIT_POOL
			 	(
			 		POOL_ID
			 		<if test="OWNER_ID != null and OWNER_ID != ''">,OWNER_ID</if>
			 		<if test="BASE_MONEY != null and BASE_MONEY != ''">,BASE_MONEY</if>
			 		<if test="CANUSE_MONEY != null and CANUSE_MONEY != ''">,CANUSE_MONEY</if>
			 		<if test="STATUS != null and STATUS != ''">,STATUS</if>
			 		,PAY_TIME
			 		<if test="TYPE != null and TYPE != ''">,TYPE</if>
			 		<if test="SOURCE_ID != null and SOURCE_ID != ''">,SOURCE_ID</if>
			 	)values
			 	(
			 		SEQ_FI_DEPOSIT_POOL.nextval
			 		<if test="OWNER_ID != null and OWNER_ID != ''">,#{OWNER_ID}</if>
			 		<if test="BASE_MONEY != null and BASE_MONEY != ''">,round(#{BASE_MONEY},2)</if>
			 		<if test="CANUSE_MONEY != null and CANUSE_MONEY != ''">,round(#{CANUSE_MONEY},2)</if>
			 		<if test="STATUS != null and STATUS != ''">,#{STATUS}</if>
			 		,sysdate
			 		<if test="TYPE != null and TYPE != ''">,#{TYPE}</if>
			 		<if test="SOURCE_ID != null and SOURCE_ID != ''">,#{SOURCE_ID}</if>
			 	)
			 </insert>
			 
			 <update id="doReject" parameterType="Map">
			 	UPDATE FI_FUND_HEAD
				SET FI_ACCOUNT_DATE='',
				FI_CHECK_NAME='',
				FI_CHECK_DATE='',
				FI_CHECK_CODE='',
				<if test="FI_REMARK!=null">FI_REMARK=#{FI_REMARK},</if>
				FI_STATUS=4
				WHERE ID=#{FUND_ID}
			 </update>
			 
			 <delete id="doRejectAccount" parameterType="String">
			 	DELETE FROM FI_FUND_ACCOUNT A WHERE A.FA_FUND_ID=#{FUND_ID}
			 </delete>
			 
			 <select id="toSupperFundMg" parameterType="Map" resultType="Map">
				SELECT CCC.*
				  FROM (SELECT CC.*, ROWNUM ROWNO
				          FROM (SELECT H.ID HEAD_ID,
				                       tsdd.FLAG FI_PAY_TYPE,
				                       H.FI_PAY_MONEY,
				                       TO_CHAR(H.FI_PAY_DATE,'YYYY-MM-DD') FI_PAY_DATE,
				                       H.FI_PROJECT_NUM,
				                       H.FI_REALITY_MONEY,
				                       H.FI_REALITY_BANK,
				                       TO_CHAR( H.FI_ACCOUNT_DATE,'YYYY-MM-DD') FI_ACCOUNT_DATE,
				                       H.FI_APP_CODE,
				                       H.FI_APP_NAME,
				                       TO_CHAR(H.FI_APP_DATE,'YYYY-MM-DD') FI_APP_DATE,
				                       H.FI_CHECK_CODE,
				                       H.FI_CHECK_NAME,
				                       TO_CHAR(H.FI_CHECK_DATE,'YYYY-MM-DD') FI_CHECK_DATE,
				                       tsdd1.FLAG FI_STATUS,
				                       H.FI_REMARK,
				                       H.FI_FLAG,
				                       H.UPLOADTYPE,
				                       H.FI_TO_THE_PAYEE,
				                       H.FI_TO_THE_ACCOUNT,
				                       H.SUP_ID SUPPLIER_IDS,
				                       H.SUPPLIER_NAME
				                  FROM FI_FUND_HEAD H
				                  left join T_SYS_DATA_DICTIONARY tsdd on tsdd.code=H.FI_PAY_TYPE and tsdd.type='付款方式'
				                  left join T_SYS_DATA_DICTIONARY tsdd1 on tsdd1.code=H.FI_STATUS and tsdd1.type='核销状态'
				                  WHERE H.FI_STATUS = 5
				                  AND H.FI_FLAG=16
				                  <if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
				                  <if test="FI_SUPPLIERS_ID != null and FI_SUPPLIERS_ID != ''">AND H.SUPPLIER_NAME LIKE '%'||#{FI_SUPPLIERS_ID}||'%'</if>
				                  <if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
				                  <if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
				                  <if test="UPLOADTYPE != null and UPLOADTYPE != ''">AND H.UPLOADTYPE=#{UPLOADTYPE}</if>
				                  <if test="FI_REALITY_BANK != null and FI_REALITY_BANK != ''">AND H.FI_REALITY_BANK like '%'||#{FI_REALITY_BANK}||'%'</if>
				                  ORDER BY H.ID DESC
				                 ) CC where rownum &lt;=#{PAGE_END}
								) CCC
						 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
				 </select>
				 
				<select id="toSupperFundMgCount" parameterType="Map" resultType="int">
				 SELECT count(1) FROM FI_FUND_HEAD H
				                  WHERE H.FI_STATUS = 5
				                  AND H.FI_FLAG=16
				                  <if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
				                  <if test="FI_SUPPLIERS_ID != null and FI_SUPPLIERS_ID != ''">AND H.SUPPLIER_NAME LIKE '%'||#{FI_SUPPLIERS_ID}||'%'</if>
				                  <if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
				                  <if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
				                  <if test="UPLOADTYPE != null and UPLOADTYPE != ''">AND H.UPLOADTYPE=#{UPLOADTYPE}</if>
				                  <if test="FI_REALITY_BANK != null and FI_REALITY_BANK != ''">AND H.FI_REALITY_BANK like '%'||#{FI_REALITY_BANK}||'%'</if>
				             
				 </select>
				 
				 <select id="querySuppForCode" parameterType="String" resultType="Map">
					select ORAGNIZATION_CODE from t_sys_suppliers where SUP_ID=#{supplier_id}
				</select>
				
				<select id="querySupp_uplad_All" parameterType="Map" resultType="Map">
				 	SELECT H.ID HEAD_ID,
				                       H.FI_PAY_TYPE,
				                       H.FI_PAY_MONEY,
				                       TO_CHAR(H.FI_PAY_DATE,'YYYY-MM-DD') FI_PAY_DATE,
				                       H.FI_PROJECT_NUM,
				                       H.FI_PAY_MONEY MONEY,
				                       H.FI_REALITY_MONEY,
				                       H.FI_REALITY_BANK,
				                       TO_CHAR( H.FI_ACCOUNT_DATE,'YYYY-MM-DD') FI_ACCOUNT_DATE,
				                       H.FI_APP_CODE,
				                       H.FI_APP_NAME,
				                       TO_CHAR(H.FI_APP_DATE,'YYYY-MM-DD') FI_APP_DATE,
				                       H.FI_CHECK_CODE,
				                       H.FI_CHECK_NAME,
				                       TO_CHAR(H.FI_CHECK_DATE,'YYYY-MM-DD') FI_CHECK_DATE,
				                       H.FI_STATUS,
				                       H.FI_REMARK,
				                       H.FI_FLAG,
				                       H.UPLOADTYPE,
				                       H.FI_TO_THE_PAYEE,
				                       H.FI_TO_THE_ACCOUNT,
				                       H.SUP_ID,
									   H.SUP_ID SUPPLIER_IDS
				                       FROM FI_FUND_HEAD H
				                  WHERE H.FI_STATUS = 5 AND H.FI_FLAG=16 AND H.UPLOADTYPE=0
				                  <if test="HEAD_ID != null and HEAD_ID != ''">AND H.ID LIKE '%'||#{HEAD_ID}||'%'</if>
				                  <if test="FI_SUPPLIERS_ID != null and FI_SUPPLIERS_ID != ''">AND H.SUPPLIER_NAME LIKE '%'||#{FI_SUPPLIERS_ID}||'%'</if>
				                  <if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
				                  <if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(H.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
				                  <if test="UPLOADTYPE != null and UPLOADTYPE != ''">AND H.UPLOADTYPE=#{UPLOADTYPE}</if>
				                  <if test="FI_REALITY_BANK != null and FI_REALITY_BANK != ''">AND H.FI_REALITY_BANK like '%'||#{FI_REALITY_BANK}||'%'</if>
				 </select>
				 
				 <update id="destroySuppUp" parameterType="Map">
				 	update fi_fund_head set UPLOADTYPE=0 where ID in (${IDS})
				 </update>
				 
				 <update id="updateFund_head" parameterType="Map">
				 	update fi_fund_head set UPLOADTYPE=#{UPLOADTYPE} 
				 	<if test="CUST_NAME != null and CUST_NAME != ''">, FI_TO_THE_PAYEE=#{CUST_NAME}</if>
				 	<if test="BANK_ACCOUNT != null and BANK_ACCOUNT != ''">, FI_TO_THE_ACCOUNT=#{BANK_ACCOUNT}</if>
				 	<if test="FI_REALITY_BANK != null and FI_REALITY_BANK != ''">, FI_REALITY_BANK=#{FI_REALITY_BANK}</if>
				 	where ID=#{HEAD_ID}
				 </update>
				 
				 <select id="HEAD_Upload" parameterType="map" resultType="map">
					select t.*,rownum ROW_NUM from (
						select ffh.id head_id,to_char(ffh.FI_PAY_DATE,'yyyy-MM-dd') FI_PAY_DATE,ffd.D_PROJECT_CODE PRO_CODE,to_char(ffd.D_RECEIVE_DATE,'yyyy-MM-dd') D_RECEIVE_DATE
						,fcc.NAME CUSTNAME,fph.company_name,fph.sup_shortname SUP_NAME,fph.equipmeninfos,'租金' FI_PRO_NAME,ffd.period BEGINNING_NUM,sum(nvl(ffd.D_PAY_MONEY,0)) BEGINNING_MONEY
						from fi_fund_head ffh
						left join fi_fund_detail ffd on ffd.d_fund_id=ffh.id
						left join fil_project_head fph on fph.pro_code=ffd.d_project_code
						left join FIL_CUST_CLIENT fcc on fcc.id=fph.CLIENT_ID
						where FI_FLAG in (16,17) and FI_STATUS in (0,4)
						<if test="IDS != null and IDS != ''">and ffh.id in (${IDS})</if>
				        <if test="ORG_LIST != null and ORG_LIST != ''">and ffh.FI_ORG_ID in ${ORG_LIST}</if>
				        <if test="FI_PAY_DATE1 != null and FI_PAY_DATE1 != ''">AND TO_DATE(TO_CHAR(ffh.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') >= TO_DATE(#{FI_PAY_DATE1},'yyyy-MM-dd')</if>
				        <if test="FI_PAY_DATE2 != null and FI_PAY_DATE2 != ''"><![CDATA[AND TO_DATE(TO_CHAR(ffh.FI_PAY_DATE,'yyyy-MM-DD'),'yyyy-MM-dd') <= TO_DATE(#{FI_PAY_DATE2},'yyyy-MM-dd')]]></if>
				        <if test="HEAD_ID != null and HEAD_ID != ''">AND ffh.ID LIKE '%'||#{HEAD_ID}||'%'</if>
				        <if test="FI_PAY_MONEY != null and FI_PAY_MONEY != ''">AND ffh.FI_PAY_MONEY LIKE '%'||#{FI_PAY_MONEY}||'%'</if>
				        <if test="FI_STATUS != null and FI_STATUS != ''">AND ffh.FI_STATUS LIKE '%'||#{FI_STATUS}||'%'</if>
						group by ffh.id, to_char(ffh.FI_PAY_DATE,'yyyy-MM-dd'), ffd.D_PROJECT_CODE, to_char(ffd.D_RECEIVE_DATE,'yyyy-MM-dd'), fcc.NAME
						, fph.company_name, fph.sup_shortname, fph.equipmeninfos, ffd.period
						 order by ffh.id
						) t
				</select>
				
				<update id="updateFI_STATUSByHandId2" parameterType="map">
					update fi_fund_head set FI_STATUS=2,FI_ACCOUNT_DATE=to_date(#{TIME},'yyyy-MM-dd') 
					<if test="FI_REALITY_BANK !=null and FI_REALITY_BANK !=''">,FI_REALITY_BANK=#{FI_REALITY_BANK}</if>
					<if test="FI_CHECK_NAME !=null and FI_CHECK_NAME !=''">,FI_CHECK_NAME=#{FI_CHECK_NAME}</if>
					,FI_CHECK_DATE=sysdate
					where ID=#{deducted_id}
				</update>
				
				<select id="getBeginListByHandIdNew" parameterType="java.util.Map" resultType="map">
					select * from fi_fund_detail where d_fund_id=#{deducted_id}
				</select>
				
				<delete id="delAccByDeductedId" parameterType="Map">
				 	delete from fi_fund_account a where a.fa_fund_id=#{deducted_id}
				 </delete>
				 
				 <select id="getAccountById" parameterType="java.util.Map" resultType="map">
					 select ffd.ID detail_id,frb.BEGINNING_ID,ffh.ID head_ID,ROUND(nvl(ffd.D_RECEIVE_MONEY,0),2) D_RECEIVE_MONEY from fi_fund_detail ffd
					  left join fi_r_beginning frb on ffd.D_BEGING_ID=frb.BEGINNING_ID
					  left join fi_fund_head ffh on ffh.ID=ffd.D_FUND_ID where ffh.ID=#{deducted_id}
				</select>
				
				<insert id="insertAccount" parameterType="java.util.Map">
					INSERT INTO FI_FUND_ACCOUNT
					  (
					    ID,
					    FA_FUND_ID,
						<if test="BEGINNING_ID !=null and BEGINNING_ID !=''">FA_BEGING_ID,</if>
					    FA_DETAIL_ID
						<if test="D_RECEIVE_MONEY !=null and D_RECEIVE_MONEY !=''">,FA_ACCOINT_MONEY</if>
					  )
					  VALUES
					  (
					    SEQ_FUND_ACCOUNT.nextval
					    ,#{HEAD_ID}
					    <if test="BEGINNING_ID !=null and BEGINNING_ID !=''">,#{BEGINNING_ID}</if>
					    ,#{DETAIL_ID}
					    <if test="D_RECEIVE_MONEY !=null and D_RECEIVE_MONEY !=''">,round(#{D_RECEIVE_MONEY},2)</if>
					  ) 
				</insert>
				
		<update id="updateJoinDateVinualStauts" parameterType="java.util.Map">
			update FI_R_BEGINNING_JOIN set BEGINNING_STATUS=1 where PAYLIST_CODE=#{PAYLIST_CODE} and BEGINNING_NUM=#{BEGINNING_NUM} and ITEM_FLAG=#{ITEM_FLAG}
		</update>
				
		<update id="updateJoinDateVinualStauts1" parameterType="java.util.Map">
			update FI_R_BEGINNING_JOIN set BEGINNING_STATUS=0 where PAYLIST_CODE=#{D_PAY_CODE} and BEGINNING_NUM=#{PERIOD} and ITEM_FLAG=#{ITEM_FLAG}
		</update>
		
		<select id="queryPaylist_codeNum" parameterType="String" resultType="map">
				select ffd.D_PAY_CODE PAYLIST_CODE,ffd.period BEGINNING_NUM from fi_fund_head ffh
				left join fi_fund_detail ffd on ffd.D_fund_id=ffh.id
				where ffh.id=#{FUND_ID}
				group by ffd.D_PAY_CODE,ffd.period
		</select>
		
		<delete id="deleteJoinDate" parameterType="java.util.Map">
				 DELETE FI_R_BEGINNING_JOIN FJ WHERE FJ.PAYLIST_CODE=#{PAYLIST_CODE} AND FJ.BEGINNING_NUM=#{BEGINNING_NUM}
		</delete>
		
		<insert id="insertJoinDate" parameterType="java.util.Map">
				INSERT INTO FI_R_BEGINNING_JOIN
			              (ID,
			               PROJ_ID,
			               PRO_CODE,
			               CUST_ID,
			               CUST_NAME,
			               SUP_ID,
			               SUPPLIER_NAME,
			               COMPANY_ID,
			               COMPANY_NAME,
			               SIGN_FLAG,
			               SIGN_NAME,
			               PAYLIST_CODE,
			               BEGINNING_NUM,
			               BANK_CUSTNAME,
			               BANK_NAME,
			               BANK_ACCOUNT,
			               BEGINNING_NAME,
			               BEGINNING_RECEIVE_DATA,
			               ITEM_FLAG,
			               BEGINNING_FALSE_NUM,
			               BEGINNING_FALSE_REASON,
			               BEGINNING_STATUS,
			               RENT_PAYMENT_TYPE,
			               BEGINNING_MONEY,
			               BEGINNING_PAID,
			               ID_CARD_NO,
			               PRODUCT_NAME,
			               CUST_TYPE,
			               UPLOAD_THREAD,
			               MONEY_FLAG,
			               STATUS,
			               BEGIN_ID,
			               INVOICE_TARGET_TYPE,
			               invoice_target_id,
			               POINT_DATE,
			               IS_BUY_PENALTY
						   ,VINUAL_FLAG
						   ,VINUAL_MONEY
						   ,LEASE_CODE
						   ,VINUAL_RECE)
			              SELECT SEQ_FI_R_BEGINNING_JOIN.NEXTVAL,
			                     FPH.ID,
			                     FPH.PRO_CODE,
			                     FPH.CLIENT_ID,
			                     FCC.NAME,
			                     VPS.SUP_ID,
						         VPS.SUP_NAME SUP_SHORTNAME,
						         VPS.COMPANY_ID,
						         VPS.COMPANY_NAME,
			                     BAS.SIGN_FLAG,
			                     TSDD.FLAG,
			                     TBP.PAYLIST_CODE,
			                     A.BEGINNING_NUM,
			                     FCO.BANK_CUSTNAME,
			                     FCO.BANK_NAME,
			                     FCO.BANK_ACCOUNT,
			                     A.BEGINNING_NAME,
			                     A.BEGINNING_RECEIVE_DATA,
			                     A.ITEM_FLAG,
			                     A.BEGINNING_FALSE_NUM,
			                     A.BEGINNING_FALSE_REASON,
			                     A.BEGINNING_STATUS,
			                     FPH.RENT_PAYMENT_TYPE,
			                     ROUND(NVL(A.BEGINNING_MONEY, 0), 2) BEGINNING_MONEY,
			                     ROUND(NVL(A.BEGINNING_PAID, 0), 2) BEGINNING_PAID,
			                     CASE
			                       WHEN fcc1.TYPE = 'LP' THEN
			                        fcc1.ORAGNIZATION_CODE
			                       ELSE
			                        fcc1.ID_CARD_NO
			                     END ID_CARD_NO,
			                     VPS.PRODUCT_NAME,
			                     FCC.TYPE,
			                     A.UPLOAD_THREAD,
			                     A.MONEY_FLAG,
			                     FPH.STATUS,
			                     A.BEGIN_ID,
			                     fph.invoice_target_type,
			                     fph.invoice_target_id,
			                     A.CREATE_DATE POINT_DATE,
			                     A.IS_BUY_PENALTY,A.VINUAL_FLAG,
		     					ROUND(NVL(A.VINUAL_MONEY, 0), 2) VINUAL_MONEY,
			 					FPH.LEASE_CODE,
								A.VINUAL_RECE
			                FROM (SELECT * FROM (SELECT 
			                					 WM_CONCAT(FRB.BEGINNING_ID) AS BEGIN_ID,
			                					 MAX(FRB.PAYLIST_CODE)PAYLIST_CODE ,
			                                     MAX(FRB.BEGINNING_NUM)BEGINNING_NUM ,
			                                     MIN(FRB.BEGINNING_RECEIVE_DATA) AS BEGINNING_RECEIVE_DATA ,
			                                     2 ITEM_FLAG,
			                                      MAX (DECODE(FRB.BEGINNING_NAME,'本金',FRB.BEGINNING_FALSE_NUM)) BEGINNING_FALSE_NUM ,
			                                     MAX (DECODE(FRB.BEGINNING_NAME,'本金',FRB.BEGINNING_FALSE_REASON)) AS BEGINNING_FALSE_REASON,
			                                     MAX(FRB.BEGINNING_STATUS) AS BEGINNING_STATUS ,
			                                     '租金' BEGINNING_NAME,
			                                     SUM(NVL(FRB.BEGINNING_MONEY, 0)) BEGINNING_MONEY,
			                                     SUM(NVL(FRB.BEGINNING_PAID, 0)) BEGINNING_PAID,
			                                     MAX(FRB.INVENT_STATUS) UPLOAD_THREAD,
			                                     MAX(CASE WHEN FRB.BEGINNING_MONEY&lt;0 THEN 1 ELSE 0 END) AS MONEY_FLAG,
			                                     MAX(TRUNC(FRB.BEGINNING_RECEIVE_DATA)) CREATE_DATE,
			                                     0 IS_BUY_PENALTY,
			                                     MAX(FRB.VINUAL_FLAG) VINUAL_FLAG,
				     							SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY,
												0 VINUAL_STATUS,
												0 VINUAL_RECE
			                                FROM FI_R_BEGINNING FRB
			                               WHERE last_day(sysdate) >= FRB.BEGINNING_RECEIVE_DATA
			                                 AND FRB.ITEM_FLAG = 2
			                                 --AND FRB.BEGINNING_FLAG = 0
			                                 AND FRB.PAYLIST_CODE=#{PAYLIST_CODE}
			                                 AND FRB.BEGINNING_NUM=#{BEGINNING_NUM}
			                    UNION ALL
			                               SELECT 
			                             TO_CHAR(FO.ID) BEGIN_ID,FO.PAY_CODE PAYLIST_CODE,
			                             FO.PERIOD BEGINNING_NUM,
			                             FO.RENT_DATE BEGINNING_RECEIVE_DATA,
			                             5 ITEM_FLAG,
			                             FO.BEGINNING_FALSE_NUM,
			                             FO.BEGINNING_FALSE_REASON,
			                             FO.OVERDUE_STATUS BEGINNING_STATUS,
			                             '违约金' BEGINNING_NAME,
			                            CASE WHEN FO.DUE_STATUS=1 THEN ROUND(NVL(FO.PENALTY_RECE, 0)) ELSE 0 END BEGINNING_MONEY,
                           				CASE WHEN FO.DUE_STATUS=1 THEN ROUND(NVL(FO.PENALTY_PAID, 0), 2) ELSE 0 END BEGINNING_PAID,
			                             FO.DUE_STATUS UPLOAD_THREAD,
			                             0 AS MONEY_FLAG,
			                             TRUNC(FO.CREATE_DATE) CREATE_DATE,
			                             FO.IS_BUY_PENALTY,
			                             FO.VINUAL_DUN_FLAG VINUAL_FLAG,
			     						ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY,
										CASE WHEN FO.VINUAL_DUN_STATUS=1 AND ROUND(NVL(FO.PENALTY_RECE, 0))-ROUND(NVL(FO.PENALTY_PAID, 0), 2)>0.0005 THEN 1 ELSE 0 END VINUAL_STATUS,
										CASE WHEN FO.VINUAL_DUN_STATUS=1 THEN ROUND(NVL(FO.VINUAL_RECE, 0), 2) ELSE 0 END VINUAL_RECE
			                       FROM FI_OVERDUE FO
			                       WHERE TRUNC(FO.CREATE_DATE) = TRUNC(SYSDATE)
			                       AND FO.PAY_CODE=#{PAYLIST_CODE}
			                       AND FO.PERIOD=#{BEGINNING_NUM}
			                       AND (FO.DUE_STATUS = 1 OR FO.VINUAL_DUN_STATUS=1)
			                        and rownum=1
			                        )                                                         
			                         ) A
			                LEFT JOIN FIL_RENT_PLAN_HEAD_MAX_V TBP
			                  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                LEFT JOIN FIL_PROJECT_HEAD FPH
			                  ON FPH.ID = TBP.PROJECT_ID
			                LEFT JOIN FIL_CUST_OPENINGBANK FCO
			                  ON FCO.ID = FPH.BANK_ID
			                LEFT JOIN BANK_ACCOUNT_SIGN BAS
			                  ON BAS.BANK_NAME = FCO.BANK_NAME
			                 AND BAS.BANK_ACCOUNT = FCO.BANK_ACCOUNT
			                 AND BAS.BANK_FLAG = 'CCB'
			                LEFT JOIN FIL_CUST_CLIENT FCC
			                  ON FCC.ID = FPH.CLIENT_ID
			                LEFT JOIN FIL_CUST_CLIENT fcc1 
			                 ON fcc1.id=fco.CLIENT_ID
			                LEFT JOIN T_SYS_DATA_DICTIONARY TSDD
			                  ON TSDD.CODE = BAS.SIGN_FLAG
			                 AND TSDD.TYPE = '签约标识'
			               WHERE FPH.STATUS >= 20
			                 AND TBP.STATUS IN (0, 4, 7, 8)
			                 AND ((NVL(A.BEGINNING_MONEY, 0) - NVL(A.BEGINNING_PAID, 0))>0.005 OR (NVL(A.VINUAL_RECE,0)>0.005 AND A.VINUAL_STATUS=1))
				
			</insert>
			
			<select id="query_Bank_A_TO_B_CU" parameterType="java.util.Map" resultType="java.util.Map">
				 SELECT * FROM (	 
				SELECT  CC.*,ROWNUM ROWNO FROM 
				(
				 select frbj.id,frbj.paylist_code,frbj.LEASE_CODE,to_char(frbj.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,frbj.BEGINNING_NAME,frbj.ITEM_FLAG
				 ,frbj.BEGINNING_NUM,frbj.BEGINNING_STATUS,round(nvl(frbj.BEGINNING_MONEY,0),2) BEGINNING_MONEY
				 ,round(nvl(frbj.BEGINNING_PAID,0),2) BEGINNING_PAID,round(nvl(frbj.VINUAL_MONEY,0),2) VINUAL_MONEY
				 ,frbj.pro_code,frbj.CUST_NAME CUSTNAME,frbj.CUST_ID,frbj.SUPPLIER_NAME SUPPLIERS_NAME,frbj.COMPANY_NAME,frbj.PRODUCT_NAME
				,case when frbj.LOCKTYPE=1 then '未锁定' else '已锁定' end LOCKNAME
				from FI_R_BEGINNING_JOIN frbj
				where frbj.VINUAL_FLAG=1 AND round(nvl(frbj.BEGINNING_MONEY,0),2) - round(nvl(frbj.BEGINNING_PAID,0),2)>0.0005
				<if test="SUP_ID != null and SUP_ID != ''"> and frbj.SUP_ID=#{SUP_ID}</if>
						<if test="CUST_NAME !=null and CUST_NAME !=''"> and frbj.CUST_NAME like '%'||#{CUST_NAME}||'%'</if>
						<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and frbj.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
						<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
						<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
						<if test="COM_NAME !=null and COM_NAME !=''"> and frbj.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
						<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and frbj.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
						<if test="BEGINNING_STATUS != null and BEGINNING_STATUS != ''"> and frbj.BEGINNING_STATUS=#{BEGINNING_STATUS}</if>
				order by frbj.BEGINNING_STATUS,frbj.PRO_CODE,frbj.paylist_code,frbj.beginning_num,frbj.ITEM_FLAG desc
			) CC where rownum &lt;=#{PAGE_END}
						) CCC
				 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="query_Bank_A_TO_B_CU_count" parameterType="java.util.Map" resultType="int">
			SELECT  count(1) FROM (
					select frbj.id,frbj.paylist_code,frbj.LEASE_CODE,to_char(frbj.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,frbj.BEGINNING_NAME,frbj.ITEM_FLAG
				 ,frbj.BEGINNING_NUM,frbj.BEGINNING_STATUS,round(nvl(frbj.BEGINNING_MONEY,0),2) BEGINNING_MONEY
				 ,round(nvl(frbj.BEGINNING_PAID,0),2) BEGINNING_PAID,round(nvl(frbj.VINUAL_MONEY,0),2) VINUAL_MONEY
				 ,frbj.pro_code,frbj.CUST_NAME CUSTNAME,frbj.CUST_ID,frbj.SUPPLIER_NAME SUPPLIERS_NAME,frbj.COMPANY_NAME,frbj.PRODUCT_NAME
				,case when frbj.LOCKTYPE=1 then '未锁定' else '已锁定' end LOCKNAME
				from FI_R_BEGINNING_JOIN frbj
				where frbj.VINUAL_FLAG=1 AND round(nvl(frbj.BEGINNING_MONEY,0),2) - round(nvl(frbj.BEGINNING_PAID,0),2)>0.0005
				<if test="SUP_ID != null and SUP_ID != ''"> and frbj.SUP_ID=#{SUP_ID}</if>
						<if test="CUST_NAME !=null and CUST_NAME !=''"> and frbj.CUST_NAME like '%'||#{CUST_NAME}||'%'</if>
						<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and frbj.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
						<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
						<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and frbj.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
						<if test="COM_NAME !=null and COM_NAME !=''"> and frbj.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
						<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and frbj.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
						<if test="BEGINNING_STATUS != null and BEGINNING_STATUS != ''"> and frbj.BEGINNING_STATUS=#{BEGINNING_STATUS}</if>
				)c 
	</select>
	
	<select id="query_Back_Fund" parameterType="java.util.Map" resultType="java.util.Map">
		 SELECT * FROM (	 
				SELECT  CC.*,ROWNUM ROWNO FROM 
				(
					 SELECT FPH.ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.BEGINNING_MONEY, 0), 2) BEGINNING_MONEY,ROUND(NVL(A.BEGINNING_PAID, 0), 2) BEGINNING_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.VINUAL_MONEY, 0), 2) VINUAL_MONEY,A.VINUAL_DATE,A.UPLOAD_TYPE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, '租金' BEGINNING_NAME, SUM(NVL(FRB.BEGINNING_MONEY, 0)) BEGINNING_MONEY,
			                              SUM(NVL(FRB.BEGINNING_PAID, 0)) BEGINNING_PAID, TRUNC(FRB.VINUAL_DATE) VINUAL_DATE, SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY,FRB.UPLOAD_TYPE
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=1
			                              <if test="UPLOAD_TYPE !=null and UPLOAD_TYPE !=''"> and FRB.UPLOAD_TYPE =#{UPLOAD_TYPE}</if>
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE,FRB.UPLOAD_TYPE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
			                               ROUND(NVL(FO.PENALTY_RECE,0)) BEGINNING_MONEY, ROUND(NVL(FO.PENALTY_PAID,0),2) BEGINNING_PAID, TRUNC(FO.VINUAL_DUE_DATE) VINUAL_DATE, ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY,FO.UPLOAD_TYPE
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0 and FO.VINUAL_TYPE=1
			                               <if test="UPLOAD_TYPE !=null and UPLOAD_TYPE !=''"> and FO.UPLOAD_TYPE =#{UPLOAD_TYPE}</if>
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
		) CC where rownum &lt;=#{PAGE_END}
						) CCC
				 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="query_Back_Fund_COUNT" parameterType="java.util.Map" resultType="int">
		 SELECT count(1) FROM (	 
					 SELECT FPH.ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.BEGINNING_MONEY, 0), 2) BEGINNING_MONEY,ROUND(NVL(A.BEGINNING_PAID, 0), 2) BEGINNING_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.VINUAL_MONEY, 0), 2) VINUAL_MONEY,A.VINUAL_DATE,A.UPLOAD_TYPE
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, '租金' BEGINNING_NAME, SUM(NVL(FRB.BEGINNING_MONEY, 0)) BEGINNING_MONEY,
			                              SUM(NVL(FRB.BEGINNING_PAID, 0)) BEGINNING_PAID, TRUNC(FRB.VINUAL_DATE) VINUAL_DATE, SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY,FRB.UPLOAD_TYPE
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=1
			                              <if test="UPLOAD_TYPE !=null and UPLOAD_TYPE !=''"> and FRB.UPLOAD_TYPE =#{UPLOAD_TYPE}</if>
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE,FRB.UPLOAD_TYPE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
			                               ROUND(NVL(FO.PENALTY_RECE,0)) BEGINNING_MONEY, ROUND(NVL(FO.PENALTY_PAID,0),2) BEGINNING_PAID, TRUNC(FO.VINUAL_DUE_DATE) VINUAL_DATE, ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY,FO.UPLOAD_TYPE
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0 and FO.VINUAL_TYPE=1
			                                <if test="UPLOAD_TYPE !=null and UPLOAD_TYPE !=''"> and FO.UPLOAD_TYPE =#{UPLOAD_TYPE}</if>
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  <where>
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
		) CC 
	</select>
	
	<select id="selInfoItem2" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, -SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
		,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME
		FROM FI_R_BEGINNING FRB
		LEFT JOIN v_plan_scheme VPS ON FRB.PAYLIST_CODE=VPS.PAYLIST_CODE
		left join FIL_PROJECT_HEAD FPH on FPH.ID=FRB.PROJECT_ID
		LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
		WHERE  FRB.ITEM_FLAG = 2 and FRB.BEGINNING_FLAG=1 and FRB.VINUAL_FLAG=1 and FRB.PAYLIST_CODE=#{PAYLIST_CODE} and FRB.BEGINNING_NUM=#{BEGINNING_NUM}
		GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM,FPH.CLIENT_ID,FCC.NAME,VPS.SUP_ID,VPS.SUP_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME
	</select>
	
	<select id="queryDetailByPayNumItem2"  parameterType="java.util.Map" resultType="map">
			select frb.BEGINNING_ID,frb.BEGINNING_NUM,frb.BEGINNING_NAME,frb.PAYLIST_CODE,frb.ITEM_FLAG
			,-nvl(frb.VINUAL_MONEY,0) BEGINNING_MONEY,to_char(BEGINNING_RECEIVE_DATA,'yyyy-mm-dd') BEGINNING_RECEIVE_DATA
			from fi_r_beginning frb 
			where PAYLIST_CODE=#{PAYLIST_CODE} and BEGINNING_NUM=#{BEGINNING_NUM} 
				and FRB.ITEM_FLAG = 2 and FRB.BEGINNING_FLAG=1 and FRB.VINUAL_FLAG=1
				and nvl(frb.VINUAL_MONEY,0)!=0
				order by BEGINNING_NAME
	</select>
	
	<update id="updateBeggingStatusByVinual" parameterType="java.util.Map">
			update fi_r_beginning set BEGINNING_STATUS=#{BEGINNING_STATUS},MODIFY_TIME=sysdate,VINUAL_FLAG=#{VINUAL_FLAG}
			where BEGINNING_ID=#{BEGINNING_ID}
	</update>
	
	<select id="selInfoItem5" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, -NVL(FO.VINUAL_PAID, 0) VINUAL_MONEY
		,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME
		FROM FI_OVERDUE FO
		LEFT JOIN v_plan_scheme VPS ON FO.PAY_CODE=VPS.PAYLIST_CODE
		left join FIL_PROJECT_HEAD FPH on FPH.ID=FO.PROJECT_ID
		LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
		WHERE  FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0)-nvl(FO.VINUAL_PAID,0),2)&lt;=0
		and FO.PAY_CODE=#{PAYLIST_CODE} and FO.PERIOD=#{BEGINNING_NUM}
		
	</select>
	
	<update id="updateOverDunStauteByVinual" parameterType="java.util.Map">
			update fi_overdue set OVERDUE_STATUS=#{OVERDUE_STATUS},VINUAL_DUN_FLAG=#{VINUAL_DUN_FLAG}
			where ID = (
				select max(id) from fi_overdue where pay_code=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM} 
			)
	</update>
	
	<insert id="createFundHeadByVinual" parameterType="java.util.Map">
			insert into fi_fund_head
			(ID
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,FI_PAY_MONEY</if>
			<if test="FI_PROJECT_NUM !=null and FI_PROJECT_NUM !=''">,FI_PROJECT_NUM</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,FI_APP_NAME</if>
			,FI_PAY_DATE
			<if test="FI_FAG !=null and FI_FAG !=''">,FI_FLAG</if>
			,FI_STATUS
			<if test="USER_CODE !=null and USER_CODE !=''">,FI_APP_CODE</if>
			,FI_PAY_TYPE
			<if test="FI_PRO_NAME !=null and FI_PRO_NAME !=''">,FI_PRO_NAME</if>
			<if test="ORG_ID !=null and ORG_ID !=''">, FI_ORG_ID</if>
			<if test="SUP_ID !=null and SUP_ID !=''">,SUP_ID</if>
			<if test="SUPPLIER_NAME !=null and SUPPLIER_NAME !=''">, SUPPLIER_NAME</if>
			,FI_APP_DATE
			,FI_FUND_CODE
			<if test="APP_CREATE !=null and APP_CREATE !=''">, APP_CREATE</if>
			<if test="FI_ACCOUNT_DATE !=null and FI_ACCOUNT_DATE !=''">,FI_ACCOUNT_DATE</if>
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,FI_REALITY_MONEY</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,FI_CHECK_NAME</if>
			<if test="USER_CODE !=null and USER_CODE !=''">,FI_CHECK_CODE</if>
			,FI_CHECK_DATE
			)
			values 
			(#{fund_head_id}
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,round(#{FI_PAY_MONEY},2)</if>
			<if test="FI_PROJECT_NUM !=null and FI_PROJECT_NUM !=''">,#{FI_PROJECT_NUM}</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,#{USER_NAME}</if>
			,sysdate
			<if test="FI_FAG !=null and FI_FAG !=''">,#{FI_FAG}</if>
			,6
			<if test="USER_CODE !=null and USER_CODE !=''">,#{USER_CODE}</if>
			,1
			<if test="FI_PRO_NAME !=null and FI_PRO_NAME !=''">,#{FI_PRO_NAME}</if>
			<if test="ORG_ID !=null and ORG_ID !=''">, #{ORG_ID}</if>
			<if test="SUP_ID !=null and SUP_ID !=''">,#{SUP_ID}</if>
			<if test="SUPPLIER_NAME !=null and SUPPLIER_NAME !=''">, #{SUPPLIER_NAME}</if>
			,sysdate
			,1
			<if test="APP_CREATE !=null and APP_CREATE !=''">, #{APP_CREATE}</if>
			<if test="FI_ACCOUNT_DATE !=null and FI_ACCOUNT_DATE !=''">,to_date(#{FI_ACCOUNT_DATE},'yyyy-MM-dd')</if>
			<if test="FI_PAY_MONEY !=null and FI_PAY_MONEY !=''">,round(#{FI_PAY_MONEY},2)</if>
			<if test="USER_NAME !=null and USER_NAME !=''">,#{USER_NAME}</if>
			<if test="USER_CODE !=null and USER_CODE !=''">,#{USER_CODE}</if>
			,sysdate
			)
		</insert>
		
		
		 <insert id="insertPoolDateVinual" parameterType="Map">
			 	insert into FI_DEPOSIT_POOL
			 	(
			 		POOL_ID
			 		<if test="OWNER_ID != null and OWNER_ID != ''">,OWNER_ID</if>
			 		<if test="BASE_MONEY != null and BASE_MONEY != ''">,BASE_MONEY</if>
			 		<if test="CANUSE_MONEY != null and CANUSE_MONEY != ''">,CANUSE_MONEY</if>
			 		<if test="STATUS != null and STATUS != ''">,STATUS</if>
			 		,PAY_TIME
			 		<if test="TYPE != null and TYPE != ''">,TYPE</if>
			 		<if test="SOURCE_ID != null and SOURCE_ID != ''">,SOURCE_ID</if>
			 		<if test="PROJECT_ID != null and PROJECT_ID != ''">,PROJECT_ID</if>
			 		<if test="REMARK != null and REMARK != ''">,REMARK</if>
			 	)values
			 	(
			 		SEQ_FI_DEPOSIT_POOL.nextval
			 		<if test="OWNER_ID != null and OWNER_ID != ''">,#{OWNER_ID}</if>
			 		<if test="BASE_MONEY != null and BASE_MONEY != ''">,round(#{BASE_MONEY},2)</if>
			 		<if test="CANUSE_MONEY != null and CANUSE_MONEY != ''">,round(#{CANUSE_MONEY},2)</if>
			 		<if test="STATUS != null and STATUS != ''">,#{STATUS}</if>
			 		,sysdate
			 		<if test="TYPE != null and TYPE != ''">,#{TYPE}</if>
			 		<if test="SOURCE_ID != null and SOURCE_ID != ''">,#{SOURCE_ID}</if>
			 		<if test="PROJECT_ID != null and PROJECT_ID != ''">,#{PROJECT_ID}</if>
			 		<if test="REMARK != null and REMARK != ''">,#{REMARK}</if>
			 	)
			 </insert>
			 
			 <select id="upRentWriteVinual" statementType="CALLABLE" parameterType="map">
				{call PRC_RENT_V_TO_R_CURRENT(#{PAYLIST_CODE},#{BEGINNING_NUM},#{ITEM_FLAG})}
			</select>
			
			<select id="upMoneyToJoin" statementType="CALLABLE" parameterType="map">
				{call PRC_BE_QJL_PAY_CODE(#{PAYLIST_CODE})}
			</select>
			
			<select id="rwVinual_SupList" parameterType="java.util.Map" resultType="java.util.Map">
		 
					 SELECT VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,ROUND(SUM(nvl(A.VINUAL_MONEY,0)), 2) VINUAL_MONEYALL
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG
			          					,SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=1 and FRB.UPLOAD_TYPE=0
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG
			                            , ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0
			                               and FO.VINUAL_TYPE=1 and FO.UPLOAD_TYPE=0
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  <where>
			                  	NVL(A.VINUAL_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
								group by VPS.SUP_ID,VPS.SUP_NAME
								order by VPS.SUP_ID desc
	</select>
	
	<select id="rentWriteVin_Detail_Excel" parameterType="java.util.Map" resultType="java.util.Map">
		 SELECT FPH.ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.BEGINNING_MONEY, 0), 2) BEGINNING_MONEY,ROUND(NVL(A.BEGINNING_PAID, 0), 2) BEGINNING_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.VINUAL_MONEY, 0), 2) VINUAL_MONEY,A.VINUAL_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, '租金' BEGINNING_NAME, SUM(NVL(FRB.BEGINNING_MONEY, 0)) BEGINNING_MONEY,
			                              SUM(NVL(FRB.BEGINNING_PAID, 0)) BEGINNING_PAID, TRUNC(FRB.VINUAL_DATE) VINUAL_DATE, SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=1 and FRB.UPLOAD_TYPE=0
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
			                               ROUND(NVL(FO.PENALTY_RECE,0)) BEGINNING_MONEY, ROUND(NVL(FO.PENALTY_PAID,0),2) BEGINNING_PAID, TRUNC(FO.VINUAL_DUE_DATE) VINUAL_DATE, ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0 and FO.VINUAL_TYPE=1 and FO.UPLOAD_TYPE=0
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
			                  order by VPS.SUP_ID desc
	</select>
	
	<select id="query_Back_SUPP_Fund" parameterType="java.util.Map" resultType="java.util.Map">
		 SELECT * FROM (	 
				SELECT  CC.*,ROWNUM ROWNO FROM 
				(
					 SELECT FPH.ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.BEGINNING_MONEY, 0), 2) BEGINNING_MONEY,ROUND(NVL(A.BEGINNING_PAID, 0), 2) BEGINNING_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.VINUAL_MONEY, 0), 2) VINUAL_MONEY,A.VINUAL_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, '租金' BEGINNING_NAME, SUM(NVL(FRB.BEGINNING_MONEY, 0)) BEGINNING_MONEY,
			                              SUM(NVL(FRB.BEGINNING_PAID, 0)) BEGINNING_PAID, TRUNC(FRB.VINUAL_DATE) VINUAL_DATE, SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=0
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
			                               ROUND(NVL(FO.PENALTY_RECE,0)) BEGINNING_MONEY, ROUND(NVL(FO.PENALTY_PAID,0),2) BEGINNING_PAID, TRUNC(FO.VINUAL_DUE_DATE) VINUAL_DATE, ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0 and FO.VINUAL_TYPE=0
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
		) CC where rownum &lt;=#{PAGE_END}
						) CCC
				 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="query_Back_SUPP_Fund_COUNT" parameterType="java.util.Map" resultType="int">
		 SELECT count(1) FROM (	 
					 SELECT FPH.ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.BEGINNING_MONEY, 0), 2) BEGINNING_MONEY,ROUND(NVL(A.BEGINNING_PAID, 0), 2) BEGINNING_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.VINUAL_MONEY, 0), 2) VINUAL_MONEY,A.VINUAL_DATE
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, '租金' BEGINNING_NAME, SUM(NVL(FRB.BEGINNING_MONEY, 0)) BEGINNING_MONEY,
			                              SUM(NVL(FRB.BEGINNING_PAID, 0)) BEGINNING_PAID, TRUNC(FRB.VINUAL_DATE) VINUAL_DATE, SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=0
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
			                               ROUND(NVL(FO.PENALTY_RECE,0)) BEGINNING_MONEY, ROUND(NVL(FO.PENALTY_PAID,0),2) BEGINNING_PAID, TRUNC(FO.VINUAL_DUE_DATE) VINUAL_DATE, ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0 and FO.VINUAL_TYPE=0
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  <where>
			                  	NVL(A.VINUAL_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
		) CC 
	</select>
	
	<update id="updateBeginVinualType" parameterType="java.util.Map">
		update FI_R_BEGINNING set VINUAL_TYPE=1 where  PAYLIST_CODE=#{PAYLIST_CODE} and  BEGINNING_NUM=#{BEGINNING_NUM}
	</update>
	
	<update id="updateOverDueVinualType" parameterType="java.util.Map">
		update FI_OVERDUE FO set VINUAL_TYPE=1 where FO.PAY_CODE=#{PAYLIST_CODE} and FO.PERIOD=#{BEGINNING_NUM}
	</update>
	
	<delete id="delSuppBank" parameterType="java.util.Map">
		delete T_BASE_SUPP_BANK where SUPP_ID=#{SUPP_ID}
	</delete>
	
	<insert id="insertSuppBank" parameterType="java.util.Map">
		insert into T_BASE_SUPP_BANK
		(
			 SUPP_ID
			 <if test="PAYEE_NAME != null and PAYEE_NAME != ''">,PAYEE_NAME</if>
			 <if test="PAY_BANK_ACCOUNT != null and PAY_BANK_ACCOUNT != ''">,PAY_BANK_ACCOUNT</if>
			 <if test="PAY_BANK_NAME != null and PAY_BANK_NAME != ''">,PAY_BANK_NAME</if>
			 <if test="PAY_BANK_ADDRESS != null and PAY_BANK_ADDRESS != ''">,PAY_BANK_ADDRESS</if>
		)values
		(
			 #{SUPP_ID}
			 <if test="PAYEE_NAME != null and PAYEE_NAME != ''">,#{PAYEE_NAME}</if>
			 <if test="PAY_BANK_ACCOUNT != null and PAY_BANK_ACCOUNT != ''">,#{PAY_BANK_ACCOUNT}</if>
			 <if test="PAY_BANK_NAME != null and PAY_BANK_NAME != ''">,#{PAY_BANK_NAME}</if>
			 <if test="PAY_BANK_ADDRESS != null and PAY_BANK_ADDRESS != ''">,#{PAY_BANK_ADDRESS}</if>
		)
	</insert>
	
	<update id="updateBeginnType" parameterType="java.util.Map">
		update FI_R_BEGINNING set UPLOAD_TYPE=1 where PAYLIST_CODE=#{PAYLIST_CODE} and BEGINNING_NUM=#{BEGINNING_NUM}
	</update>
	
	<update id="updateOverdueType" parameterType="java.util.Map">
		update FI_OVERDUE set UPLOAD_TYPE=1 where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM}
	</update>
	
	<update id="updateBeginnTypeBoHui" parameterType="java.util.Map">
		update FI_R_BEGINNING set UPLOAD_TYPE=0,VINUAL_TYPE=0 where PAYLIST_CODE=#{PAYLIST_CODE} and BEGINNING_NUM=#{BEGINNING_NUM}
	</update>
	
	<update id="updateOverdueTypeBoHui" parameterType="java.util.Map">
		update FI_OVERDUE set UPLOAD_TYPE=0,VINUAL_TYPE=0 where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM}
	</update>
	
	<update id="updateBeginnTypeChongZ" parameterType="java.util.Map">
		update FI_R_BEGINNING set UPLOAD_TYPE=0 where PAYLIST_CODE=#{PAYLIST_CODE} and BEGINNING_NUM=#{BEGINNING_NUM}
	</update>
	
	<update id="updateOverdueTypeChongZ" parameterType="java.util.Map">
		update FI_OVERDUE set UPLOAD_TYPE=0 where PAY_CODE=#{PAYLIST_CODE} and PERIOD=#{BEGINNING_NUM}
	</update>
	
	<select id="rwVinual_ComList" parameterType="java.util.Map" resultType="java.util.Map">
		 
					 SELECT VPS.COMPANY_ID,VPS.COMPANY_NAME,ROUND(SUM(nvl(A.VINUAL_MONEY,0)), 2) VINUAL_MONEYALL
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG
			          					,SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=1 and FRB.UPLOAD_TYPE=0
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG
			                            , ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0
			                               and FO.VINUAL_TYPE=1 and FO.UPLOAD_TYPE=0
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  <where>
			                  	NVL(A.VINUAL_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
								group by VPS.COMPANY_ID,VPS.COMPANY_NAME
								order by VPS.COMPANY_ID desc
	</select>
	
	
	<select id="rentWriteSuppVin_Detail_Excel" parameterType="java.util.Map" resultType="java.util.Map">
		 
					 SELECT VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_NAME,ROUND(SUM(nvl(A.VINUAL_MONEY,0)), 2) VINUAL_MONEYALL,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
			          	SELECT BB.* FROM (
			          					SELECT FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG
			          					,SUM(NVL(FRB.VINUAL_MONEY, 0)) VINUAL_MONEY
			                              FROM FI_R_BEGINNING FRB
			                              where  FRB.ITEM_FLAG = 2 and FRB.VINUAL_FLAG=1 and FRB.VINUAL_TYPE=1 and FRB.UPLOAD_TYPE=0
			                              GROUP BY FRB.PAYLIST_CODE, FRB.BEGINNING_NUM, FRB.BEGINNING_RECEIVE_DATA, FRB.ITEM_FLAG, FRB.VINUAL_DATE
                                    	having  max(FRB.BEGINNING_FLAG)=1 
			                         UNION ALL
			                            SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG
			                            , ROUND(NVL(FO.VINUAL_PAID,0)) VINUAL_MONEY
			                               FROM FI_OVERDUE FO
			                               WHERE FO.VINUAL_DUN_FLAG=1 and round(nvl(FO.PENALTY_RECE,0)-nvl(FO.PENALTY_PAID,0),2)&lt;=0
			                               and FO.VINUAL_TYPE=1 and FO.UPLOAD_TYPE=0
			                               ) BB
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_MONEY,0)>0
			                  	<if test="COMPANY_ID != null and COMPANY_ID != ''"> and VPS.COMPANY_ID=#{COMPANY_ID}</if>
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="PROJECT_CODE !=null and PROJECT_CODE !=''"> and FPH.PRO_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
								group by VPS.SUP_ID,VPS.SUP_NAME,VPS.COMPANY_NAME,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
								order by VPS.SUP_ID desc
	</select>
	
	<select id="query_Back_SUPP_DUN" parameterType="java.util.Map" resultType="java.util.Map">
		 SELECT * FROM (	 
				SELECT  CC.*,ROWNUM ROWNO FROM 
				(
					 SELECT A.OVERDUE_ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.VINUAL_RECE, 0), 2) VINUAL_RECE,ROUND(NVL(A.PENALTY_PAID, 0), 2) PENALTY_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.BACK_MONEY_RECE, 0), 2) BACK_MONEY_RECE,ROUND(NVL(A.VINUAL_BACK_MONEY, 0), 2) VINUAL_BACK_MONEY,A.PENALTY_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
									select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 0
									AND FO.ID in
		                              (
									  select MAX(ID) ID
		                                 from fi_overdue FO
		                                group by FO.PAY_CODE, FO.PERIOD
									)	   
			                  ) A
							  
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.BACK_MONEY_RECE,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
		) CC where rownum &lt;=#{PAGE_END}
						) CCC
				 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="query_Back_SUPP_DUN_COUNT" parameterType="java.util.Map" resultType="int">
		 SELECT count(1) FROM (	 
					 SELECT A.OVERDUE_ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.VINUAL_RECE, 0), 2) VINUAL_RECE,ROUND(NVL(A.PENALTY_PAID, 0), 2) PENALTY_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.BACK_MONEY_RECE, 0), 2) BACK_MONEY_RECE,ROUND(NVL(A.VINUAL_BACK_MONEY, 0), 2) VINUAL_BACK_MONEY,A.PENALTY_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
									select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 0
									AND FO.ID in
		                              (
									  select MAX(ID) ID
		                                 from fi_overdue FO
		                                group by FO.PAY_CODE, FO.PERIOD
									)		   
			                  ) A
							  
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.BACK_MONEY_RECE,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
		) CC 
	</select>
	
	<update id="updateDunBackMoney" parameterType="java.util.Map">
		update fi_overdue set VINUAL_BACK_MONEY=#{VINUAL_BACK_MONEY} where id=#{OVERDUE_ID}
	</update>
	
	<update id="updateOverDueBackStatus" parameterType="java.util.Map">
		update fi_overdue set VINUAL_BACK_STATUS=#{VINUAL_BACK_STATUS} where id=#{OVERDUE_ID}
	</update>
	
	
	<select id="query_Back_DUN" parameterType="java.util.Map" resultType="java.util.Map">
		 SELECT * FROM (	 
				SELECT  CC.*,ROWNUM ROWNO FROM 
				(
					 SELECT A.OVERDUE_ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE,A.VINUAL_BACK_UPLOAD,A.VINUAL_BACK_INVOICE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.VINUAL_RECE, 0), 2) VINUAL_RECE,ROUND(NVL(A.PENALTY_PAID, 0), 2) PENALTY_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.BACK_MONEY_RECE, 0), 2) BACK_MONEY_RECE,ROUND(NVL(A.VINUAL_BACK_MONEY, 0), 2) VINUAL_BACK_MONEY,A.PENALTY_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
									select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE,FO.VINUAL_BACK_UPLOAD,FO.VINUAL_BACK_INVOICE
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 1
									AND FO.ID in
		                              (
									  select MAX(ID) ID
		                                 from fi_overdue FO
		                                group by FO.PAY_CODE, FO.PERIOD
									)		   
			                  ) A
							  
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_BACK_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
								<if test="UPLOAD_TYPE !=null and UPLOAD_TYPE !=''"> and A.VINUAL_BACK_UPLOAD=#{UPLOAD_TYPE}</if>
			                  </where>
		) CC where rownum &lt;=#{PAGE_END}
						) CCC
				 WHERE CCC.ROWNO >= #{PAGE_BEGIN}
	</select>
	
	<select id="query_Back_DUN_COUNT" parameterType="java.util.Map" resultType="int">
		 SELECT count(1) FROM (	 
					 SELECT A.OVERDUE_ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE,A.VINUAL_BACK_UPLOAD,A.VINUAL_BACK_INVOICE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.VINUAL_RECE, 0), 2) VINUAL_RECE,ROUND(NVL(A.PENALTY_PAID, 0), 2) PENALTY_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.BACK_MONEY_RECE, 0), 2) BACK_MONEY_RECE,ROUND(NVL(A.VINUAL_BACK_MONEY, 0), 2) VINUAL_BACK_MONEY,A.PENALTY_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
									select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,FO.VINUAL_BACK_INVOICE,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE,FO.VINUAL_BACK_UPLOAD
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 1
									AND FO.ID in
		                              (
									  select MAX(ID) ID
		                                 from fi_overdue FO
		                                group by FO.PAY_CODE, FO.PERIOD
									)	  
			                  ) A
							  
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_BACK_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
								<if test="UPLOAD_TYPE !=null and UPLOAD_TYPE !=''"> and A.VINUAL_BACK_UPLOAD=#{UPLOAD_TYPE}</if>
			                  </where>
		) CC 
	</select>
	
	
	<select id="rwVinual_DUN_ComList" parameterType="java.util.Map" resultType="java.util.Map">
		 
					 SELECT VPS.COMPANY_ID,VPS.COMPANY_NAME,ROUND(SUM(nvl(A.VINUAL_BACK_MONEY,0)), 2) VINUAL_MONEYALL
			          FROM (
			          			select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,FO.VINUAL_BACK_INVOICE,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE,FO.VINUAL_BACK_UPLOAD
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 1
											AND FO.VINUAL_BACK_UPLOAD=0
											AND FO.ID in
				                              (
											  select MAX(ID) ID
				                                 from fi_overdue FO
				                                group by FO.PAY_CODE, FO.PERIOD
											)	
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  <where>
			                  	NVL(A.VINUAL_BACK_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
								group by VPS.COMPANY_ID,VPS.COMPANY_NAME
								order by VPS.COMPANY_ID desc
	</select>
	
	<select id="rentWriteSupp_DUNVin_Detail_Excel" parameterType="java.util.Map" resultType="java.util.Map">
		 
					 SELECT VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_NAME,ROUND(SUM(nvl(A.VINUAL_BACK_MONEY,0)), 2) VINUAL_MONEYALL,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
					          	select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,FO.VINUAL_BACK_INVOICE,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE,FO.VINUAL_BACK_UPLOAD
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 1
											AND FO.VINUAL_BACK_UPLOAD=0
											AND FO.ID in
				                              (
											  select MAX(ID) ID
				                                 from fi_overdue FO
				                                group by FO.PAY_CODE, FO.PERIOD
											)	 
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_BACK_MONEY,0)>0
			                  	<if test="COMPANY_ID != null and COMPANY_ID != ''"> and VPS.COMPANY_ID=#{COMPANY_ID}</if>
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="PROJECT_CODE !=null and PROJECT_CODE !=''"> and FPH.PRO_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
								group by VPS.SUP_ID,VPS.SUP_NAME,VPS.COMPANY_NAME,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
								order by VPS.SUP_ID desc
	</select>
	
	<select id="rwVinualDUN_SupList" parameterType="java.util.Map" resultType="java.util.Map">
		 
					 SELECT VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,ROUND(SUM(nvl(A.VINUAL_BACK_MONEY,0)), 2) VINUAL_MONEYALL
			          FROM (
			          			select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,FO.VINUAL_BACK_INVOICE,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE,FO.VINUAL_BACK_UPLOAD
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 1
											AND FO.VINUAL_BACK_UPLOAD=0
											AND FO.ID in
				                              (
											  select MAX(ID) ID
				                                 from fi_overdue FO
				                                group by FO.PAY_CODE, FO.PERIOD
											)	
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  <where>
			                  	NVL(A.VINUAL_BACK_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{LEASE_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
								group by VPS.SUP_ID,VPS.SUP_NAME
								order by VPS.SUP_ID desc
	</select>
	
	<select id="rentWriteVinDun_Detail_Excel" parameterType="java.util.Map" resultType="java.util.Map">
		  SELECT A.OVERDUE_ID,FPH.PRO_CODE,FPH.LEASE_CODE,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME,TBP.PAYLIST_CODE,A.VINUAL_BACK_UPLOAD,A.VINUAL_BACK_INVOICE
					 ,A.BEGINNING_NUM,A.BEGINNING_NAME,to_char(A.BEGINNING_RECEIVE_DATA,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA,A.ITEM_FLAG,ROUND(NVL(A.VINUAL_RECE, 0), 2) VINUAL_RECE,ROUND(NVL(A.PENALTY_PAID, 0), 2) PENALTY_PAID
					 ,VPS.PRODUCT_NAME,FPH.STATUS,ROUND(NVL(A.BACK_MONEY_RECE, 0), 2) BACK_MONEY_RECE,ROUND(NVL(A.VINUAL_BACK_MONEY, 0), 2) VINUAL_BACK_MONEY,A.PENALTY_DATE,TBSB.PAYEE_NAME,TBSB.PAY_BANK_ACCOUNT,TBSB.PAY_BANK_NAME,TBSB.PAY_BANK_ADDRESS
			          FROM (
						          	select FO.ID OVERDUE_ID,FO.PAY_CODE PAYLIST_CODE,FO.PERIOD BEGINNING_NUM,FO.RENT_DATE BEGINNING_RECEIVE_DATA, '5' ITEM_FLAG, '违约金' BEGINNING_NAME,FO.VINUAL_BACK_INVOICE,
										FO.VINUAL_RECE,FO.PENALTY_PAID,FO.PENALTY_DATE,FO.VINUAL_BACK_MONEY,ROUND(NVL(FO.PENALTY_PAID, 0)-NVL(FO.VINUAL_RECE, 0), 2) BACK_MONEY_RECE,FO.VINUAL_BACK_UPLOAD
		                         	from fi_overdue FO
		                        	where nvl(FO.VINUAL_RECE, 0) > 0
											AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.VINUAL_RECE, 0) > 0.0005
		                                  	AND nvl(FO.PENALTY_RECE, 0) - nvl(FO.PENALTY_PAID, 0) &lt;= 0
		                                  	AND FO.PENALTY_DATE is not null
		                                  	AND FO.VINUAL_BACK_STATUS = 1
											AND FO.VINUAL_BACK_UPLOAD=0
											AND FO.ID in
				                              (
											  select MAX(ID) ID
				                                 from fi_overdue FO
				                                group by FO.PAY_CODE, FO.PERIOD
											)	
			                  ) A
			                  LEFT JOIN FIL_RENT_PLAN_HEAD_BAS_MAX__V TBP  ON TBP.PAYLIST_CODE = A.PAYLIST_CODE
							  LEFT JOIN v_plan_scheme VPS ON TBP.PAYLIST_CODE=VPS.PAYLIST_CODE
			                  LEFT JOIN FIL_PROJECT_HEAD FPH ON FPH.ID = TBP.PROJECT_ID
			                  LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
			                  LEFT JOIN T_BASE_SUPP_BANK TBSB ON VPS.SUP_ID=TBSB.SUPP_ID
			                  <where>
			                  	NVL(A.VINUAL_BACK_MONEY,0)>0
			                  	<if test="SUP_ID != null and SUP_ID != ''"> and VPS.SUP_ID=#{SUP_ID}</if>
								<if test="CUST_NAME !=null and CUST_NAME !=''"> and FCC.NAME like '%'||#{CUST_NAME}||'%'</if>
								<if test="LEASE_CODE !=null and LEASE_CODE !=''"> and FPH.LEASE_CODE like '%'||#{PROJECT_CODE}||'%'</if>
								<if test="PLAN_START_DATE !=null and PLAN_START_DATE !=''"> and A.BEGINNING_RECEIVE_DATA>=to_date(#{PLAN_START_DATE},'yyyy-mm-dd')</if>
								<if test="PLAN_END_DATE !=null and PLAN_END_DATE !=''"> and A.BEGINNING_RECEIVE_DATA&lt;=to_date(#{PLAN_END_DATE},'yyyy-mm-dd')</if>
								<if test="COM_NAME !=null and COM_NAME !=''"> and VPS.COMPANY_NAME like '%'||#{COM_NAME}||'%'</if>
								<if test="PRODUCT_NAME !=null and PRODUCT_NAME !=''"> and VPS.PRODUCT_NAME like '%'||#{PRODUCT_NAME}||'%'</if>
								<if test="SUPPER_NAME !=null and SUPPER_NAME !=''"> and VPS.SUP_NAME like '%'||#{SUPPER_NAME}||'%'</if>
			                  </where>
			                  order by VPS.SUP_ID desc
	</select>
	
	<update id="updateOverdueBackUp" parameterType="java.util.Map">
		update FI_OVERDUE set VINUAL_BACK_UPLOAD=1 where ID=#{OVERDUE_ID}
	</update>
	
	<update id="updateOverdueDUNChongZ" parameterType="java.util.Map">
		update FI_OVERDUE set VINUAL_BACK_UPLOAD=0 where ID=#{OVERDUE_ID}
	</update>
	
	<update id="updateOverdueDUNBoHui" parameterType="java.util.Map">
		update FI_OVERDUE set VINUAL_BACK_UPLOAD=0,VINUAL_BACK_STATUS=0 where ID=#{OVERDUE_ID}
	</update>
	
	<select id="queryFundOVERDUE"  parameterType="map" resultType="map">
		 	select vps.SUP_ID,vps.SUP_NAME,fph.id PROJECT_ID,FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM
		 	,fcc.id CUST_ID,fcc.name CUSTNAME,fph.pro_code,to_char(FO.RENT_DATE,'yyyy-MM-dd') BEGINNING_RECEIVE_DATA
		 	from FI_OVERDUE FO 
			left join v_plan_scheme vps on FO.PAY_CODE=vps.PAYLIST_CODE
			left join fil_project_head fph on fph.id=vps.PROJECT_ID
			left join fil_cust_client fcc on fph.client_id=fcc.id
			where FO.ID=#{OVERDUE_ID}
			group by vps.SUP_ID,vps.SUP_NAME,fph.id,FO.PAY_CODE, FO.PERIOD
		 	,fcc.id,fcc.name,fph.pro_code,to_char(FO.RENT_DATE,'yyyy-MM-dd')
	</select>
		
	<select id="selInfoItemDUN5" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT FO.PAY_CODE PAYLIST_CODE, FO.PERIOD BEGINNING_NUM, -NVL(FO.VINUAL_BACK_MONEY, 0) VINUAL_BACK_MONEY
		,FPH.CLIENT_ID CUST_ID,FCC.NAME CUSTNAME,VPS.SUP_ID,VPS.SUP_NAME SUPPLIERS_NAME,VPS.COMPANY_ID,VPS.COMPANY_NAME
		FROM FI_OVERDUE FO
		LEFT JOIN v_plan_scheme VPS ON FO.PAY_CODE=VPS.PAYLIST_CODE
		left join FIL_PROJECT_HEAD FPH on FPH.ID=FO.PROJECT_ID
		LEFT JOIN FIL_CUST_CLIENT FCC ON FCC.ID = FPH.CLIENT_ID
		WHERE FO.ID=#{OVERDUE_ID}
		
	</select>
	
	<update id="updateOverdueStatus" parameterType="java.util.Map">
		update FI_OVERDUE set VINUAL_BACK_STATUS=2 where ID=#{OVERDUE_ID}
	</update>
</mapper>