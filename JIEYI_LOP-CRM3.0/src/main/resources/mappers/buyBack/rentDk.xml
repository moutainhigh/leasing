<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="rentDk">
	<insert id="doInsertBuyBack" parameterType="Map">
		insert into fil_buy_back(
		ID,
		PAY_ID,
		ACCOUNT_DATE,
		BUY_BACK_STATUS,
		CREATE_DATE,
		CREATOR,
		<if test="PAYLIST_CODE!=null">PAYLIST_CODE</if>
		<if test="PROJECT_ID!=null">,PROJECT_ID</if>
		<if test="SUM_ZJ!=null">,RENT_TOTAL</if>
		<if test="YS_MONEY!=null">,RENT_PAID</if>
		<if test="sy_money!=null">,RENT_LEFT</if>
		<if test="RENT_PAID_AMOUNT!=null">,RENT_PAID_AMOUNT</if>
		<if test="LG_DKJE!=null">,NOMINALPRICE_DK</if>
		<if test="BZJDk!=null">,CAUTION_DK</if>
		<if test="liugoujia!=null">,NOMINALPRICE_NEW</if>
		<if test="WDQLX_MONEY!=null">,INTEREST_UNDO</if>
		<if test="sy_money!=null">,CORPUS_UNDO</if>
		<if test="WS_YQ!=null">,PENALTY_AMT</if>
		<if test="HEJI!=null">,SUM_AMT_BACK</if>
		,IS_END_STATUS
		<if test="OTHER_SHOULD_PAY!=null">,OTHER_SHOULD_PAY</if>
		<if test="BZJ!=null">,IS_DEPOSIT</if>
		<if test="isLiugou!=null">,IS_LEAVE</if>
		<if test="DBBZJ!=null">,IS_DBDEPOSIT</if>
		<if test="dbBZJDk!=null">,DBDEPOSIT_DK</if>
		<if test="taxes!=null">,TAX_MONEY</if>
		<if test="HG_SXF!=null">,HG_SXF</if>
		<if test="PAYEE_NAME!=null">,REALITY_PAYEE</if>
		<if test="LILVJM!=null">,LILVJM</if>
		<if test="HG_REMARK!=null">,HG_REMARK</if>
		)VALUES(
		#{buy_id},
		#{PAY_ID},
		to_date(#{ACCOUNT_DATE},'yyyy-MM-dd'),
		#{BUY_BACK_STATUS},
		sysdate,
		#{CREATOR},
		<if test="PAYLIST_CODE!=null">#{PAYLIST_CODE}</if>
		<if test="PROJECT_ID!=null">,#{PROJECT_ID}</if>
		<if test="SUM_ZJ!=null">,#{SUM_ZJ}</if>
		<if test="YS_MONEY!=null">,#{YS_MONEY}</if>
		<if test="sy_money!=null">,#{sy_money}</if>
		<if test="RENT_PAID_AMOUNT!=null">,#{RENT_PAID_AMOUNT}</if>
		<if test="LG_DKJE!=null">,#{LG_DKJE}</if>
		<if test="BZJDk!=null">,#{BZJDk}</if>
		<if test="liugoujia!=null">,#{liugoujia}</if>
		<if test="WDQLX_MONEY!=null">,#{WDQLX_MONEY}</if>
		<if test="sy_money!=null">,#{sy_money}</if>
		<if test="WS_YQ!=null">,#{WS_YQ}</if>
		<if test="HEJI!=null">,#{HEJI}</if>
		,#{IS_END_STATUS}
		<if test="OTHER_SHOULD_PAY!=null">,#{OTHER_SHOULD_PAY}</if>
		<if test="BZJ!=null">,#{BZJ}</if>
		<if test="isLiugou!=null">,#{isLiugou}</if>
		<if test="DBBZJ!=null">,#{DBBZJ}</if>
		<if test="dbBZJDk!=null">,#{dbBZJDk}</if>
		<if test="taxes!=null">,#{taxes}</if>
		<if test="HG_SXF!=null">,#{HG_SXF}</if>
		<if test="PAYEE_NAME!=null">,#{PAYEE_NAME}</if>
		<if test="LILVJM!=null">,#{LILVJM}</if>
		<if test="HG_REMARK!=null">,#{HG_REMARK}</if>
		)
	</insert>

	<select id="getPoolData" parameterType="Map" resultType="Map">
		SELECT *
		FROM FI_DEPOSIT_POOL P WHERE P.PROJECT_ID = #{PROJECT_ID} AND
		TYPE=#{TYPE}
	</select>

	<insert id="doInsertFundHead" parameterType="Map">
		INSERT INTO FI_FUND_HEAD(ID
		<if test="FI_PAY_TYPE != null and FI_PAY_TYPE != ''">,FI_PAY_TYPE</if>
		<if test="FI_PAY_MONEY != null and FI_PAY_MONEY != ''">,FI_PAY_MONEY</if>
		<if test="FI_PROJECT_NUM != null and FI_PROJECT_NUM != ''">,FI_PROJECT_NUM</if>
		<if test="FI_PAY_BANK != null and FI_PAY_BANK != ''">,FI_PAY_BANK</if>
		<if test="FI_ACCOUNT_DATE != null and FI_ACCOUNT_DATE != ''">,FI_ACCOUNT_DATE</if>
		<if test="FI_REALITY_MONEY != null and FI_REALITY_MONEY != ''">,FI_REALITY_MONEY</if>
		<if test="FI_REALITY_BANK != null and FI_REALITY_BANK != ''">,FI_REALITY_BANK</if>
		<if test="FI_FUND_CODE != null and FI_FUND_CODE != ''">,FI_FUND_CODE</if>
		,FI_APP_NAME
		,FI_APP_DATE
		<if test="FI_PAYEE != null and FI_PAYEE != ''">,FI_PAYEE</if>
		<if test="FI_PAYEE_ACCOUNT != null and FI_PAYEE_ACCOUNT != ''">,FI_PAYEE_ACCOUNT</if>
		<if test="FI_TO_THE_PAYEE != null and FI_TO_THE_PAYEE != ''">,FI_TO_THE_PAYEE</if>
		<if test="FI_PAY_DATE != null and FI_PAY_DATE != ''">,FI_PAY_DATE</if>
		<if test="FI_FLAG != null and FI_FLAG != ''">,FI_FLAG</if>
		<if test="FI_TAGE != null and FI_TAGE != ''">,FI_TAGE</if>
		<if test="FI_FILE_NAME != null and FI_FILE_NAME != ''">,FI_FILE_NAME</if>
		<if test="FI_FILE_URL != null and FI_FILE_URL != ''">,FI_FILE_URL</if>
		<if test="FI_FILE_DATE != null and FI_FILE_DATE != ''">,FI_FILE_DATE</if>
		,FI_STATUS
		<if test="FI_REMARK != null and FI_REMARK != ''">,FI_REMARK</if>
		,FI_APP_CODE
		<if test="FI_REALITY_ACCOUNT != null and FI_REALITY_ACCOUNT != ''">,FI_REALITY_ACCOUNT</if>
		<if test="FI_SUPERCLASS_ID != null and FI_SUPERCLASS_ID != ''">,FI_SUPERCLASS_ID</if>
		<if test="FI_ORG_ID != null and FI_ORG_ID != ''">,FI_ORG_ID</if>
		)VALUES(
		#{HEAD_ID}
		<if test="FI_PAY_TYPE != null and FI_PAY_TYPE != ''">,#{FI_PAY_TYPE}</if>
		<if test="FI_PAY_MONEY != null and FI_PAY_MONEY != ''">,#{FI_PAY_MONEY}</if>
		<if test="FI_PROJECT_NUM != null and FI_PROJECT_NUM != ''">,#{FI_PROJECT_NUM}</if>
		<if test="FI_PAY_BANK != null and FI_PAY_BANK != ''">,#{FI_PAY_BANK}</if>
		<if test="FI_ACCOUNT_DATE != null and FI_ACCOUNT_DATE != ''">,TO_DATE(#{FI_ACCOUNT_DATE},'yyyy-MM-dd')</if>
		<if test="FI_REALITY_MONEY != null and FI_REALITY_MONEY != ''">,#{FI_REALITY_MONEY}</if>
		<if test="FI_REALITY_BANK != null and FI_REALITY_BANK != ''">,#{FI_REALITY_BANK}</if>
		<if test="FI_FUND_CODE != null and FI_FUND_CODE != ''">,#{FI_FUND_CODE}</if>
		,#{USERNAME}
		,SYSDATE
		<if test="FI_PAYEE != null and FI_PAYEE != ''">,#{FI_PAYEE}</if>
		<if test="FI_PAYEE_ACCOUNT != null and FI_PAYEE_ACCOUNT != ''">,#{FI_PAYEE_ACCOUNT}</if>
		<if test="FI_TO_THE_PAYEE != null and FI_TO_THE_PAYEE != ''">,#{FI_TO_THE_PAYEE}</if>
		<if test="FI_PAY_DATE != null and FI_PAY_DATE != ''">,TO_DATE(#{FI_PAY_DATE},'yyyy-MM-dd')</if>
		<if test="FI_FLAG != null and FI_FLAG != ''">,#{FI_FLAG}</if>
		<if test="FI_TAGE != null and FI_TAGE != ''">,#{FI_TAGE}</if>
		<if test="FI_FILE_NAME != null and FI_FILE_NAME != ''">,#{FI_FILE_NAME}</if>
		<if test="FI_FILE_URL != null and FI_FILE_URL != ''">,#{FI_FILE_URL}</if>
		<if test="FI_FILE_DATE != null and FI_FILE_DATE != ''">,TO_DATE(#{FI_FILE_DATE},'yyyy-MM-dd')</if>
		,#{FI_STATUS}
		<if test="FI_REMARK != null and FI_REMARK != ''">,#{FI_REMARK}</if>
		,#{USERCODE}
		<if test="FI_REALITY_ACCOUNT != null and FI_REALITY_ACCOUNT != ''">,#{FI_REALITY_ACCOUNT}</if>
		<if test="FI_SUPERCLASS_ID != null and FI_SUPERCLASS_ID != ''">,#{FI_SUPERCLASS_ID}</if>
		<if test="FI_ORG_ID != null and FI_ORG_ID != ''">,#{FI_ORG_ID}</if>
		)
	</insert>

	<select id="getCustName" parameterType="Map" resultType="Map">
		SELECT
		CL.ID CLIENT_ID, CL.NAME CUST_NAME
		FROM FIL_PROJECT_HEAD PH, FIL_CUST_CLIENT CL
		WHERE PH.CLIENT_ID = CL.ID
		AND PH.ID = #{PROJECT_ID}
	</select>

	<insert id="doInsertAppDetail" parameterType="Map">
		INSERT INTO FI_FUND_DETAIL(ID
		<if test="D_FUND_ID != null and D_FUND_ID != ''">,D_FUND_ID</if>
		<if test="D_PAYEE != null and D_PAYEE != ''">,D_PAYEE</if>
		<if test="D_PAYEE_ACCOUNT != null and D_PAYEE_ACCOUNT != ''">,D_PAYEE_ACCOUNT</if>
		<if test="D_TO_THE_PAYEE != null and D_TO_THE_PAYEE != ''">,D_TO_THE_PAYEE</if>
		<if test="D_CLIENT_CODE != null and D_CLIENT_CODE != ''">,D_CLIENT_CODE</if>
		<if test="D_CLIENT_NAME != null and D_CLIENT_NAME != ''">,D_CLIENT_NAME</if>
		<if test="D_PAY_PROJECT != null and D_PAY_PROJECT != ''">,D_PAY_PROJECT</if>
		<if test="D_PAY_MONEY != null and D_PAY_MONEY != ''">,D_PAY_MONEY</if>
		<if test="D_RECEIVE_DATE != null and D_RECEIVE_DATE != ''">,D_RECEIVE_DATE</if>
		<if test="D_REALITY_DATE != null and D_REALITY_DATE != ''">,D_REALITY_DATE</if>
		<if test="D_PAY_CODE != null and D_PAY_CODE != ''">,D_PAY_CODE</if>
		<if test="D_PROJECT_CODE != null and D_PROJECT_CODE != ''">,D_PROJECT_CODE</if>
		<if test="D_BEGING_ID != null and D_BEGING_ID != ''">,D_BEGING_ID</if>
		<if test="D_FLAG != null and D_FLAG != ''">,D_FLAG</if>
		<if test="D_STATUS != null and D_STATUS != ''">,D_STATUS</if>
		<if test="D_PAY_MONEY != null and D_PAY_MONEY != ''">,D_RECEIVE_MONEY</if>
		<if test="INVOICE_TARGET_TYPE !=null and INVOICE_TARGET_TYPE !=''">,INVOICE_TARGET_TYPE</if>
		<if test="INVOICE_TARGET_ID !=null and INVOICE_TARGET_ID !=''">,INVOICE_TARGET_ID</if>
		<if test="PERIOD !=null and PERIOD !=''">,PERIOD</if>
		)VALUES(#{ID}
		<if test="D_FUND_ID != null and D_FUND_ID != ''">,#{D_FUND_ID}</if>
		<if test="D_PAYEE != null and D_PAYEE != ''">,#{D_PAYEE}</if>
		<if test="D_PAYEE_ACCOUNT != null and D_PAYEE_ACCOUNT != ''">,#{D_PAYEE_ACCOUNT}</if>
		<if test="D_TO_THE_PAYEE != null and D_TO_THE_PAYEE != ''">,#{D_TO_THE_PAYEE}</if>
		<if test="D_CLIENT_CODE != null and D_CLIENT_CODE != ''">,#{D_CLIENT_CODE}</if>
		<if test="D_CLIENT_NAME != null and D_CLIENT_NAME != ''">,#{D_CLIENT_NAME}</if>
		<if test="D_PAY_PROJECT != null and D_PAY_PROJECT != ''">,#{D_PAY_PROJECT}</if>
		<if test="D_PAY_MONEY != null and D_PAY_MONEY != ''">,#{D_PAY_MONEY}</if>
		<if test="D_RECEIVE_DATE != null and D_RECEIVE_DATE != ''">,TO_DATE(#{D_RECEIVE_DATE},'yyyy-MM-dd')</if>
		<if test="D_REALITY_DATE != null and D_REALITY_DATE != ''">,TO_DATE(#{D_REALITY_DATE},'yyyy-MM-dd')</if>
		<if test="D_PAY_CODE != null and D_PAY_CODE != ''">,#{D_PAY_CODE}</if>
		<if test="D_PROJECT_CODE != null and D_PROJECT_CODE != ''">,#{D_PROJECT_CODE}</if>
		<if test="D_BEGING_ID != null and D_BEGING_ID != ''">,#{D_BEGING_ID}</if>
		<if test="D_FLAG != null and D_FLAG != ''">,#{D_FLAG}</if>
		<if test="D_STATUS != null and D_STATUS != ''">,#{D_STATUS}</if>
		<if test="D_PAY_MONEY != null and D_PAY_MONEY != ''">,#{D_PAY_MONEY}</if>
		<if test="INVOICE_TARGET_TYPE !=null and INVOICE_TARGET_TYPE !=''">,#{INVOICE_TARGET_TYPE}</if>
		<if test="INVOICE_TARGET_ID !=null and INVOICE_TARGET_ID !=''">,to_char(#{INVOICE_TARGET_ID})</if>
		<if test="PERIOD != null and PERIOD != ''">,#{PERIOD}</if>
		)
	</insert>

	<select id="getLGJData" parameterType="Map" resultType="Map">
		select
		de.d_pay_money, de.d_fund_id, de.d_fund_id, de.d_beging_id, de.id
		from fi_fund_detail de
		where de.d_pay_project = #{LGJ}
		and de.D_PAY_CODE = #{PAYLIST_CODE}
	</select>

	<select id="getBeginingDetail" parameterType="Map" resultType="Map">
		SELECT R.BEGINNING_NAME D_PAY_PROJECT,
		sum(nvl(R.BEGINNING_MONEY, 0) - nvl(R.BEGINNING_PAID, 0)) D_PAY_MONEY,
		R.BEGINNING_ID D_BEGING_ID,
		R.PAYLIST_CODE D_PAY_CODE,
		R.BEGINNING_NUM PERIOD,
		TO_CHAR(R.BEGINNING_RECEIVE_DATA,'YYYY-MM-DD') D_RECEIVE_DATE
		FROM FI_R_BEGINNING R
		WHERE R.BEGINNING_FLAG = 0
		AND nvl(R.BEGINNING_MONEY, 0) - nvl(R.BEGINNING_PAID, 0) > 0
		<if test="QTFY != null and QTFY != ''">
			AND R.Item_Flag in (2,4)
	   </if>
		<if test="QTFY == null"> AND R.BEGINNING_NAME IN (#{BENJIN},#{LIXI})</if>
		AND R.PAYLIST_CODE = #{PAYLIST_CODE}
		GROUP BY R.BEGINNING_NAME, R.BEGINNING_ID, R.PAYLIST_CODE, R.BEGINNING_NUM,
		TO_CHAR(R.BEGINNING_RECEIVE_DATA,
		'YYYY-MM-DD')
	</select>

	<select id="getOVERDUEDetail" parameterType="Map" resultType="Map">
		SELECT * FROM (SELECT ROUND(MAX(OV.PENALTY_RECE), 2) -
		ROUND(MAX(OV.PENALTY_PAID), 2) D_PAY_MONEY,
		TO_CHAR(MAX(OV.CREATE_DATE), 'yyyy-MM-dd') D_RECEIVE_DATE,
		OV.PAY_CODE D_PAY_CODE,
		OV.PERIOD PERIOD
		FROM FI_OVERDUE OV
		WHERE OV.PAY_CODE = #{PAYLIST_CODE}
		GROUP BY OV.PERIOD, OV.PAY_CODE
		ORDER BY OV.PAY_CODE DESC, OV.PERIOD DESC)T WHERE D_PAY_MONEY >0
	</select>

	<update id="toUpdateFHead" parameterType="Map">
		UPDATE FI_FUND_HEAD
		SET FI_CHECK_DATE=SYSDATE
		,FI_CHECK_NAME=#{USERNAME}
		,FI_CHECK_CODE=#{USERCODE}
		<if test="FI_PAY_BANK !=null">,FI_PAY_BANK=#{FI_PAY_BANK}</if>
		<if test="FI_ACCOUNT_DATE!=null">,FI_ACCOUNT_DATE=TO_DATE(#{FI_ACCOUNT_DATE},'yyyy-MM-dd')
		</if>
		<if test="FI_REALITY_MONEY!=null">,FI_REALITY_MONEY=#{FI_REALITY_MONEY}</if>
		<if test="FI_REALITY_BANK!=null">,FI_REALITY_BANK=#{FI_REALITY_BANK}</if>
		<if test="FI_REALITY_ACCOUNT!=null">,FI_REALITY_ACCOUNT=#{FI_REALITY_ACCOUNT}</if>
		<if test="FI_TAGE !=null">,FI_TAGE=#{FI_TAGE}</if>
		<if test="FI_TAGE_ID !=null">,FI_TAGE_ID=#{FI_TAGE_ID}</if>
		<if test="FI_TAGE_NAME !=null">,FI_TAGE_NAME=#{FI_TAGE_NAME}</if>
		<if test="FI_TAGE_MONEY != null">,FI_TAGE_MONEY=#{FI_TAGE_MONEY}</if>
		<if test="FI_TO_THE_PAYEE !=null">,FI_TO_THE_PAYEE=#{FI_TO_THE_PAYEE}</if>
		<if test="FI_STATUS!=null">,FI_STATUS=#{FI_STATUS}</if>
		WHERE ID=#{FUND_ID}
	</update>

	<delete id="deleteFundSplit" parameterType="Map">
		delete FI_FUND_HEAD_SPLIT WHERE FUND_ID=#{FUND_ID}
	 </delete>

	<insert id="insertFundSplit" parameterType="Map">
		insert into
		FI_FUND_HEAD_SPLIT (FUND_MONEY,FUND_ID) values
		(#{FUND_MONEY},#{FUND_ID})
	</insert>

	<update id="doUpdateEnd_status" parameterType="Map">
		UPDATE
		FIL_BUY_BACK B SET B.IS_END_STATUS = #{IS_END_STATUS} WHERE B.ID =
		#{BUY_ID}
	</update>

	<select id="findPoolData" parameterType="Map" resultType="Map">
		SELECT
		DISTINCT P.POOL_ID, P.OWNER_ID, P.PROJECT_ID, P.BASE_MONEY,
		P.CANUSE_MONEY
		FROM FI_DEPOSIT_POOL P
		LEFT JOIN FIL_PROJECT_HEAD H ON P.PROJECT_ID = H.ID
		LEFT JOIN FI_FUND_DETAIL DE ON DE.D_PROJECT_CODE = H.PRO_CODE
		WHERE DE.D_FUND_ID = #{FUND_ID}
		AND TYPE = #{TYPE}
	</select>

	<select id="getBuyBackData" parameterType="Map" resultType="Map">
		select * from fil_buy_back WHERE ID = #{BUY_BACK_ID}
	</select>

	<select id="toViewFund" parameterType="Map" resultType="Map">
		select *
		from fi_fund_head WHERE id = #{FUND_ID}
	</select>

	<select id="getPoolData1" parameterType="Map" resultType="Map">
		select
		* from fi_deposit_pool d where d.project_id = #{PROJECT_ID}
	</select>

	<select id="getProjectHead" parameterType="Map" resultType="Map">
		select * from fil_project_head where id=#{PROJECT_ID}
	</select>

	<update id="toUpdateDetail" parameterType="Map">
		update FI_FUND_DETAIL set
		D_BEGING_ID=#{FA_BEGING_ID},
		<if test="INVOICE_TARGET_TYPE != null">INVOICE_TARGET_TYPE=#{INVOICE_TARGET_TYPE}, </if>
		<if test="INVOICE_TARGET_ID != null">INVOICE_TARGET_ID=#{INVOICE_TARGET_ID} </if>
		where D_BEGING_ID=#{FA_BEGING_ID}
	</update>

	<update id="toUpdatePool" parameterType="Map">
		update fi_deposit_pool
		set CANUSE_MONEY = #{BASE_MONEY} where PROJECT_ID = #{PROJECT_ID} and
		type= #{TYPE}
	</update>

	<update id="toUpdateBegining" parameterType="Map">
		update fi_r_beginning set BEGINNING_STATUS = 1 where BEGINNING_ID =
		#{D_BEGING_ID}
	</update>

	<update id="toUpdateBegining1" parameterType="Map">
		update fi_r_beginning set BEGINNING_STATUS = 0 , BEGINNING_PAID=0 where
		BEGINNING_ID = #{D_BEGING_ID}
	</update>

	<select id="getFPDX" parameterType="Map" resultType="Map">
		select
		SUP_ID from fil_project_head where pro_code=#{PRO_CODE}
	</select>

	<select id="getRentData" parameterType="Map" resultType="Map">
		select sum(nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0))
		BEGINNING_MONEY,
		sum(nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0)) PAID_MONEY,
		frb.BEGINNING_NUM,
		to_char(frb.BEGINNING_RECEIVE_DATA, 'yyyy-mm-dd') BEGINNING_RECEIVE_DATA,
		'租金' BEGINNING_NAME
		from fi_r_beginning frb
		where frb.ITEM_FLAG = 2
		and frb.BEGINNING_FLAG = 0
		and (nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0)) > 0
		and frb.BEGINNING_STATUS = 0
		and frb.paylist_code = #{PAYLIST_CODE}
		group by frb.beginning_num, frb.beginning_receive_data
		order by to_char(frb.BEGINNING_RECEIVE_DATA, 'yyyy-mm-dd') desc
	</select>
	<select id="getRentData2" parameterType="Map" resultType="Map">
		select sum(nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0))
		BEGINNING_MONEY,
		sum(nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0)) PAID_MONEY,
		frb.BEGINNING_NUM,
		to_char(frb.BEGINNING_RECEIVE_DATA, 'yyyy-mm-dd') BEGINNING_RECEIVE_DATA,
		frb.beginning_name BEGINNING_NAME,FRB.PAYLIST_CODE
		from fi_r_beginning frb
		where frb.ITEM_FLAG = 4
		and frb.BEGINNING_FLAG = 0
		and (nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0)) > 0
		and frb.BEGINNING_STATUS = 0
		and frb.paylist_code = #{PAYLIST_CODE}
		group by frb.beginning_num,
		frb.beginning_receive_data,FRB.PAYLIST_CODE,frb.beginning_name
		order by to_char(frb.BEGINNING_RECEIVE_DATA, 'yyyy-mm-dd') desc
	</select>
	<select id="getRentData3" parameterType="Map" resultType="Map">
		select sum(nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0))
		BEGINNING_MONEY,
		sum(nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0)) PAID_MONEY,
		frb.BEGINNING_NUM,
		to_char(frb.BEGINNING_RECEIVE_DATA, 'yyyy-mm-dd') BEGINNING_RECEIVE_DATA,
		frb.beginning_name BEGINNING_NAME,FRB.PAYLIST_CODE
		from fi_r_beginning frb
		where frb.ITEM_FLAG in (2,4)
		and frb.BEGINNING_FLAG = 0
		and (nvl(frb.BEGINNING_MONEY, 0) - nvl(frb.BEGINNING_PAID, 0)) > 0
		and frb.BEGINNING_STATUS = 0
		and frb.paylist_code = #{PAYLIST_CODE}
		group by frb.beginning_num,
		frb.beginning_receive_data,FRB.PAYLIST_CODE,frb.beginning_name
		order by to_char(frb.BEGINNING_RECEIVE_DATA, 'yyyy-mm-dd') desc
	</select>

	<select id="getFirstMoney" parameterType="Map" resultType="Map">
		select nvl(sum(nvl(frb.beginning_money, 0) - nvl(frb.beginning_paid,
		0)),0) ys_money
		from fi_r_beginning frb
		where frb.item_flag = '4'
		and frb.beginning_flag = 0
		and frb.paylist_code = #{PAYLIST_CODE}
	</select>
	<select id="getFirstMoney1" parameterType="Map" resultType="Map">
		select nvl(sum(nvl(frb.beginning_money, 0) - nvl(frb.beginning_paid,
		0)),0) ys_money
		from fi_r_beginning frb
		where frb.item_flag = '4'
		and frb.beginning_flag = 0
		and frb.Beginning_Name not like '%留购%'
		and frb.paylist_code = #{PAYLIST_CODE}
	</select>
	<select id="getFirstMoney2" parameterType="Map" resultType="Map">
		select nvl(sum(nvl(frb.beginning_money, 0) - nvl(frb.beginning_paid,
		0)),0) ys_money
		from fi_r_beginning frb
		where frb.item_flag in (2,4)
		and frb.beginning_flag = 0
		and frb.paylist_code = #{PAYLIST_CODE}
	</select>

	<select id="getRentData1" parameterType="Map" resultType="Map">
		SELECT
		R.BEGINNING_NAME D_PAY_PROJECT,
		sum(nvl(R.BEGINNING_MONEY, 0) - nvl(R.BEGINNING_PAID, 0)) D_PAY_MONEY,
		R.BEGINNING_ID D_BEGING_ID,
		R.PAYLIST_CODE D_PAY_CODE,
		R.BEGINNING_NUM PERIOD,
		TO_CHAR(R.BEGINNING_RECEIVE_DATA,'YYYY-MM-DD') D_RECEIVE_DATE
		FROM FI_R_BEGINNING R
		WHERE R.BEGINNING_FLAG = 0
		AND nvl(R.BEGINNING_MONEY, 0) - nvl(R.BEGINNING_PAID, 0) > 0
		AND R.ITEM_FLAG = 4
		AND R.PAYLIST_CODE = #{PAYLIST_CODE}
		GROUP BY R.BEGINNING_NAME, R.BEGINNING_ID, R.PAYLIST_CODE, R.BEGINNING_NUM,
		TO_CHAR(R.BEGINNING_RECEIVE_DATA,
		'YYYY-MM-DD')
    </select>
	<select id="getRentData5" parameterType="Map" resultType="Map">
		SELECT
		BID,
		BEGINNING_NUM,
		BEGINNING_NAME,
		NVL(beginning_paid, 0) beginning_paid,
		NVL(BEGINNING_MONEY, 0) BEGINNING_MONEY,
		BEGINNING_RECEIVE_DATA
		FROM (SELECT NULL BID,
		T.PERIOD BEGINNING_NUM,
		'违约金' BEGINNING_NAME,
		round(T.PENALTY_RECE, 0) - round(T.PENALTY_PAID, 0) beginning_paid,
		round(T.PENALTY_RECE, 0) BEGINNING_MONEY,
		to_char(t.RENT_DATE,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		1 TYPE
		FROM FI_OVERDUE T
		WHERE T.PAY_CODE = #{PAYLIST_CODE}
		AND to_char(T.CREATE_DATE, 'yyyy-mm-dd') =
		(SELECT to_char(max(fpp1.account_date), 'yyyy-mm-dd')
		FROM fil_buy_back fpp1
		where fpp1.paylist_code = #{PAYLIST_CODE})
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid beginning_paid,
		T.BEGINNING_MONEY,
		to_char(t.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		2 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.ITEM_FLAG = 4
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid beginning_paid,
		T.BEGINNING_MONEY,
		to_char(t.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		3 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '利息'
		AND T.ITEM_FLAG = 2
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid beginning_paid,
		T.BEGINNING_MONEY,
		to_char(t.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		4 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '本金'
		AND T.ITEM_FLAG = 2)
		WHERE BEGINNING_MONEY > 0
		ORDER BY BEGINNING_NUM, TYPE
    </select>
	<select id="getRentData6" parameterType="Map" resultType="Map">
		SELECT
		BID,
		BEGINNING_NUM,
		BEGINNING_NAME,
		NVL(beginning_paid, 0) beginning_paid,
		NVL(BEGINNING_MONEY, 0) BEGINNING_MONEY,
		BEGINNING_RECEIVE_DATA
		FROM (SELECT NULL BID,
		T.PERIOD BEGINNING_NUM,
		'违约金' BEGINNING_NAME,
		round(T.PENALTY_RECE, 0) - round(T.PENALTY_PAID, 0) beginning_paid,
		round(T.PENALTY_RECE, 0) BEGINNING_MONEY,
		to_char(t.RENT_DATE,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		1 TYPE
		FROM FI_OVERDUE T
		WHERE T.PAY_CODE = #{PAYLIST_CODE}
		AND to_char(T.CREATE_DATE, 'yyyy-mm-dd') =
		(SELECT to_char(max(fpp1.account_date), 'yyyy-mm-dd')
		FROM fil_paychange_parameter fpp1,fil_rent_plan_head frp
		where fpp1.pay_id = frp.id
		and frp.paylist_code = #{PAYLIST_CODE})
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid beginning_paid,
		T.BEGINNING_MONEY,
		to_char(t.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		2 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.ITEM_FLAG = 4
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid beginning_paid,
		T.BEGINNING_MONEY,
		to_char(t.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		3 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '利息'
		AND T.ITEM_FLAG = 2
		UNION ALL
		SELECT T.BEGINNING_ID,
		T.BEGINNING_NUM,
		T.BEGINNING_NAME,
		T.BEGINNING_MONEY - t.beginning_paid beginning_paid,
		T.BEGINNING_MONEY,
		to_char(t.BEGINNING_RECEIVE_DATA,'yyyy-mm-dd')BEGINNING_RECEIVE_DATA,
		4 TYPE
		FROM FI_R_BEGINNING T
		WHERE T.PAYLIST_CODE = #{PAYLIST_CODE}
		AND T.BEGINNING_MONEY > T.BEGINNING_PAID
		AND T.BEGINNING_NAME = '本金'
		AND T.ITEM_FLAG = 2)
		WHERE BEGINNING_MONEY > 0
		ORDER BY BEGINNING_NUM, TYPE
    </select>
	<select id="getRentData4" parameterType="Map" resultType="Map">
		SELECT
		R.BEGINNING_NAME D_PAY_PROJECT,
		sum(nvl(R.BEGINNING_MONEY, 0) - nvl(R.BEGINNING_PAID, 0)) D_PAY_MONEY,
		R.BEGINNING_ID D_BEGING_ID,
		R.PAYLIST_CODE D_PAY_CODE,
		R.BEGINNING_NUM PERIOD,
		TO_CHAR(R.BEGINNING_RECEIVE_DATA,'YYYY-MM-DD') D_RECEIVE_DATE
		FROM FI_R_BEGINNING R
		WHERE nvl(R.BEGINNING_MONEY, 0) - nvl(R.BEGINNING_PAID, 0) > 0
		AND R.ITEM_FLAG in (2,4)
		AND R.PAYLIST_CODE = #{PAYLIST_CODE}
		GROUP BY R.BEGINNING_NAME, R.BEGINNING_ID, R.PAYLIST_CODE, R.BEGINNING_NUM,
		TO_CHAR(R.BEGINNING_RECEIVE_DATA,
		'YYYY-MM-DD')
    </select>

	<update id="doUpdateBuyStatus" parameterType="Map">
		update fil_buy_back b set b.REALITY_DATE =
		to_date(#{FI_ACCOUNT_DATE},'yyyy-MM-dd'), IS_END_STATUS=1,
		HIRE_BANK=#{FI_REALITY_BANK} where ID=#{BUY_BACK_ID}
	</update>

	<select id="getOverDueMax" parameterType="Map" resultType="String">
		select max(PERIOD) PERIOD from fi_overdue o where o.pay_code =
		#{PAYLIST_CODE}
	</select>

	<select id="getOverDueData" parameterType="Map" resultType="Map">
		SELECT ID,
		PAY_CODE D_PAY_CODE,
		PERIOD,
		nvl(RENT_RECE, 0) - nvl(RENT_PAID, 0) RENT_RECE,
		round(nvl(PENALTY_RECE, 0),0) - round(nvl(PENALTY_PAID, 0),0) D_PAY_MONEY,
		to_char(RENT_DATE, 'yyyy-MM-dd') D_RECEIVE_DATE,
		to_char(PENALTY_DATE, 'yyyy-mm-dd') PENALTY_DATE
		FROM fi_overdue t
		where to_char(t.create_date, 'yyyy-mm-dd') =
		(SELECT to_char(nvl(max(fbb3.account_date),max(fpp1.account_date)),
		'yyyy-mm-dd') FROM fil_rent_plan_head frph2
		left join fil_paychange_parameter fpp1 on frph2.id = fpp1.pay_id
		left join fil_buy_back fbb3 on fbb3.pay_id= frph2.id
		where frph2.paylist_code= #{PAYLIST_CODE})
		and t.pay_code = #{PAYLIST_CODE}
		and round(nvl(PENALTY_RECE, 0),0) - round(nvl(PENALTY_PAID, 0),0)>0.6
	</select>
	<update id="upateAppDetail" parameterType="Map">
		update fi_overdue t
		set t.rent_paid = t.rent_rece , t.penalty_paid=#{D_PAY_MONEY} where
		t.pay_code=#{D_PAY_CODE} and t.period=#{PERIOD} and
		to_char(t.create_date, 'yyyy-mm-dd') =
		(SELECT to_char(nvl(max(fbb3.account_date),max(fpp1.account_date)),
		'yyyy-mm-dd') FROM fil_rent_plan_head frph2
		left join fil_paychange_parameter fpp1 on frph2.id = fpp1.pay_id
		left join fil_buy_back fbb3 on fbb3.pay_id= frph2.id
		where frph2.paylist_code= #{D_PAY_CODE})
	</update>

	<select id="getPERIOD" parameterType="Map" resultType="String">
		SELECT
		R.BEGINNING_ID D_BEGING_ID
		FROM FI_R_BEGINNING R
		WHERE R.PAYLIST_CODE = #{D_PAY_CODE} AND R.BEGINNING_NUM=#{PERIOD}
	</select>

	<select id="getFundList" parameterType="Map" resultType="Map">
		select
		distinct d.d_fund_id fund_id
		from fi_fund_detail d
		left join fi_fund_head h on d.d_fund_id = h.id
		where h.fi_flag in (9, 10, 11)
		and d.d_pay_code = #{PAYLIST_CODE}
		and d.d_project_code = #{PRO_CODE}
	</select>

	<select id="queryJbpmModel" parameterType="map" resultType="string">
		SELECT
		TSD.FLAG
		FROM T_SYS_DATA_DICTIONARY TSD
		WHERE TSD.TYPE=#{_TYPE}
		AND TSD.CODE=(SELECT T.MODULE FROM JBPM_DEPLOYMENT T WHERE
		T.PDKEY=#{JBPMID})
	</select>

	<select id="getOverBuyBack" parameterType="Map">
		SELECT ID FROM
		FI_OVERDUE WHERE OVER_TYPE IS NOT NULL AND PAY_CODE = #{PAYLIST_CODE}
		AND PROJECT_ID = #{PAYLIST_ID}
	</select>
	<select id="is_deposit" parameterType="Map" resultType="int">
		SELECT
		max(t.is_deposit) is_deposit FROM fil_buy_back t where t.paylist_code
		= #{PAYLIST_CODE}
	</select>

	<delete id="delFundAccount" parameterType="Map">
		DELETE FROM
		FI_FUND_ACCOUNT WHERE FA_FUND_ID =#{fund_id}
	</delete>

	<delete id="delFundDetail" parameterType="Map">
		DELETE FROM
		FI_FUND_DETAIL WHERE D_FUND_ID =#{fund_id}
	</delete>

	<delete id="delFundHead" parameterType="Map">
		DELETE FROM FI_FUND_HEAD
		WHERE ID=#{ID}
	</delete>

	<delete id="delOverDue" parameterType="Map">
		DELETE FROM FI_OVERDUE
		WHERE ID = #{ID}
	</delete>
</mapper>